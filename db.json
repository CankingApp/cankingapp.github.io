{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/about/index/zhifu_q.png","path":"about/index/zhifu_q.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/about/index/weixin_q.png","path":"about/index/weixin_q.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1478579516025},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1478579516025},{"_id":"themes/maupassant/README.md","hash":"def832798496a6ad6a18e0ba2c7149571ded21a0","modified":1478579516025},{"_id":"themes/maupassant/_config.yml","hash":"fe310c9659d7ca0d7ac805ddde19fd738536eb17","modified":1478579516025},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1478579516033},{"_id":"source/_posts/2016-03-18-01.md","hash":"a634d95d63d804acacbba0bc2cc355f394544268","modified":1478675431965},{"_id":"source/_posts/Hexo-blog.md","hash":"4a54b4dd12e12b9c015e4a334c3ec5f2a05f381e","modified":1478579515921},{"_id":"source/_posts/access-float.md","hash":"897a2603377088f77fef7ad590c3169e7d4beae7","modified":1478675410130},{"_id":"source/_posts/android-permission.md","hash":"7ccb041b332c4af0b85065739cdbbea800ec23c5","modified":1478579515949},{"_id":"source/_posts/android-theme.md","hash":"2e960ea404903b8f69d54d845e7d7efdd506104d","modified":1478579515981},{"_id":"source/_posts/android-theme.md~","hash":"c3def404c8d995ddbc4d41182609928ccdcf2e85","modified":1478579515989},{"_id":"source/_posts/apk-backup.md","hash":"d4d082d5bce1cbf1a491bf5efbb4ab66c5da75e2","modified":1478579515989},{"_id":"source/_posts/ffmpeg.md","hash":"c92671a8e35aae41a0fcca577909f933a5776070","modified":1478579515997},{"_id":"source/_posts/git-log.md","hash":"b04602e34643617d138b2e4e1431df224e8051ac","modified":1478579515997},{"_id":"source/_posts/hello-world.md","hash":"20dbf3c857c3298bc779caef7a2e802347fece45","modified":1478579515997},{"_id":"source/_posts/notification-mgr.md","hash":"44709b1d56f1b301567538c580a8e32f0a2db556","modified":1478580672279},{"_id":"source/_posts/npm-update-errer.md","hash":"fa31e99bad99ff8ca60383976412b01fd5695e04","modified":1478579516021},{"_id":"source/_posts/python.md","hash":"bf5adfe1e7bce4fbd3523098ebfb56b0738814a2","modified":1478579516021},{"_id":"source/about/index.md","hash":"446d55e87abb8d6de0e2b78863e2d262fe3b10bd","modified":1478579516021},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1478579516025},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1478579516025},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1478579516025},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1478579516025},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1478579516025},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1478579516025},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1478579516025},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1478579516033},{"_id":"themes/maupassant/layout/base.jade","hash":"ce9e1efb5a039d785445d2c89ba33cb0967f21df","modified":1478579516033},{"_id":"themes/maupassant/layout/index.jade","hash":"ac74f4f7cee705693bf5977bbae074373acddb7c","modified":1478579516033},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1478579516033},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1478579516033},{"_id":"source/_posts/access-float/info.png","hash":"8ff8ce2716c2b7ab2c7dbda5b0426ed7a8b610d9","modified":1478579515945},{"_id":"source/_posts/android-permission/danger.png","hash":"e0b7402aee6cfc844f5b9bef8c98b6a921423faa","modified":1478579515953},{"_id":"source/_posts/android-theme/theme.png","hash":"0e9f7dc61d6418e11bd190ce288dc30c7220999f","modified":1478579515989},{"_id":"source/_posts/ffmpeg/2016-03-30 19-10-29.png","hash":"38350d2c3a0f731c8c3efd370c7db06e1b392e33","modified":1478579515997},{"_id":"source/_posts/notification-mgr/demo.png","hash":"05ea8c313490a206e6a212648fc6d48fb5ff8f19","modified":1478579516009},{"_id":"source/_posts/notification-mgr/scr_a.png","hash":"e7d0f0bba146f1d6f553aa319a83baffdc13ed8b","modified":1478579516009},{"_id":"source/_posts/notification-mgr/scr_b.png","hash":"16082a980a05c0d942267616cec56eb916fbeb02","modified":1478579516009},{"_id":"source/_posts/notification-mgr/statusbar.png","hash":"fbdb3136de8e483c610f50fd34ac73ee945e829f","modified":1478579516009},{"_id":"source/about/index/zhifu_q.png","hash":"2e3e0316c537732d12bdc40b398a7f279580747c","modified":1478579516021},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"fb13b62a36d20501b87b12da6a87452f1bb225cb","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"e622275c6d1f65c5f8a428ec22ec8bd35a1928e0","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1478579516033},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1478579516033},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1478579516033},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1478579516033},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478579516033},{"_id":"themes/maupassant/source/css/style.scss","hash":"810e09434428b2159a2898935bddb95d33d57400","modified":1478579516033},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478579516033},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478579516037},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478579516037},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478579516037},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478579516037},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1478579516037},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"92be822124e716a947bae3d676867e702933a93c","modified":1478579516037},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1478579516037},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1478579516037},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1478579516037},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1478579516037},{"_id":"source/_posts/access-float/dump.png","hash":"28d1e375b7cb1436010e7686cbade89fe3ab639e","modified":1478579515945},{"_id":"source/_posts/android-permission/error.png","hash":"a22db57c15bfb3cd13e50ebb4b4de0de253583ab","modified":1478579515953},{"_id":"source/_posts/android-permission/should.png","hash":"de020f84614350998e3266f7d3363404f9788595","modified":1478579515965},{"_id":"source/about/index/weixin_q.png","hash":"5a495cfcc41650aa2da1699ac6216f71c46d8307","modified":1478579516021},{"_id":"source/_posts/access-float/action.gif","hash":"bd16efe4a272506453761cd39807454ae5b6ad9b","modified":1478579515945},{"_id":"source/_posts/access-float/activity_info.png","hash":"ad8080264f209a6ebb7f20ca12068342dadc5f7d","modified":1478579515945},{"_id":"source/_posts/ffmpeg/a.gif","hash":"768a19a3508c9dc119bfa4f50d79555784ef8b0c","modified":1478579515997},{"_id":"source/_posts/android-permission/acces_in.png","hash":"13660cf78021fdee3a12457a74523bd38bc16e6a","modified":1478579515953},{"_id":"source/_posts/android-permission/mult_2.png","hash":"b3224f7e0d7c8fe36b39686ff2655352b22c5cf9","modified":1478579515957},{"_id":"source/_posts/android-permission/mult_p1.png","hash":"1da5dfd6a0c75cbf05979a63c231d18e0b37492f","modified":1478579515961},{"_id":"source/_posts/android-permission/per_show.png","hash":"6b3d4e1828ee6f5283497c6491601fac50acf223","modified":1478579515965},{"_id":"source/_posts/android-permission/single_p.png","hash":"bbdf35981a718c3b17f7b3e0d7257c61e72b66a2","modified":1478579515965},{"_id":"source/_posts/2016-03-18-01/IMG_0021.JPG","hash":"fa57f530c494bda42f3cd5f69074bc79f8351a68","modified":1478579515909},{"_id":"source/_posts/access-float/act.mp4","hash":"e1e6251b0d5b88cc36c5f1b1c5f189fc5cad68e9","modified":1478579515941}],"Category":[{"name":"android","_id":"civam5tlo0003a475883zdkz4"},{"name":"hexo","_id":"civam5tls0008a475o3zgjsip"},{"name":"tool","_id":"civam5tm2000ka475mhlb3r1s"},{"name":"git","_id":"civam5tm6000ta475oucayfe5"},{"name":"node","_id":"civam5tm80010a4755hnxwqp9"},{"name":"python","_id":"civam5tm90015a4755a2uc0na"}],"Data":[],"Page":[{"title":"关于我","date":"2016-03-18T10:26:25.000Z","_content":"\n\n### 常兴，高级安卓研发工程师\n* 现属百度手机卫士团队\n* 热衷移动软件产品体验, 在Google Play及国内各大市场发布多款安卓移动实用软件(健美计步器＼充电助手，等)。喜户外活动、游泳，跑步,交友。\n* 做酷的东西，成为伟大的工程师，写匪夷所思的代码，然后和每个人成为朋友。 \n\n### 联系方式\n\n邮箱：　<a href=\"mailto:kingh.cha@gmail.com\">kingh.cha@gmail.com</a>\n\n公众号：CankingApp\n\n新浪：　[http://weibo.com/canking666](http://weibo.com/canking666)\n\nGithub: https://github.com/CankingApp/\n\n### 打赏\n支付宝\n![支付宝扫一扫](index/zhifu_q.png)\n\n微信\n![微信扫一扫](index/weixin_q.png)\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-03-18 18:26:25\n---\n\n\n### 常兴，高级安卓研发工程师\n* 现属百度手机卫士团队\n* 热衷移动软件产品体验, 在Google Play及国内各大市场发布多款安卓移动实用软件(健美计步器＼充电助手，等)。喜户外活动、游泳，跑步,交友。\n* 做酷的东西，成为伟大的工程师，写匪夷所思的代码，然后和每个人成为朋友。 \n\n### 联系方式\n\n邮箱：　<a href=\"mailto:kingh.cha@gmail.com\">kingh.cha@gmail.com</a>\n\n公众号：CankingApp\n\n新浪：　[http://weibo.com/canking666](http://weibo.com/canking666)\n\nGithub: https://github.com/CankingApp/\n\n### 打赏\n支付宝\n![支付宝扫一扫](index/zhifu_q.png)\n\n微信\n![微信扫一扫](index/weixin_q.png)\n\n\n","updated":"2016-11-08T04:31:56.021Z","path":"about/index.html","comments":1,"layout":"page","_id":"civam5txy001ia4756ehziwsg","content":"<h3 id=\"常兴，高级安卓研发工程师\"><a href=\"#常兴，高级安卓研发工程师\" class=\"headerlink\" title=\"常兴，高级安卓研发工程师\"></a>常兴，高级安卓研发工程师</h3><ul>\n<li>现属百度手机卫士团队</li>\n<li>热衷移动软件产品体验, 在Google Play及国内各大市场发布多款安卓移动实用软件(健美计步器＼充电助手，等)。喜户外活动、游泳，跑步,交友。</li>\n<li>做酷的东西，成为伟大的工程师，写匪夷所思的代码，然后和每个人成为朋友。 </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>邮箱：　<a href=\"mailto:kingh.cha@gmail.com\" target=\"_blank\" rel=\"external\">kingh.cha@gmail.com</a></p>\n<p>公众号：CankingApp</p>\n<p>新浪：　<a href=\"http://weibo.com/canking666\" target=\"_blank\" rel=\"external\">http://weibo.com/canking666</a></p>\n<p>Github: <a href=\"https://github.com/CankingApp/\" target=\"_blank\" rel=\"external\">https://github.com/CankingApp/</a></p>\n<h3 id=\"打赏\"><a href=\"#打赏\" class=\"headerlink\" title=\"打赏\"></a>打赏</h3><p>支付宝<br><img src=\"index/zhifu_q.png\" alt=\"支付宝扫一扫\"></p>\n<p>微信<br><img src=\"index/weixin_q.png\" alt=\"微信扫一扫\"></p>\n","excerpt":"","more":"<h3 id=\"常兴，高级安卓研发工程师\"><a href=\"#常兴，高级安卓研发工程师\" class=\"headerlink\" title=\"常兴，高级安卓研发工程师\"></a>常兴，高级安卓研发工程师</h3><ul>\n<li>现属百度手机卫士团队</li>\n<li>热衷移动软件产品体验, 在Google Play及国内各大市场发布多款安卓移动实用软件(健美计步器＼充电助手，等)。喜户外活动、游泳，跑步,交友。</li>\n<li>做酷的东西，成为伟大的工程师，写匪夷所思的代码，然后和每个人成为朋友。 </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>邮箱：　<a href=\"mailto:kingh.cha@gmail.com\">kingh.cha@gmail.com</a></p>\n<p>公众号：CankingApp</p>\n<p>新浪：　<a href=\"http://weibo.com/canking666\">http://weibo.com/canking666</a></p>\n<p>Github: <a href=\"https://github.com/CankingApp/\">https://github.com/CankingApp/</a></p>\n<h3 id=\"打赏\"><a href=\"#打赏\" class=\"headerlink\" title=\"打赏\"></a>打赏</h3><p>支付宝<br><img src=\"index/zhifu_q.png\" alt=\"支付宝扫一扫\"></p>\n<p>微信<br><img src=\"index/weixin_q.png\" alt=\"微信扫一扫\"></p>\n"}],"Post":[{"title":"增量升级项目","date":"2015-06-18T09:06:41.000Z","_content":"\n本项目为增量升级Demo版本, 主要用与测试相关封装代码,及导出相关jar包.\n项目采用了jni调用方式,不用自己ndk-build, 当然也支持自定义 android.mk, 自行ndk-build手动编译\nbsdiff工具gcc编译后的工具放在 ./tool/bsdiff 下\n\n<!--more-->\n\n## 项目说明:\n考虑到增量升级部署问题,此项目先针对卫士(垃圾)数据库做了单个版本的升级, 技术效果成熟以后再逐步推广到其他模块.\n\n项目中用的工具包:\n* [bsdiff下载](http://www.daemonology.net/bsdiff/), 也可以从安卓源码中得到: \\external\\bsdiff\n* [bzip2下载](http://www.bzip.org/downloads.html), pc上可以直接安装使用,方法:sudo apt-get install libbz2-dev .下载是用与封装成java代码共bsdiff依赖\n> 产生差分包: bsdiff oldfile newfile patchfile  \n> 合并差分包: bspatch oldfile newfile patchfile\n\n## 流程总结\n\n1. 服务器生成各个提供整理升级的patch文件及新文件指纹.\n2. 客户端到服务器查询是否有更新.\n3. 有更新则,上传自己的版本号,查询下载相应的patch文件.\n4. 客户端用patch生成新文件, 并生成指纹与服务器端新文件指纹对比.\n5. 指纹相同则,增量升级成功,客户端应用生成的新文件.指纹不同则抛弃增量升级,改为普通全量升级.\n\n\n## 卫士数据库增量升级说明\n1. 增量包需要有rd本地产生,然后交与qa配置到后台测试.\n2. 增量包固定的数据库格式号约定为: -1\n3. 增量升级包需要和升级包同时配置,增量包才能生效.\n4. 相关log : **adb logcat | grep --color=auto \"SmartUpdate\\|UpdateManager\\|apptrash\\|AppTrashDbOpenHelper\"**\n5. 不影响原有的数据库更新及拉取策略,及相关逻辑和上报　(可能会附加一些增量升级的上报，待定). (需要更新时会先检测是否有增量升级,有 的话走增量升级,增量升级失败,会反回来走正常升级).\n6. 数据库目前只针对上个版本提供升级包,客户端未命中的,还是走原来的流程普通升级.\n","source":"_posts/2016-03-18-01.md","raw":"---\ntitle: 增量升级项目\ndate: 2015-06-18 17:06:41\ncategories: android \ntags: smart update\n---\n\n本项目为增量升级Demo版本, 主要用与测试相关封装代码,及导出相关jar包.\n项目采用了jni调用方式,不用自己ndk-build, 当然也支持自定义 android.mk, 自行ndk-build手动编译\nbsdiff工具gcc编译后的工具放在 ./tool/bsdiff 下\n\n<!--more-->\n\n## 项目说明:\n考虑到增量升级部署问题,此项目先针对卫士(垃圾)数据库做了单个版本的升级, 技术效果成熟以后再逐步推广到其他模块.\n\n项目中用的工具包:\n* [bsdiff下载](http://www.daemonology.net/bsdiff/), 也可以从安卓源码中得到: \\external\\bsdiff\n* [bzip2下载](http://www.bzip.org/downloads.html), pc上可以直接安装使用,方法:sudo apt-get install libbz2-dev .下载是用与封装成java代码共bsdiff依赖\n> 产生差分包: bsdiff oldfile newfile patchfile  \n> 合并差分包: bspatch oldfile newfile patchfile\n\n## 流程总结\n\n1. 服务器生成各个提供整理升级的patch文件及新文件指纹.\n2. 客户端到服务器查询是否有更新.\n3. 有更新则,上传自己的版本号,查询下载相应的patch文件.\n4. 客户端用patch生成新文件, 并生成指纹与服务器端新文件指纹对比.\n5. 指纹相同则,增量升级成功,客户端应用生成的新文件.指纹不同则抛弃增量升级,改为普通全量升级.\n\n\n## 卫士数据库增量升级说明\n1. 增量包需要有rd本地产生,然后交与qa配置到后台测试.\n2. 增量包固定的数据库格式号约定为: -1\n3. 增量升级包需要和升级包同时配置,增量包才能生效.\n4. 相关log : **adb logcat | grep --color=auto \"SmartUpdate\\|UpdateManager\\|apptrash\\|AppTrashDbOpenHelper\"**\n5. 不影响原有的数据库更新及拉取策略,及相关逻辑和上报　(可能会附加一些增量升级的上报，待定). (需要更新时会先检测是否有增量升级,有 的话走增量升级,增量升级失败,会反回来走正常升级).\n6. 数据库目前只针对上个版本提供升级包,客户端未命中的,还是走原来的流程普通升级.\n","slug":"2016-03-18-01","published":1,"updated":"2016-11-09T07:10:31.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlh0000a475b1s967jz","content":"<p>本项目为增量升级Demo版本, 主要用与测试相关封装代码,及导出相关jar包.<br>项目采用了jni调用方式,不用自己ndk-build, 当然也支持自定义 android.mk, 自行ndk-build手动编译<br>bsdiff工具gcc编译后的工具放在 ./tool/bsdiff 下</p>\n<a id=\"more\"></a>\n<h2 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明:\"></a>项目说明:</h2><p>考虑到增量升级部署问题,此项目先针对卫士(垃圾)数据库做了单个版本的升级, 技术效果成熟以后再逐步推广到其他模块.</p>\n<p>项目中用的工具包:</p>\n<ul>\n<li><a href=\"http://www.daemonology.net/bsdiff/\" target=\"_blank\" rel=\"external\">bsdiff下载</a>, 也可以从安卓源码中得到: \\external\\bsdiff</li>\n<li><a href=\"http://www.bzip.org/downloads.html\" target=\"_blank\" rel=\"external\">bzip2下载</a>, pc上可以直接安装使用,方法:sudo apt-get install libbz2-dev .下载是用与封装成java代码共bsdiff依赖<blockquote>\n<p>产生差分包: bsdiff oldfile newfile patchfile<br>合并差分包: bspatch oldfile newfile patchfile</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"流程总结\"><a href=\"#流程总结\" class=\"headerlink\" title=\"流程总结\"></a>流程总结</h2><ol>\n<li>服务器生成各个提供整理升级的patch文件及新文件指纹.</li>\n<li>客户端到服务器查询是否有更新.</li>\n<li>有更新则,上传自己的版本号,查询下载相应的patch文件.</li>\n<li>客户端用patch生成新文件, 并生成指纹与服务器端新文件指纹对比.</li>\n<li>指纹相同则,增量升级成功,客户端应用生成的新文件.指纹不同则抛弃增量升级,改为普通全量升级.</li>\n</ol>\n<h2 id=\"卫士数据库增量升级说明\"><a href=\"#卫士数据库增量升级说明\" class=\"headerlink\" title=\"卫士数据库增量升级说明\"></a>卫士数据库增量升级说明</h2><ol>\n<li>增量包需要有rd本地产生,然后交与qa配置到后台测试.</li>\n<li>增量包固定的数据库格式号约定为: -1</li>\n<li>增量升级包需要和升级包同时配置,增量包才能生效.</li>\n<li>相关log : <strong>adb logcat | grep –color=auto “SmartUpdate|UpdateManager|apptrash|AppTrashDbOpenHelper”</strong></li>\n<li>不影响原有的数据库更新及拉取策略,及相关逻辑和上报　(可能会附加一些增量升级的上报，待定). (需要更新时会先检测是否有增量升级,有 的话走增量升级,增量升级失败,会反回来走正常升级).</li>\n<li>数据库目前只针对上个版本提供升级包,客户端未命中的,还是走原来的流程普通升级.</li>\n</ol>\n","excerpt":"<p>本项目为增量升级Demo版本, 主要用与测试相关封装代码,及导出相关jar包.<br>项目采用了jni调用方式,不用自己ndk-build, 当然也支持自定义 android.mk, 自行ndk-build手动编译<br>bsdiff工具gcc编译后的工具放在 ./tool/bsdiff 下</p>","more":"<h2 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明:\"></a>项目说明:</h2><p>考虑到增量升级部署问题,此项目先针对卫士(垃圾)数据库做了单个版本的升级, 技术效果成熟以后再逐步推广到其他模块.</p>\n<p>项目中用的工具包:</p>\n<ul>\n<li><a href=\"http://www.daemonology.net/bsdiff/\">bsdiff下载</a>, 也可以从安卓源码中得到: \\external\\bsdiff</li>\n<li><a href=\"http://www.bzip.org/downloads.html\">bzip2下载</a>, pc上可以直接安装使用,方法:sudo apt-get install libbz2-dev .下载是用与封装成java代码共bsdiff依赖<blockquote>\n<p>产生差分包: bsdiff oldfile newfile patchfile<br>合并差分包: bspatch oldfile newfile patchfile</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"流程总结\"><a href=\"#流程总结\" class=\"headerlink\" title=\"流程总结\"></a>流程总结</h2><ol>\n<li>服务器生成各个提供整理升级的patch文件及新文件指纹.</li>\n<li>客户端到服务器查询是否有更新.</li>\n<li>有更新则,上传自己的版本号,查询下载相应的patch文件.</li>\n<li>客户端用patch生成新文件, 并生成指纹与服务器端新文件指纹对比.</li>\n<li>指纹相同则,增量升级成功,客户端应用生成的新文件.指纹不同则抛弃增量升级,改为普通全量升级.</li>\n</ol>\n<h2 id=\"卫士数据库增量升级说明\"><a href=\"#卫士数据库增量升级说明\" class=\"headerlink\" title=\"卫士数据库增量升级说明\"></a>卫士数据库增量升级说明</h2><ol>\n<li>增量包需要有rd本地产生,然后交与qa配置到后台测试.</li>\n<li>增量包固定的数据库格式号约定为: -1</li>\n<li>增量升级包需要和升级包同时配置,增量包才能生效.</li>\n<li>相关log : <strong>adb logcat | grep –color=auto “SmartUpdate|UpdateManager|apptrash|AppTrashDbOpenHelper”</strong></li>\n<li>不影响原有的数据库更新及拉取策略,及相关逻辑和上报　(可能会附加一些增量升级的上报，待定). (需要更新时会先检测是否有增量升级,有 的话走增量升级,增量升级失败,会反回来走正常升级).</li>\n<li>数据库目前只针对上个版本提供升级包,客户端未命中的,还是走原来的流程普通升级.</li>\n</ol>"},{"title":"Hexo-免费博客搭建使用讲解","date":"2016-03-18T07:40:40.000Z","_content":"\n初识hexo就给人以眼前一亮的感觉, 查看资料到自己搭建个人博客, 简直是给人\"带你装B,带你F\"的快感,简单的博客生成操作, 多样化美观的主题选择, 功能强大的插件定制,关键是这些都是免费开源的,作为一个程序员,没有什么比遇到这种好使的软件更加给人已激动了.\n\n\n![casper](http://img.blog.csdn.net/20160318142830765)\n\n<!--more-->\n\n![美到爆,有木有](http://img.blog.csdn.net/20160318142902109) ![想拥有吗?继续学习把...](http://img.blog.csdn.net/20160318143205032)\n\n## 配置环境\n安装Node（必须）作用：用来生成静态页面的, win\\mac\\linux都有相关版本自行到官网下载。\n安装Git（必须）作用：作为一个21时间程序员,这个肯定大家都会用, 测试过程发现最好配置ssh, 体验会更好。\n\n## 开发及配置\n\n### 1. 安装hexo\n\n\t\t\t$ npm install -g hexo\n\t新版本需要安装git插件  $ npm install hexo-deployer-git --save\n\t\n### 2. 初始化项目\n新建一个你放hexo的新项目目录, cd到里面执行:\n\n\t\t\t$ hexo init\n\t\t\t$ npm install  #安装相关依赖\n\n### 3. Demo生成及预览\n\n\t\t$ hexo generate #生成静态页面\n\t\t$ hexo server #启动本地预览服务\n然后用浏览器访问http://localhost:4000/，此时，你应该看到了一个漂亮的博客了\n\n### 4. 主题选择及下载\n  hexo3.0使用的默认主题是landscape, 我们可以自行下载主题到theme目录下\n\n\t\t$ npm install <plugin-name> --save\n\t\t$ git clone <repository> themes/<theme-name>\n安装失败情况可参考切换国内镜像源:\n[nmp国内镜像](http://npm.taobao.org/)\n\n无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。\n```\nfancybox - 是否启用Fancybox图片灯箱效果\nduoshuo - 多说评论 shortname\ndisqus - Disqus评论 shortname\ngoogle_search - 默认使用Google搜索引擎\nbaidu_search - 若想使用百度搜索，将其设定为true\nswiftype - Swiftype 站内搜索key\ntinysou - 微搜索 key\nself_search - 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。\ngoogle_analytics - Google Analytics 跟踪ID\nbaidu_analytics - 百度统计 跟踪ID\nshareto - 是否使用分享按鈕\nbusuanzi - 是否使用不蒜子页面访问计数\nmenu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。\nwidgets - 选择和排列希望使用的侧边栏小工具。\nlinks - 友情链接，请依照格式填写。\nStatic files - 静态文件存储路径，方便设置CDN缓存。\nTheme version - 主题版本，便于静态文件更新后刷新CDN缓存。\n```\n* 可以在这里参考各种\t[美到爆的主题](https://www.zhihu.com/question/24422335)\n\n### 5.   发布到github上\n配置根目录 _config.yml\n```\n\tdeploy:type: git   \n    repository: https://your_github_url.git    \n    branch: master\n```\n\n相关属性设置注释:\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\t这下面的几项配置都很简单，你看我的博客就知道分别是什么意思\ntitle: 常兴E站\t#博客名\nsubtitle: Goals determine what you are going to be\t#副标题\ndescription: Goals determine what you are going to be #用于搜索，没有直观表现\nauthor: changxing\t#作者\nlanguage: zh-CN\t#语言\ntimezone: \t#时区，此处不填写，hexo会以你目前电脑的时区为默认值\n\n# URL\t暂不配置，使用默认值\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\t\t暂不配置，使用默认值\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\t文章布局等，使用默认值\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\t暂不配置，使用默认值\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\t时间格式，使用默认值\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\t\n## Set per_page to 0 to disable pagination\nper_page: 10\t#每页显示的文章数，0表示不分页\npagination_dir: page\n\n# Extensions\t插件配置，暂时不配置\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\nplugins:\n- hexo-generator-feed\ntheme: light\t#使用的主题\n\nfeed:\t#之后配置rss会用，此处先不配置这个\n  type: atom\n  path: atom.xml\n  limit: 20  \n\n# Deployment\t用于部署到github，之前已经配置过\n## Docs: http://hexo.io/docs/deployment.html\n\ndeploy: \n  type: git\n  repository: https://your.git\n  branch: master\n```\n\n执行命令上传到云端github上\n> hexo deploy\n\n\n----------\n### 介绍几个hexo常用的命令,#后面为注释。\n```\n$ hexo g #完整命令为hexo generate,用于生成静态文件\n$ hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览\n$ hexo d #完整命令为hexo deploy,用于将本地文件发布到github上\n$ hexo n #完整命令为hexo new,用于新建一篇文章\n```\n\n## 发表一篇文章\n\n### 1. ```$ hexo new \"my new post\"```\n\n### 2. 编辑 my-new-post.md\n\n```\n\ttitle: my new post #可以改成中文的，如“新文章”\n\tdate: 2015-04-08 22:56:29 #发表日期，一般不改动\n\tcategories: blog #文章文类\n\ttags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n\t---\n\t#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上<!--more-->，在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n```\n\n### 3.$ hexo g 生成静态文件\n### 4.$ hexo d 同步到github\n\n\n----------\n## 后续\n[个人博客地址](http://cankingapp.github.io/)\n[新浪微博](http://weibo.com/canking666)\n\n**欢迎沟通学习**\n\n","source":"_posts/Hexo-blog.md","raw":"---\ntitle: Hexo-免费博客搭建使用讲解\ndate: 2016-03-18 15:40:40\ncategories: hexo \ntags: hexo\n---\n\n初识hexo就给人以眼前一亮的感觉, 查看资料到自己搭建个人博客, 简直是给人\"带你装B,带你F\"的快感,简单的博客生成操作, 多样化美观的主题选择, 功能强大的插件定制,关键是这些都是免费开源的,作为一个程序员,没有什么比遇到这种好使的软件更加给人已激动了.\n\n\n![casper](http://img.blog.csdn.net/20160318142830765)\n\n<!--more-->\n\n![美到爆,有木有](http://img.blog.csdn.net/20160318142902109) ![想拥有吗?继续学习把...](http://img.blog.csdn.net/20160318143205032)\n\n## 配置环境\n安装Node（必须）作用：用来生成静态页面的, win\\mac\\linux都有相关版本自行到官网下载。\n安装Git（必须）作用：作为一个21时间程序员,这个肯定大家都会用, 测试过程发现最好配置ssh, 体验会更好。\n\n## 开发及配置\n\n### 1. 安装hexo\n\n\t\t\t$ npm install -g hexo\n\t新版本需要安装git插件  $ npm install hexo-deployer-git --save\n\t\n### 2. 初始化项目\n新建一个你放hexo的新项目目录, cd到里面执行:\n\n\t\t\t$ hexo init\n\t\t\t$ npm install  #安装相关依赖\n\n### 3. Demo生成及预览\n\n\t\t$ hexo generate #生成静态页面\n\t\t$ hexo server #启动本地预览服务\n然后用浏览器访问http://localhost:4000/，此时，你应该看到了一个漂亮的博客了\n\n### 4. 主题选择及下载\n  hexo3.0使用的默认主题是landscape, 我们可以自行下载主题到theme目录下\n\n\t\t$ npm install <plugin-name> --save\n\t\t$ git clone <repository> themes/<theme-name>\n安装失败情况可参考切换国内镜像源:\n[nmp国内镜像](http://npm.taobao.org/)\n\n无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。\n```\nfancybox - 是否启用Fancybox图片灯箱效果\nduoshuo - 多说评论 shortname\ndisqus - Disqus评论 shortname\ngoogle_search - 默认使用Google搜索引擎\nbaidu_search - 若想使用百度搜索，将其设定为true\nswiftype - Swiftype 站内搜索key\ntinysou - 微搜索 key\nself_search - 基于jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。\ngoogle_analytics - Google Analytics 跟踪ID\nbaidu_analytics - 百度统计 跟踪ID\nshareto - 是否使用分享按鈕\nbusuanzi - 是否使用不蒜子页面访问计数\nmenu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。\nwidgets - 选择和排列希望使用的侧边栏小工具。\nlinks - 友情链接，请依照格式填写。\nStatic files - 静态文件存储路径，方便设置CDN缓存。\nTheme version - 主题版本，便于静态文件更新后刷新CDN缓存。\n```\n* 可以在这里参考各种\t[美到爆的主题](https://www.zhihu.com/question/24422335)\n\n### 5.   发布到github上\n配置根目录 _config.yml\n```\n\tdeploy:type: git   \n    repository: https://your_github_url.git    \n    branch: master\n```\n\n相关属性设置注释:\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\t这下面的几项配置都很简单，你看我的博客就知道分别是什么意思\ntitle: 常兴E站\t#博客名\nsubtitle: Goals determine what you are going to be\t#副标题\ndescription: Goals determine what you are going to be #用于搜索，没有直观表现\nauthor: changxing\t#作者\nlanguage: zh-CN\t#语言\ntimezone: \t#时区，此处不填写，hexo会以你目前电脑的时区为默认值\n\n# URL\t暂不配置，使用默认值\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\t\t暂不配置，使用默认值\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\t文章布局等，使用默认值\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\t暂不配置，使用默认值\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\t时间格式，使用默认值\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\t\n## Set per_page to 0 to disable pagination\nper_page: 10\t#每页显示的文章数，0表示不分页\npagination_dir: page\n\n# Extensions\t插件配置，暂时不配置\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\nplugins:\n- hexo-generator-feed\ntheme: light\t#使用的主题\n\nfeed:\t#之后配置rss会用，此处先不配置这个\n  type: atom\n  path: atom.xml\n  limit: 20  \n\n# Deployment\t用于部署到github，之前已经配置过\n## Docs: http://hexo.io/docs/deployment.html\n\ndeploy: \n  type: git\n  repository: https://your.git\n  branch: master\n```\n\n执行命令上传到云端github上\n> hexo deploy\n\n\n----------\n### 介绍几个hexo常用的命令,#后面为注释。\n```\n$ hexo g #完整命令为hexo generate,用于生成静态文件\n$ hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览\n$ hexo d #完整命令为hexo deploy,用于将本地文件发布到github上\n$ hexo n #完整命令为hexo new,用于新建一篇文章\n```\n\n## 发表一篇文章\n\n### 1. ```$ hexo new \"my new post\"```\n\n### 2. 编辑 my-new-post.md\n\n```\n\ttitle: my new post #可以改成中文的，如“新文章”\n\tdate: 2015-04-08 22:56:29 #发表日期，一般不改动\n\tcategories: blog #文章文类\n\ttags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n\t---\n\t#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上<!--more-->，在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n```\n\n### 3.$ hexo g 生成静态文件\n### 4.$ hexo d 同步到github\n\n\n----------\n## 后续\n[个人博客地址](http://cankingapp.github.io/)\n[新浪微博](http://weibo.com/canking666)\n\n**欢迎沟通学习**\n\n","slug":"Hexo-blog","published":1,"updated":"2016-11-08T04:31:55.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tll0001a475ztyjv13e","content":"<p>初识hexo就给人以眼前一亮的感觉, 查看资料到自己搭建个人博客, 简直是给人”带你装B,带你F”的快感,简单的博客生成操作, 多样化美观的主题选择, 功能强大的插件定制,关键是这些都是免费开源的,作为一个程序员,没有什么比遇到这种好使的软件更加给人已激动了.</p>\n<p><img src=\"http://img.blog.csdn.net/20160318142830765\" alt=\"casper\"></p>\n<a id=\"more\"></a>\n<p><img src=\"http://img.blog.csdn.net/20160318142902109\" alt=\"美到爆,有木有\"> <img src=\"http://img.blog.csdn.net/20160318143205032\" alt=\"想拥有吗?继续学习把...\"></p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><p>安装Node（必须）作用：用来生成静态页面的, win\\mac\\linux都有相关版本自行到官网下载。<br>安装Git（必须）作用：作为一个21时间程序员,这个肯定大家都会用, 测试过程发现最好配置ssh, 体验会更好。</p>\n<h2 id=\"开发及配置\"><a href=\"#开发及配置\" class=\"headerlink\" title=\"开发及配置\"></a>开发及配置</h2><h3 id=\"1-安装hexo\"><a href=\"#1-安装hexo\" class=\"headerlink\" title=\"1. 安装hexo\"></a>1. 安装hexo</h3><pre><code>        $ npm install -g hexo\n新版本需要安装git插件  $ npm install hexo-deployer-git --save\n</code></pre><h3 id=\"2-初始化项目\"><a href=\"#2-初始化项目\" class=\"headerlink\" title=\"2. 初始化项目\"></a>2. 初始化项目</h3><p>新建一个你放hexo的新项目目录, cd到里面执行:</p>\n<pre><code>$ hexo init\n$ npm install  #安装相关依赖\n</code></pre><h3 id=\"3-Demo生成及预览\"><a href=\"#3-Demo生成及预览\" class=\"headerlink\" title=\"3. Demo生成及预览\"></a>3. Demo生成及预览</h3><pre><code>$ hexo generate #生成静态页面\n$ hexo server #启动本地预览服务\n</code></pre><p>然后用浏览器访问<a href=\"http://localhost:4000/，此时，你应该看到了一个漂亮的博客了\" target=\"_blank\" rel=\"external\">http://localhost:4000/，此时，你应该看到了一个漂亮的博客了</a></p>\n<h3 id=\"4-主题选择及下载\"><a href=\"#4-主题选择及下载\" class=\"headerlink\" title=\"4. 主题选择及下载\"></a>4. 主题选择及下载</h3><p>  hexo3.0使用的默认主题是landscape, 我们可以自行下载主题到theme目录下</p>\n<pre><code>$ npm install &lt;plugin-name&gt; --save\n$ git clone &lt;repository&gt; themes/&lt;theme-name&gt;\n</code></pre><p>安装失败情况可参考切换国内镜像源:<br><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">nmp国内镜像</a></p>\n<p>无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fancybox - 是否启用Fancybox图片灯箱效果</span><br><span class=\"line\">duoshuo - 多说评论 <span class=\"keyword\">shortname</span><br><span class=\"line\"></span><span class=\"keyword\">disqus </span>- <span class=\"keyword\">Disqus评论 </span><span class=\"keyword\">shortname</span><br><span class=\"line\"></span>google_search - 默认使用Google搜索引擎</span><br><span class=\"line\"><span class=\"keyword\">baidu_search </span>- 若想使用百度搜索，将其设定为true</span><br><span class=\"line\"><span class=\"keyword\">swiftype </span>- <span class=\"keyword\">Swiftype </span>站内搜索key</span><br><span class=\"line\">tinysou - 微搜索 key</span><br><span class=\"line\">self_search - 基于<span class=\"keyword\">jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。</span><br><span class=\"line\"></span>google_analytics - Google Analytics 跟踪ID</span><br><span class=\"line\"><span class=\"keyword\">baidu_analytics </span>- 百度统计 跟踪ID</span><br><span class=\"line\"><span class=\"keyword\">shareto </span>- 是否使用分享按鈕</span><br><span class=\"line\"><span class=\"keyword\">busuanzi </span>- 是否使用不蒜子页面访问计数</span><br><span class=\"line\">menu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。</span><br><span class=\"line\">widgets - 选择和排列希望使用的侧边栏小工具。</span><br><span class=\"line\">links - 友情链接，请依照格式填写。</span><br><span class=\"line\">Static files - 静态文件存储路径，方便设置CDN缓存。</span><br><span class=\"line\">Theme version - 主题版本，便于静态文件更新后刷新CDN缓存。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>可以在这里参考各种    <a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">美到爆的主题</a></li>\n</ul>\n<h3 id=\"5-发布到github上\"><a href=\"#5-发布到github上\" class=\"headerlink\" title=\"5.   发布到github上\"></a>5.   发布到github上</h3><p>配置根目录 _config.yml<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:<span class=\"attribute\">type</span>: git   </span><br><span class=\"line\">   <span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//your_github_url.git    </span></span><br><span class=\"line\">   <span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure></p>\n<p>相关属性设置注释:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site\t这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> 常兴E站\t<span class=\"comment\">#博客名</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> Goals determine what you are going to be\t<span class=\"comment\">#副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> Goals determine what you are going to be <span class=\"comment\">#用于搜索，没有直观表现</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> changxing\t<span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> zh-CN\t<span class=\"comment\">#语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> \t<span class=\"comment\">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com</span><br><span class=\"line\"><span class=\"attr\">root:</span> /</span><br><span class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Directory\t\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> source</span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> public</span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> tags</span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> archives</span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> categories</span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing\t文章布局等，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> post</span><br><span class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  tab_replace:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</span><br><span class=\"line\"><span class=\"attr\">category_map:</span></span><br><span class=\"line\"><span class=\"attr\">tag_map:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format\t时间格式，使用默认值</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</span><br><span class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination\t</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span>\t<span class=\"comment\">#每页显示的文章数，0表示不分页</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions\t插件配置，暂时不配置</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> hexo-generator-feed</span><br><span class=\"line\"><span class=\"attr\">theme:</span> light\t<span class=\"comment\">#使用的主题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feed:</span>\t<span class=\"comment\">#之后配置rss会用，此处先不配置这个</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> atom</span><br><span class=\"line\"><span class=\"attr\">  path:</span> atom.xml</span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment\t用于部署到github，之前已经配置过</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">  type:</span> git</span><br><span class=\"line\"><span class=\"attr\">  repository:</span> https://your.git</span><br><span class=\"line\"><span class=\"attr\">  branch:</span> master</span><br></pre></td></tr></table></figure></p>\n<p>执行命令上传到云端github上</p>\n<blockquote>\n<p>hexo deploy</p>\n</blockquote>\n<hr>\n<h3 id=\"介绍几个hexo常用的命令-后面为注释。\"><a href=\"#介绍几个hexo常用的命令-后面为注释。\" class=\"headerlink\" title=\"介绍几个hexo常用的命令,#后面为注释。\"></a>介绍几个hexo常用的命令,#后面为注释。</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g <span class=\"comment\">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s <span class=\"comment\">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo d <span class=\"comment\">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo n <span class=\"comment\">#完整命令为hexo new,用于新建一篇文章</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"发表一篇文章\"><a href=\"#发表一篇文章\" class=\"headerlink\" title=\"发表一篇文章\"></a>发表一篇文章</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1. \"></a>1. <figure class=\"highlight plain\"><figcaption><span>hexo new \"my new post\"```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 2. 编辑 my-new-post.md</span><br></pre></td></tr></table></figure></h3><pre><code>title: my new post #可以改成中文的，如“新文章”\ndate: 2015-04-08 22:56:29 #发表日期，一般不改动\ncategories: blog #文章文类\ntags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n---\n#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n</code></pre><p>```</p>\n<h3 id=\"3-hexo-g-生成静态文件\"><a href=\"#3-hexo-g-生成静态文件\" class=\"headerlink\" title=\"3.$ hexo g 生成静态文件\"></a>3.$ hexo g 生成静态文件</h3><h3 id=\"4-hexo-d-同步到github\"><a href=\"#4-hexo-d-同步到github\" class=\"headerlink\" title=\"4.$ hexo d 同步到github\"></a>4.$ hexo d 同步到github</h3><hr>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p><a href=\"http://cankingapp.github.io/\">个人博客地址</a><br><a href=\"http://weibo.com/canking666\" target=\"_blank\" rel=\"external\">新浪微博</a></p>\n<p><strong>欢迎沟通学习</strong></p>\n","excerpt":"<p>初识hexo就给人以眼前一亮的感觉, 查看资料到自己搭建个人博客, 简直是给人”带你装B,带你F”的快感,简单的博客生成操作, 多样化美观的主题选择, 功能强大的插件定制,关键是这些都是免费开源的,作为一个程序员,没有什么比遇到这种好使的软件更加给人已激动了.</p>\n<p><img src=\"http://img.blog.csdn.net/20160318142830765\" alt=\"casper\"></p>","more":"<p><img src=\"http://img.blog.csdn.net/20160318142902109\" alt=\"美到爆,有木有\"> <img src=\"http://img.blog.csdn.net/20160318143205032\" alt=\"想拥有吗?继续学习把...\"></p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><p>安装Node（必须）作用：用来生成静态页面的, win\\mac\\linux都有相关版本自行到官网下载。<br>安装Git（必须）作用：作为一个21时间程序员,这个肯定大家都会用, 测试过程发现最好配置ssh, 体验会更好。</p>\n<h2 id=\"开发及配置\"><a href=\"#开发及配置\" class=\"headerlink\" title=\"开发及配置\"></a>开发及配置</h2><h3 id=\"1-安装hexo\"><a href=\"#1-安装hexo\" class=\"headerlink\" title=\"1. 安装hexo\"></a>1. 安装hexo</h3><pre><code>        $ npm install -g hexo\n新版本需要安装git插件  $ npm install hexo-deployer-git --save\n</code></pre><h3 id=\"2-初始化项目\"><a href=\"#2-初始化项目\" class=\"headerlink\" title=\"2. 初始化项目\"></a>2. 初始化项目</h3><p>新建一个你放hexo的新项目目录, cd到里面执行:</p>\n<pre><code>$ hexo init\n$ npm install  #安装相关依赖\n</code></pre><h3 id=\"3-Demo生成及预览\"><a href=\"#3-Demo生成及预览\" class=\"headerlink\" title=\"3. Demo生成及预览\"></a>3. Demo生成及预览</h3><pre><code>$ hexo generate #生成静态页面\n$ hexo server #启动本地预览服务\n</code></pre><p>然后用浏览器访问<a href=\"http://localhost:4000/，此时，你应该看到了一个漂亮的博客了\">http://localhost:4000/，此时，你应该看到了一个漂亮的博客了</a></p>\n<h3 id=\"4-主题选择及下载\"><a href=\"#4-主题选择及下载\" class=\"headerlink\" title=\"4. 主题选择及下载\"></a>4. 主题选择及下载</h3><p>  hexo3.0使用的默认主题是landscape, 我们可以自行下载主题到theme目录下</p>\n<pre><code>$ npm install &lt;plugin-name&gt; --save\n$ git clone &lt;repository&gt; themes/&lt;theme-name&gt;\n</code></pre><p>安装失败情况可参考切换国内镜像源:<br><a href=\"http://npm.taobao.org/\">nmp国内镜像</a></p>\n<p>无论是插件还是主题在安装后都需要在根目录下_config.yml中修改plugins和theme的值以启用他们。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fancybox - 是否启用Fancybox图片灯箱效果</span><br><span class=\"line\">duoshuo - 多说评论 <span class=\"keyword\">shortname</span><br><span class=\"line\"></span><span class=\"keyword\">disqus </span>- <span class=\"keyword\">Disqus评论 </span><span class=\"keyword\">shortname</span><br><span class=\"line\"></span>google_search - 默认使用Google搜索引擎</span><br><span class=\"line\"><span class=\"keyword\">baidu_search </span>- 若想使用百度搜索，将其设定为true</span><br><span class=\"line\"><span class=\"keyword\">swiftype </span>- <span class=\"keyword\">Swiftype </span>站内搜索key</span><br><span class=\"line\">tinysou - 微搜索 key</span><br><span class=\"line\">self_search - 基于<span class=\"keyword\">jQuery的本地搜索引擎，需要安装hexo-generator-search插件使用。</span><br><span class=\"line\"></span>google_analytics - Google Analytics 跟踪ID</span><br><span class=\"line\"><span class=\"keyword\">baidu_analytics </span>- 百度统计 跟踪ID</span><br><span class=\"line\"><span class=\"keyword\">shareto </span>- 是否使用分享按鈕</span><br><span class=\"line\"><span class=\"keyword\">busuanzi </span>- 是否使用不蒜子页面访问计数</span><br><span class=\"line\">menu - 自定义页面及菜单，依照已有格式填写。填写后请在source目录下建立相应名称的文件夹，并包含index.md文件，以正确显示页面。导航菜单中集成了FontAwesome图标字体，可以在这里选择新的图标，并按照相关说明使用。</span><br><span class=\"line\">widgets - 选择和排列希望使用的侧边栏小工具。</span><br><span class=\"line\">links - 友情链接，请依照格式填写。</span><br><span class=\"line\">Static files - 静态文件存储路径，方便设置CDN缓存。</span><br><span class=\"line\">Theme version - 主题版本，便于静态文件更新后刷新CDN缓存。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>可以在这里参考各种    <a href=\"https://www.zhihu.com/question/24422335\">美到爆的主题</a></li>\n</ul>\n<h3 id=\"5-发布到github上\"><a href=\"#5-发布到github上\" class=\"headerlink\" title=\"5.   发布到github上\"></a>5.   发布到github上</h3><p>配置根目录 _config.yml<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:<span class=\"attribute\">type</span>: git   </span><br><span class=\"line\">   <span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//your_github_url.git    </span></span><br><span class=\"line\">   <span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure></p>\n<p>相关属性设置注释:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Site\t这下面的几项配置都很简单，你看我的博客就知道分别是什么意思</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> 常兴E站\t<span class=\"comment\">#博客名</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> Goals determine what you are going to be\t<span class=\"comment\">#副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> Goals determine what you are going to be <span class=\"comment\">#用于搜索，没有直观表现</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> changxing\t<span class=\"comment\">#作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> zh-CN\t<span class=\"comment\">#语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> \t<span class=\"comment\">#时区，此处不填写，hexo会以你目前电脑的时区为默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com</span><br><span class=\"line\"><span class=\"attr\">root:</span> /</span><br><span class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Directory\t\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">source_dir:</span> source</span><br><span class=\"line\"><span class=\"attr\">public_dir:</span> public</span><br><span class=\"line\"><span class=\"attr\">tag_dir:</span> tags</span><br><span class=\"line\"><span class=\"attr\">archive_dir:</span> archives</span><br><span class=\"line\"><span class=\"attr\">category_dir:</span> categories</span><br><span class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</span><br><span class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</span><br><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Writing\t文章布局等，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></span><br><span class=\"line\"><span class=\"attr\">default_layout:</span> post</span><br><span class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></span><br><span class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></span><br><span class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  tab_replace:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Category &amp; Tag\t暂不配置，使用默认值</span></span><br><span class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</span><br><span class=\"line\"><span class=\"attr\">category_map:</span></span><br><span class=\"line\"><span class=\"attr\">tag_map:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Date / Time format\t时间格式，使用默认值</span></span><br><span class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></span><br><span class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></span><br><span class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</span><br><span class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Pagination\t</span></span><br><span class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></span><br><span class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span>\t<span class=\"comment\">#每页显示的文章数，0表示不分页</span></span><br><span class=\"line\"><span class=\"attr\">pagination_dir:</span> page</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extensions\t插件配置，暂时不配置</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> hexo-generator-feed</span><br><span class=\"line\"><span class=\"attr\">theme:</span> light\t<span class=\"comment\">#使用的主题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feed:</span>\t<span class=\"comment\">#之后配置rss会用，此处先不配置这个</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> atom</span><br><span class=\"line\"><span class=\"attr\">  path:</span> atom.xml</span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Deployment\t用于部署到github，之前已经配置过</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">  type:</span> git</span><br><span class=\"line\"><span class=\"attr\">  repository:</span> https://your.git</span><br><span class=\"line\"><span class=\"attr\">  branch:</span> master</span><br></pre></td></tr></table></figure></p>\n<p>执行命令上传到云端github上</p>\n<blockquote>\n<p>hexo deploy</p>\n</blockquote>\n<hr>\n<h3 id=\"介绍几个hexo常用的命令-后面为注释。\"><a href=\"#介绍几个hexo常用的命令-后面为注释。\" class=\"headerlink\" title=\"介绍几个hexo常用的命令,#后面为注释。\"></a>介绍几个hexo常用的命令,#后面为注释。</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g <span class=\"comment\">#完整命令为hexo generate,用于生成静态文件</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s <span class=\"comment\">#完整命令为hexo server,用于启动服务器，主要用来本地预览</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo d <span class=\"comment\">#完整命令为hexo deploy,用于将本地文件发布到github上</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo n <span class=\"comment\">#完整命令为hexo new,用于新建一篇文章</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"发表一篇文章\"><a href=\"#发表一篇文章\" class=\"headerlink\" title=\"发表一篇文章\"></a>发表一篇文章</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1. \"></a>1. <figure class=\"highlight plain\"><figcaption><span>hexo new \"my new post\"```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 2. 编辑 my-new-post.md</span><br></pre></td></tr></table></figure></h3><pre><code>title: my new post #可以改成中文的，如“新文章”\ndate: 2015-04-08 22:56:29 #发表日期，一般不改动\ncategories: blog #文章文类\ntags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog\n---\n#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。\n</code></pre><p>```</p>\n<h3 id=\"3-hexo-g-生成静态文件\"><a href=\"#3-hexo-g-生成静态文件\" class=\"headerlink\" title=\"3.$ hexo g 生成静态文件\"></a>3.$ hexo g 生成静态文件</h3><h3 id=\"4-hexo-d-同步到github\"><a href=\"#4-hexo-d-同步到github\" class=\"headerlink\" title=\"4.$ hexo d 同步到github\"></a>4.$ hexo d 同步到github</h3><hr>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p><a href=\"http://cankingapp.github.io/\">个人博客地址</a><br><a href=\"http://weibo.com/canking666\">新浪微博</a></p>\n<p><strong>欢迎沟通学习</strong></p>"},{"title":"辅助功能 之 小米手机悬浮窗权限","date":"2016-06-02T08:19:59.000Z","_content":"\n最近做项目遇到小米手机比较人(zhuang)性(bi)化的悬浮窗权限，当在小米手机上安装完应用后默认是关闭这个权限的，需要用户手动到应用详情页打开该权限。\n\n重(keng)要(die)的是使用这个权限开关系统window后， 小米手机不给任何提示就是不给弹窗。一开始以为是自己代码逻辑写错了，半天才反应过来，小米还有个这个权限，当天6.0以上安卓系统也需要这个权限，但是会有log提示的。\n\n这么麻烦的操作怎么可能让用户自己去找应用详情然后开启操作呢？本文将实现一键开启小米悬浮窗权限！\n\n<!--more-->\n\n## 分析问题\n想要实现自动调整到改应用的详情页的权限管理页面，就要知道权限管理页的类名及包名，我们又没有小米rom的源码，怎么才能知道指定页面的相关信息呢？\n\n\n### 查看权限页面类名\n\n这个方法应该有很多中，但是我只验证了一种：想到了 `adb shell dumpsys activity` \n\nusb链接电脑后，手动打开应用的详情页面里的权限管理页面:\n\n![](activity_info.png)\n\n`类名信息: com.miui.securitycenter/com.miui.permcenter.permissions.AppPermissionsEditorActivity`\n\n### 构造跳转Intent\n\n知道到了要跳转的activity,我们直接构造Intent 是否可以直接跳过去?\n\n答案肯定是不行的. Intent 需要构造参数,来区分指定app的权限管理页面:\n\n\n\n```\n   /**\n     * 经测试V5版本是有区别的\n     * @param context\n     */\n    public void openMiuiPermissionActivity(Context context) {\n        Intent intent = new Intent(\"miui.intent.action.APP_PERM_EDITOR\");\n\n        if (\"V5\".equals(getProperty())) {\n            PackageInfo pInfo = null;\n            try {\n                pInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n            } catch (PackageManager.NameNotFoundException e) {\n                Log.e(\"canking\", \"error\");\n            }\n            intent.setClassName(\"com.miui.securitycenter\", \"com.miui.securitycenter.permission.AppPermissionsEditor\");\n            intent.putExtra(\"extra_package_uid\", pInfo.applicationInfo.uid);\n        } else {\n            intent.setClassName(\"com.miui.securitycenter\", \"com.miui.permcenter.permissions.AppPermissionsEditorActivity\");\n            intent.putExtra(\"extra_pkgname\", context.getPackageName());\n        }\n\n        if (isActivityAvailable(context, intent)) {\n            if (context instanceof Activity) {\n                Activity a = (Activity) context;\n                a.startActivityForResult(intent, 2);\n            }\n        } else {\n            Log.e(\"canking\", \"Intent is not available!\");\n        }\n    }\n```\n\n### 测试适配rom\n\n经测试V5版本和后续版本是后区别的, 分别需要app ID和pkgname. 为了区分V5版本,我们需要得到小米rom的版本名:\n\n\n```\n    public static String getProperty() {\n        String property = \"null\";\n        if (!\"Xiaomi\".equals(Build.MANUFACTURER)) {\n            return property;\n        }\n        try {\n            Class<?> spClazz = Class.forName(\"android.os.SystemProperties\");\n            Method method = spClazz.getDeclaredMethod(\"get\", String.class, String.class);\n            property = (String) method.invoke(spClazz, \"ro.miui.ui.version.name\", null);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return property;\n    }\n```\n\n该反射方法来自网络,经验证是有效的.\n\n这样我们就跳转到了指定应用的权限管理页面.\n\n![](info.png)\n\n## 实现一键打开\n\n标题已经写了,我们的目标是用户一键开启,入口做到一键就能开启小米rom悬浮窗权限呢? 可以利用安卓辅助功能自动帮用户跳转, 自动点击打开权限,完成操作后返回.\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"act.mp4\" allowfullscreen></iframe>\n\n这里写了个BaseAccessibilityService 通用的操作方法封装在这里.\n\n\n```\n       /**\n\t * Created by changxing on 16-6-2.\n\t */\n\tpublic class BaseAccessService extends AccessibilityService {\n\n\t    @Override\n\t    protected void onServiceConnected() {\n\t\tsuper.onServiceConnected();\n\t    }\n\n\t    @Override\n\t    public void onInterrupt() {\n\n\t    }\n\n\t    @Override\n\t    public void onAccessibilityEvent(AccessibilityEvent event) {\n\n\t    }\n\n\t    protected boolean clickByText(AccessibilityNodeInfo nodeInfo, String str) {\n\t\tif (null != nodeInfo) {\n\t\t    List<AccessibilityNodeInfo> list = nodeInfo.findAccessibilityNodeInfosByText(str);\n\t\t    if (null != list && list.size() > 0) {\n\t\t        AccessibilityNodeInfo node = list.get(list.size() - 1);\n\t\t        if (node.isClickable()) {\n\t\t            return node.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n\t\t        } else {\n\t\t            AccessibilityNodeInfo parentNode = node;\n\t\t            for (int i = 0; i < 5; i++) {\n\t\t                if (null != parentNode) {\n\t\t                    parentNode = parentNode.getParent();\n\t\t                    if (null != parentNode && parentNode.isClickable()) {\n\t\t                        return parentNode.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t}\n\t\treturn false;\n\t    }\n\n\t    protected AccessibilityNodeInfo findOpenButton(AccessibilityNodeInfo node) {\n\t\tif (node == null)\n\t\t    return null;\n\n\t\t//非layout元素\n\t\tif (node.getChildCount() == 0) {\n\t\t    if (\"android.widget.Button\".equals(node.getClassName())) {\n\t\t        return node;\n\t\t    } else\n\t\t        return null;\n\t\t}\n\n\t\t//layout元素，遍历找button\n\t\tfor (int i = 0; i < node.getChildCount(); i++) {\n\t\t    AccessibilityNodeInfo button = findOpenButton(node.getChild(i));\n\t\t    if (button != null)\n\t\t        return button;\n\t\t}\n\t\treturn null;\n\t    }\n\t}\n```\n\n\n继承这个class ,重写onAccessibilityEvent ,在该方法内处理具体逻辑:\n\n\n到这里只监听TYPE_WINDOW_STATE_CHANGED类型就行了.通过控件的TEXT来实现找到需要点击的控件.\n这里可以Dump View hierarchy工具来查看我们想要的控件具体信息.\n\n![Dump View hierarchy](dump.png)\n\n\n```\n\t @Override\n\t    public void onAccessibilityEvent(AccessibilityEvent event) {\n\t\tint eventType = event.getEventType();\n\t\tXLogger.v(\"eventType:\" + eventType);\n\n\t\tswitch (eventType) {\n\t\t    case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:\n\t\t        String clazzName = event.getClassName().toString();\n\t\t        AccessibilityNodeInfo nodeInfo = event.getSource();\n\t\t        XLogger.i( \"悬浮窗：\" + clazzName);\n\t\t        if (clazzName.equals(\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\")) {\n\t\t            if (end) {\n\t\t                clickByText(nodeInfo, \"XiaomiPJ\");\n\t\t            } else {\n\t\t                boolean access = clickByText(nodeInfo, \"显示悬浮窗\");\n\t\t                XLogger.i(\"access\" + access);\n\t\t            }\n\t\t        }\n\t\t        if (clazzName.equals(\"miui.app.AlertDialog\")) {\n\t\t            end = clickByText(nodeInfo, \"允许\");\n\t\t            XLogger.i( \"getClick:\" + end);\n\t\t        }\n\t\t}\n\t    }\n```\n\n\n*到这里就可以实现一键开启小米rom悬浮窗权限了* \n\n但是一键开启前我们需要判断,该权限是否已经开启:\n\n```\n\t   /**\n\t     * 判断MIUI的悬浮窗权限\n\t     * @param context\n\t     * @return\n\t     */\n\t    @TargetApi(Build.VERSION_CODES.KITKAT)\n\t    public static boolean isMiuiFloatWindowOpAllowed(Context context) {\n\t\tfinal int version = Build.VERSION.SDK_INT;\n\t\tif (version >= 19) {\n\t\t    return checkOp(context, 24);  // AppOpsManager.OP_SYSTEM_ALERT_WINDOW\n\t\t} else {\n\t\t    if ((context.getApplicationInfo().flags & 1 << 27) == 1 << 27) {\n\t\t        return true;\n\t\t    } else {\n\t\t        return false;\n\t\t    }\n\t\t}\n\t    }\n\n\t    @TargetApi(Build.VERSION_CODES.KITKAT)\n\t    public static boolean checkOp(Context context, int op) {\n\t\tfinal int version = Build.VERSION.SDK_INT;\n\n\t\tif (version >= 19) {\n\t\t    AppOpsManager manager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n\t\t    try {\n\n\t\t        Class<?> spClazz = Class.forName(manager.getClass().getName());\n\t\t        Method method = manager.getClass().getDeclaredMethod(\"checkOp\", int.class, int.class, String.class);\n\t\t        int property = (Integer) method.invoke(manager, op,\n\t\t                Binder.getCallingUid(), context.getPackageName());\n\t\t        XLogger.e(AppOpsManager.MODE_ALLOWED + \" invoke \" + property);\n\n\t\t        if (AppOpsManager.MODE_ALLOWED == property) { \n\t\t            return true;\n\t\t        } else {\n\t\t            return false;\n\t\t        }\n\t\t    } catch (Exception e) {\n\t\t        XLogger.e(e.getMessage());\n\t\t    }\n\t\t} else {\n\t\t    XLogger.e(\"Below API 19 cannot invoke!\");\n\t\t}\n\t\treturn false;\n\t    }\n```\n\n`api>=19需要用反射来活取系统相关配置信息,应该也适用于魅族手机,为验证. `\n\n这里我们就实现了一键开启小米Rom悬浮窗权限,并且实现了判断是否已经开启了该权限状态.\n本Demo相关源码地址: [https://github.com/CankingApp/XiaomiPJ](https://github.com/CankingApp/XiaomiPJ)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/access-float.md","raw":"---\ntitle: 辅助功能 之 小米手机悬浮窗权限\ndate: 2016-06-02 16:19:59\ncategories: android \ntags: float permission\n---\n\n最近做项目遇到小米手机比较人(zhuang)性(bi)化的悬浮窗权限，当在小米手机上安装完应用后默认是关闭这个权限的，需要用户手动到应用详情页打开该权限。\n\n重(keng)要(die)的是使用这个权限开关系统window后， 小米手机不给任何提示就是不给弹窗。一开始以为是自己代码逻辑写错了，半天才反应过来，小米还有个这个权限，当天6.0以上安卓系统也需要这个权限，但是会有log提示的。\n\n这么麻烦的操作怎么可能让用户自己去找应用详情然后开启操作呢？本文将实现一键开启小米悬浮窗权限！\n\n<!--more-->\n\n## 分析问题\n想要实现自动调整到改应用的详情页的权限管理页面，就要知道权限管理页的类名及包名，我们又没有小米rom的源码，怎么才能知道指定页面的相关信息呢？\n\n\n### 查看权限页面类名\n\n这个方法应该有很多中，但是我只验证了一种：想到了 `adb shell dumpsys activity` \n\nusb链接电脑后，手动打开应用的详情页面里的权限管理页面:\n\n![](activity_info.png)\n\n`类名信息: com.miui.securitycenter/com.miui.permcenter.permissions.AppPermissionsEditorActivity`\n\n### 构造跳转Intent\n\n知道到了要跳转的activity,我们直接构造Intent 是否可以直接跳过去?\n\n答案肯定是不行的. Intent 需要构造参数,来区分指定app的权限管理页面:\n\n\n\n```\n   /**\n     * 经测试V5版本是有区别的\n     * @param context\n     */\n    public void openMiuiPermissionActivity(Context context) {\n        Intent intent = new Intent(\"miui.intent.action.APP_PERM_EDITOR\");\n\n        if (\"V5\".equals(getProperty())) {\n            PackageInfo pInfo = null;\n            try {\n                pInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n            } catch (PackageManager.NameNotFoundException e) {\n                Log.e(\"canking\", \"error\");\n            }\n            intent.setClassName(\"com.miui.securitycenter\", \"com.miui.securitycenter.permission.AppPermissionsEditor\");\n            intent.putExtra(\"extra_package_uid\", pInfo.applicationInfo.uid);\n        } else {\n            intent.setClassName(\"com.miui.securitycenter\", \"com.miui.permcenter.permissions.AppPermissionsEditorActivity\");\n            intent.putExtra(\"extra_pkgname\", context.getPackageName());\n        }\n\n        if (isActivityAvailable(context, intent)) {\n            if (context instanceof Activity) {\n                Activity a = (Activity) context;\n                a.startActivityForResult(intent, 2);\n            }\n        } else {\n            Log.e(\"canking\", \"Intent is not available!\");\n        }\n    }\n```\n\n### 测试适配rom\n\n经测试V5版本和后续版本是后区别的, 分别需要app ID和pkgname. 为了区分V5版本,我们需要得到小米rom的版本名:\n\n\n```\n    public static String getProperty() {\n        String property = \"null\";\n        if (!\"Xiaomi\".equals(Build.MANUFACTURER)) {\n            return property;\n        }\n        try {\n            Class<?> spClazz = Class.forName(\"android.os.SystemProperties\");\n            Method method = spClazz.getDeclaredMethod(\"get\", String.class, String.class);\n            property = (String) method.invoke(spClazz, \"ro.miui.ui.version.name\", null);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return property;\n    }\n```\n\n该反射方法来自网络,经验证是有效的.\n\n这样我们就跳转到了指定应用的权限管理页面.\n\n![](info.png)\n\n## 实现一键打开\n\n标题已经写了,我们的目标是用户一键开启,入口做到一键就能开启小米rom悬浮窗权限呢? 可以利用安卓辅助功能自动帮用户跳转, 自动点击打开权限,完成操作后返回.\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"act.mp4\" allowfullscreen></iframe>\n\n这里写了个BaseAccessibilityService 通用的操作方法封装在这里.\n\n\n```\n       /**\n\t * Created by changxing on 16-6-2.\n\t */\n\tpublic class BaseAccessService extends AccessibilityService {\n\n\t    @Override\n\t    protected void onServiceConnected() {\n\t\tsuper.onServiceConnected();\n\t    }\n\n\t    @Override\n\t    public void onInterrupt() {\n\n\t    }\n\n\t    @Override\n\t    public void onAccessibilityEvent(AccessibilityEvent event) {\n\n\t    }\n\n\t    protected boolean clickByText(AccessibilityNodeInfo nodeInfo, String str) {\n\t\tif (null != nodeInfo) {\n\t\t    List<AccessibilityNodeInfo> list = nodeInfo.findAccessibilityNodeInfosByText(str);\n\t\t    if (null != list && list.size() > 0) {\n\t\t        AccessibilityNodeInfo node = list.get(list.size() - 1);\n\t\t        if (node.isClickable()) {\n\t\t            return node.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n\t\t        } else {\n\t\t            AccessibilityNodeInfo parentNode = node;\n\t\t            for (int i = 0; i < 5; i++) {\n\t\t                if (null != parentNode) {\n\t\t                    parentNode = parentNode.getParent();\n\t\t                    if (null != parentNode && parentNode.isClickable()) {\n\t\t                        return parentNode.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t}\n\t\treturn false;\n\t    }\n\n\t    protected AccessibilityNodeInfo findOpenButton(AccessibilityNodeInfo node) {\n\t\tif (node == null)\n\t\t    return null;\n\n\t\t//非layout元素\n\t\tif (node.getChildCount() == 0) {\n\t\t    if (\"android.widget.Button\".equals(node.getClassName())) {\n\t\t        return node;\n\t\t    } else\n\t\t        return null;\n\t\t}\n\n\t\t//layout元素，遍历找button\n\t\tfor (int i = 0; i < node.getChildCount(); i++) {\n\t\t    AccessibilityNodeInfo button = findOpenButton(node.getChild(i));\n\t\t    if (button != null)\n\t\t        return button;\n\t\t}\n\t\treturn null;\n\t    }\n\t}\n```\n\n\n继承这个class ,重写onAccessibilityEvent ,在该方法内处理具体逻辑:\n\n\n到这里只监听TYPE_WINDOW_STATE_CHANGED类型就行了.通过控件的TEXT来实现找到需要点击的控件.\n这里可以Dump View hierarchy工具来查看我们想要的控件具体信息.\n\n![Dump View hierarchy](dump.png)\n\n\n```\n\t @Override\n\t    public void onAccessibilityEvent(AccessibilityEvent event) {\n\t\tint eventType = event.getEventType();\n\t\tXLogger.v(\"eventType:\" + eventType);\n\n\t\tswitch (eventType) {\n\t\t    case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:\n\t\t        String clazzName = event.getClassName().toString();\n\t\t        AccessibilityNodeInfo nodeInfo = event.getSource();\n\t\t        XLogger.i( \"悬浮窗：\" + clazzName);\n\t\t        if (clazzName.equals(\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\")) {\n\t\t            if (end) {\n\t\t                clickByText(nodeInfo, \"XiaomiPJ\");\n\t\t            } else {\n\t\t                boolean access = clickByText(nodeInfo, \"显示悬浮窗\");\n\t\t                XLogger.i(\"access\" + access);\n\t\t            }\n\t\t        }\n\t\t        if (clazzName.equals(\"miui.app.AlertDialog\")) {\n\t\t            end = clickByText(nodeInfo, \"允许\");\n\t\t            XLogger.i( \"getClick:\" + end);\n\t\t        }\n\t\t}\n\t    }\n```\n\n\n*到这里就可以实现一键开启小米rom悬浮窗权限了* \n\n但是一键开启前我们需要判断,该权限是否已经开启:\n\n```\n\t   /**\n\t     * 判断MIUI的悬浮窗权限\n\t     * @param context\n\t     * @return\n\t     */\n\t    @TargetApi(Build.VERSION_CODES.KITKAT)\n\t    public static boolean isMiuiFloatWindowOpAllowed(Context context) {\n\t\tfinal int version = Build.VERSION.SDK_INT;\n\t\tif (version >= 19) {\n\t\t    return checkOp(context, 24);  // AppOpsManager.OP_SYSTEM_ALERT_WINDOW\n\t\t} else {\n\t\t    if ((context.getApplicationInfo().flags & 1 << 27) == 1 << 27) {\n\t\t        return true;\n\t\t    } else {\n\t\t        return false;\n\t\t    }\n\t\t}\n\t    }\n\n\t    @TargetApi(Build.VERSION_CODES.KITKAT)\n\t    public static boolean checkOp(Context context, int op) {\n\t\tfinal int version = Build.VERSION.SDK_INT;\n\n\t\tif (version >= 19) {\n\t\t    AppOpsManager manager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n\t\t    try {\n\n\t\t        Class<?> spClazz = Class.forName(manager.getClass().getName());\n\t\t        Method method = manager.getClass().getDeclaredMethod(\"checkOp\", int.class, int.class, String.class);\n\t\t        int property = (Integer) method.invoke(manager, op,\n\t\t                Binder.getCallingUid(), context.getPackageName());\n\t\t        XLogger.e(AppOpsManager.MODE_ALLOWED + \" invoke \" + property);\n\n\t\t        if (AppOpsManager.MODE_ALLOWED == property) { \n\t\t            return true;\n\t\t        } else {\n\t\t            return false;\n\t\t        }\n\t\t    } catch (Exception e) {\n\t\t        XLogger.e(e.getMessage());\n\t\t    }\n\t\t} else {\n\t\t    XLogger.e(\"Below API 19 cannot invoke!\");\n\t\t}\n\t\treturn false;\n\t    }\n```\n\n`api>=19需要用反射来活取系统相关配置信息,应该也适用于魅族手机,为验证. `\n\n这里我们就实现了一键开启小米Rom悬浮窗权限,并且实现了判断是否已经开启了该权限状态.\n本Demo相关源码地址: [https://github.com/CankingApp/XiaomiPJ](https://github.com/CankingApp/XiaomiPJ)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"access-float","published":1,"updated":"2016-11-09T07:10:10.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlp0004a475kw0mxsil","content":"<p>最近做项目遇到小米手机比较人(zhuang)性(bi)化的悬浮窗权限，当在小米手机上安装完应用后默认是关闭这个权限的，需要用户手动到应用详情页打开该权限。</p>\n<p>重(keng)要(die)的是使用这个权限开关系统window后， 小米手机不给任何提示就是不给弹窗。一开始以为是自己代码逻辑写错了，半天才反应过来，小米还有个这个权限，当天6.0以上安卓系统也需要这个权限，但是会有log提示的。</p>\n<p>这么麻烦的操作怎么可能让用户自己去找应用详情然后开启操作呢？本文将实现一键开启小米悬浮窗权限！</p>\n<a id=\"more\"></a>\n<h2 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h2><p>想要实现自动调整到改应用的详情页的权限管理页面，就要知道权限管理页的类名及包名，我们又没有小米rom的源码，怎么才能知道指定页面的相关信息呢？</p>\n<h3 id=\"查看权限页面类名\"><a href=\"#查看权限页面类名\" class=\"headerlink\" title=\"查看权限页面类名\"></a>查看权限页面类名</h3><p>这个方法应该有很多中，但是我只验证了一种：想到了 <code>adb shell dumpsys activity</code> </p>\n<p>usb链接电脑后，手动打开应用的详情页面里的权限管理页面:</p>\n<p><img src=\"activity_info.png\" alt=\"\"></p>\n<p><code>类名信息: com.miui.securitycenter/com.miui.permcenter.permissions.AppPermissionsEditorActivity</code></p>\n<h3 id=\"构造跳转Intent\"><a href=\"#构造跳转Intent\" class=\"headerlink\" title=\"构造跳转Intent\"></a>构造跳转Intent</h3><p>知道到了要跳转的activity,我们直接构造Intent 是否可以直接跳过去?</p>\n<p>答案肯定是不行的. Intent 需要构造参数,来区分指定app的权限管理页面:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">  * 经测试V5版本是有区别的</span><br><span class=\"line\">  * @param context</span><br><span class=\"line\">  */</span></span><br><span class=\"line\"> public void openMiuiPermissionActivity(<span class=\"built_in\">Context</span> <span class=\"built_in\">context</span>) &#123;</span><br><span class=\"line\">     Intent intent = new Intent(<span class=\"string\">\"miui.intent.action.APP_PERM_EDITOR\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     if (<span class=\"string\">\"V5\"</span>.equals(getProperty())) &#123;</span><br><span class=\"line\">         PackageInfo pInfo = null<span class=\"comment\">;</span></span><br><span class=\"line\">         try &#123;</span><br><span class=\"line\">             pInfo = <span class=\"built_in\">context</span>.getPackageManager().getPackageInfo(<span class=\"built_in\">context</span>.getPackageName(), <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">             Log.e(<span class=\"string\">\"canking\"</span>, <span class=\"string\">\"error\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         intent.setClassName(<span class=\"string\">\"com.miui.securitycenter\"</span>, <span class=\"string\">\"com.miui.securitycenter.permission.AppPermissionsEditor\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         intent.putExtra(<span class=\"string\">\"extra_package_uid\"</span>, pInfo.applicationInfo.uid)<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         intent.setClassName(<span class=\"string\">\"com.miui.securitycenter\"</span>, <span class=\"string\">\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         intent.putExtra(<span class=\"string\">\"extra_pkgname\"</span>, <span class=\"built_in\">context</span>.getPackageName())<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     if (isActivityAvailable(<span class=\"built_in\">context</span>, intent)) &#123;</span><br><span class=\"line\">         if (<span class=\"built_in\">context</span> <span class=\"keyword\">instanceof </span>Activity) &#123;</span><br><span class=\"line\">             Activity a = (Activity) <span class=\"built_in\">context</span><span class=\"comment\">;</span></span><br><span class=\"line\">             a.startActivityForResult(intent, <span class=\"number\">2</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         Log.e(<span class=\"string\">\"canking\"</span>, <span class=\"string\">\"Intent is not available!\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试适配rom\"><a href=\"#测试适配rom\" class=\"headerlink\" title=\"测试适配rom\"></a>测试适配rom</h3><p>经测试V5版本和后续版本是后区别的, 分别需要app ID和pkgname. 为了区分V5版本,我们需要得到小米rom的版本名:</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"type\">String</span> getProperty() &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> property = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">\"Xiaomi\"</span>.equals(<span class=\"type\">Build</span>.<span class=\"type\">MANUFACTURER</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> property;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span>&lt;?&gt; spClazz = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"android.os.SystemProperties\"</span>);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"keyword\">method</span> = spClazz.getDeclaredMethod(<span class=\"string\">\"get\"</span>, <span class=\"type\">String</span>.class, <span class=\"type\">String</span>.class);</span><br><span class=\"line\">        property = (<span class=\"type\">String</span>) <span class=\"keyword\">method</span>.invoke(spClazz, <span class=\"string\">\"ro.miui.ui.version.name\"</span>, null);</span><br><span class=\"line\">    &#125; catch (<span class=\"type\">Exception</span> e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> property;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该反射方法来自网络,经验证是有效的.</p>\n<p>这样我们就跳转到了指定应用的权限管理页面.</p>\n<p><img src=\"info.png\" alt=\"\"></p>\n<h2 id=\"实现一键打开\"><a href=\"#实现一键打开\" class=\"headerlink\" title=\"实现一键打开\"></a>实现一键打开</h2><p>标题已经写了,我们的目标是用户一键开启,入口做到一键就能开启小米rom悬浮窗权限呢? 可以利用安卓辅助功能自动帮用户跳转, 自动点击打开权限,完成操作后返回.</p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"act.mp4\" allowfullscreen></iframe>\n\n<p>这里写了个BaseAccessibilityService 通用的操作方法封装在这里.</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">/**</span><br><span class=\"line\"> * Created by changxing on 16-6-2.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAccessService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AccessibilityService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onServiceConnected();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">clickByText</span><span class=\"params\">(AccessibilityNodeInfo nodeInfo, String str)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != nodeInfo) &#123;</span><br><span class=\"line\">\t    List&lt;AccessibilityNodeInfo&gt; list = nodeInfo.findAccessibilityNodeInfosByText(str);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t        AccessibilityNodeInfo node = list.get(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (node.isClickable()) &#123;</span><br><span class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">return</span> node.<span class=\"title\">performAction</span><span class=\"params\">(AccessibilityNodeInfo.ACTION_CLICK)</span></span>;</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            AccessibilityNodeInfo parentNode = node;</span><br><span class=\"line\">\t            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != parentNode) &#123;</span><br><span class=\"line\">\t                    parentNode = parentNode.getParent();</span><br><span class=\"line\">\t                    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != parentNode &amp;&amp; parentNode.isClickable()) &#123;</span><br><span class=\"line\">\t                        <span class=\"function\"><span class=\"keyword\">return</span> parentNode.<span class=\"title\">performAction</span><span class=\"params\">(AccessibilityNodeInfo.ACTION_CLICK)</span></span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\">AccessibilityNodeInfo <span class=\"title\">findOpenButton</span><span class=\"params\">(AccessibilityNodeInfo node)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//非layout元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node.getChildCount() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"string\">\"android.widget.Button\"</span>.equals(node.getClassName())) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//layout元素，遍历找button</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; node.getChildCount(); i++) &#123;</span><br><span class=\"line\">\t    AccessibilityNodeInfo button = findOpenButton(node.getChild(i));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (button != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> button;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承这个class ,重写onAccessibilityEvent ,在该方法内处理具体逻辑:</p>\n<p>到这里只监听TYPE_WINDOW_STATE_CHANGED类型就行了.通过控件的TEXT来实现找到需要点击的控件.<br>这里可以Dump View hierarchy工具来查看我们想要的控件具体信息.</p>\n<p><img src=\"dump.png\" alt=\"Dump View hierarchy\"></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void onAccessibilityEvent(AccessibilityEvent event) &#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eventType = event.getEventType()<span class=\"comment\">;</span></span><br><span class=\"line\">XLogger.v(<span class=\"string\">\"eventType:\"</span> + eventType)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (eventType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:</span><br><span class=\"line\">        String clazzName = event.getClassName().toString()<span class=\"comment\">;</span></span><br><span class=\"line\">        AccessibilityNodeInfo nodeInfo = event.getSource()<span class=\"comment\">;</span></span><br><span class=\"line\">        XLogger.i( <span class=\"string\">\"悬浮窗：\"</span> + clazzName)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazzName.equals(<span class=\"string\">\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">end</span>) &#123;</span><br><span class=\"line\">                clickByText(nodeInfo, <span class=\"string\">\"XiaomiPJ\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                boolean access = clickByText(nodeInfo, <span class=\"string\">\"显示悬浮窗\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">                XLogger.i(<span class=\"string\">\"access\"</span> + access)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazzName.equals(<span class=\"string\">\"miui.app.AlertDialog\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">end</span> = clickByText(nodeInfo, <span class=\"string\">\"允许\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            XLogger.i( <span class=\"string\">\"getClick:\"</span> + <span class=\"keyword\">end</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><em>到这里就可以实现一键开启小米rom悬浮窗权限了</em> </p>\n<p>但是一键开启前我们需要判断,该权限是否已经开启:</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span><br><span class=\"line\">    * 判断MIUI的悬浮窗权限</span><br><span class=\"line\">    * @param context</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> boolean isMiuiFloatWindowOpAllowed(Context context) &#123;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">version</span> = Build.VERSION.SDK_INT;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">version</span> &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> checkOp(context, <span class=\"number\">24</span>);  <span class=\"comment\">// AppOpsManager.OP_SYSTEM_ALERT_WINDOW</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((context.getApplicationInfo().flags &amp; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">27</span>) == <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> boolean checkOp(Context context, <span class=\"keyword\">int</span> op) &#123;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">version</span> = Build.VERSION.SDK_INT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">version</span> &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">    AppOpsManager manager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; spClazz = Class.forName(manager.getClass().getName());</span><br><span class=\"line\">        Method method = manager.getClass().getDeclaredMethod(<span class=\"string\">\"checkOp\"</span>, <span class=\"keyword\">int</span>.<span class=\"keyword\">class</span>, <span class=\"keyword\">int</span>.<span class=\"keyword\">class</span>, String.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> property = (Integer) method.invoke(manager, op,</span><br><span class=\"line\">                Binder.getCallingUid(), context.getPackageName());</span><br><span class=\"line\">        XLogger.e(AppOpsManager.MODE_ALLOWED + <span class=\"string\">\" invoke \"</span> + property);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AppOpsManager.MODE_ALLOWED == property) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        XLogger.e(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    XLogger.e(<span class=\"string\">\"Below API 19 cannot invoke!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><code>api&gt;=19需要用反射来活取系统相关配置信息,应该也适用于魅族手机,为验证.</code></p>\n<p>这里我们就实现了一键开启小米Rom悬浮窗权限,并且实现了判断是否已经开启了该权限状态.<br>本Demo相关源码地址: <a href=\"https://github.com/CankingApp/XiaomiPJ\" target=\"_blank\" rel=\"external\">https://github.com/CankingApp/XiaomiPJ</a></p>\n","excerpt":"<p>最近做项目遇到小米手机比较人(zhuang)性(bi)化的悬浮窗权限，当在小米手机上安装完应用后默认是关闭这个权限的，需要用户手动到应用详情页打开该权限。</p>\n<p>重(keng)要(die)的是使用这个权限开关系统window后， 小米手机不给任何提示就是不给弹窗。一开始以为是自己代码逻辑写错了，半天才反应过来，小米还有个这个权限，当天6.0以上安卓系统也需要这个权限，但是会有log提示的。</p>\n<p>这么麻烦的操作怎么可能让用户自己去找应用详情然后开启操作呢？本文将实现一键开启小米悬浮窗权限！</p>","more":"<h2 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h2><p>想要实现自动调整到改应用的详情页的权限管理页面，就要知道权限管理页的类名及包名，我们又没有小米rom的源码，怎么才能知道指定页面的相关信息呢？</p>\n<h3 id=\"查看权限页面类名\"><a href=\"#查看权限页面类名\" class=\"headerlink\" title=\"查看权限页面类名\"></a>查看权限页面类名</h3><p>这个方法应该有很多中，但是我只验证了一种：想到了 <code>adb shell dumpsys activity</code> </p>\n<p>usb链接电脑后，手动打开应用的详情页面里的权限管理页面:</p>\n<p><img src=\"activity_info.png\" alt=\"\"></p>\n<p><code>类名信息: com.miui.securitycenter/com.miui.permcenter.permissions.AppPermissionsEditorActivity</code></p>\n<h3 id=\"构造跳转Intent\"><a href=\"#构造跳转Intent\" class=\"headerlink\" title=\"构造跳转Intent\"></a>构造跳转Intent</h3><p>知道到了要跳转的activity,我们直接构造Intent 是否可以直接跳过去?</p>\n<p>答案肯定是不行的. Intent 需要构造参数,来区分指定app的权限管理页面:</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">  * 经测试V5版本是有区别的</span><br><span class=\"line\">  * @param context</span><br><span class=\"line\">  */</span></span><br><span class=\"line\"> public void openMiuiPermissionActivity(<span class=\"built_in\">Context</span> <span class=\"built_in\">context</span>) &#123;</span><br><span class=\"line\">     Intent intent = new Intent(<span class=\"string\">\"miui.intent.action.APP_PERM_EDITOR\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">     if (<span class=\"string\">\"V5\"</span>.equals(getProperty())) &#123;</span><br><span class=\"line\">         PackageInfo pInfo = null<span class=\"comment\">;</span></span><br><span class=\"line\">         try &#123;</span><br><span class=\"line\">             pInfo = <span class=\"built_in\">context</span>.getPackageManager().getPackageInfo(<span class=\"built_in\">context</span>.getPackageName(), <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class=\"line\">             Log.e(<span class=\"string\">\"canking\"</span>, <span class=\"string\">\"error\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         intent.setClassName(<span class=\"string\">\"com.miui.securitycenter\"</span>, <span class=\"string\">\"com.miui.securitycenter.permission.AppPermissionsEditor\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         intent.putExtra(<span class=\"string\">\"extra_package_uid\"</span>, pInfo.applicationInfo.uid)<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         intent.setClassName(<span class=\"string\">\"com.miui.securitycenter\"</span>, <span class=\"string\">\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         intent.putExtra(<span class=\"string\">\"extra_pkgname\"</span>, <span class=\"built_in\">context</span>.getPackageName())<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     if (isActivityAvailable(<span class=\"built_in\">context</span>, intent)) &#123;</span><br><span class=\"line\">         if (<span class=\"built_in\">context</span> <span class=\"keyword\">instanceof </span>Activity) &#123;</span><br><span class=\"line\">             Activity a = (Activity) <span class=\"built_in\">context</span><span class=\"comment\">;</span></span><br><span class=\"line\">             a.startActivityForResult(intent, <span class=\"number\">2</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         Log.e(<span class=\"string\">\"canking\"</span>, <span class=\"string\">\"Intent is not available!\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试适配rom\"><a href=\"#测试适配rom\" class=\"headerlink\" title=\"测试适配rom\"></a>测试适配rom</h3><p>经测试V5版本和后续版本是后区别的, 分别需要app ID和pkgname. 为了区分V5版本,我们需要得到小米rom的版本名:</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"type\">String</span> getProperty() &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> property = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"string\">\"Xiaomi\"</span>.equals(<span class=\"type\">Build</span>.<span class=\"type\">MANUFACTURER</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> property;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span>&lt;?&gt; spClazz = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"android.os.SystemProperties\"</span>);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"keyword\">method</span> = spClazz.getDeclaredMethod(<span class=\"string\">\"get\"</span>, <span class=\"type\">String</span>.class, <span class=\"type\">String</span>.class);</span><br><span class=\"line\">        property = (<span class=\"type\">String</span>) <span class=\"keyword\">method</span>.invoke(spClazz, <span class=\"string\">\"ro.miui.ui.version.name\"</span>, null);</span><br><span class=\"line\">    &#125; catch (<span class=\"type\">Exception</span> e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> property;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该反射方法来自网络,经验证是有效的.</p>\n<p>这样我们就跳转到了指定应用的权限管理页面.</p>\n<p><img src=\"info.png\" alt=\"\"></p>\n<h2 id=\"实现一键打开\"><a href=\"#实现一键打开\" class=\"headerlink\" title=\"实现一键打开\"></a>实现一键打开</h2><p>标题已经写了,我们的目标是用户一键开启,入口做到一键就能开启小米rom悬浮窗权限呢? 可以利用安卓辅助功能自动帮用户跳转, 自动点击打开权限,完成操作后返回.</p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"act.mp4\" allowfullscreen></iframe>\n\n<p>这里写了个BaseAccessibilityService 通用的操作方法封装在这里.</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">/**</span><br><span class=\"line\"> * Created by changxing on 16-6-2.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAccessService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AccessibilityService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onServiceConnected();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onInterrupt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAccessibilityEvent</span><span class=\"params\">(AccessibilityEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">clickByText</span><span class=\"params\">(AccessibilityNodeInfo nodeInfo, String str)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != nodeInfo) &#123;</span><br><span class=\"line\">\t    List&lt;AccessibilityNodeInfo&gt; list = nodeInfo.findAccessibilityNodeInfosByText(str);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t        AccessibilityNodeInfo node = list.get(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (node.isClickable()) &#123;</span><br><span class=\"line\">\t            <span class=\"function\"><span class=\"keyword\">return</span> node.<span class=\"title\">performAction</span><span class=\"params\">(AccessibilityNodeInfo.ACTION_CLICK)</span></span>;</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            AccessibilityNodeInfo parentNode = node;</span><br><span class=\"line\">\t            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != parentNode) &#123;</span><br><span class=\"line\">\t                    parentNode = parentNode.getParent();</span><br><span class=\"line\">\t                    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != parentNode &amp;&amp; parentNode.isClickable()) &#123;</span><br><span class=\"line\">\t                        <span class=\"function\"><span class=\"keyword\">return</span> parentNode.<span class=\"title\">performAction</span><span class=\"params\">(AccessibilityNodeInfo.ACTION_CLICK)</span></span>;</span><br><span class=\"line\">\t                    &#125;</span><br><span class=\"line\">\t                &#125;</span><br><span class=\"line\">\t            &#125;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\">AccessibilityNodeInfo <span class=\"title\">findOpenButton</span><span class=\"params\">(AccessibilityNodeInfo node)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//非layout元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node.getChildCount() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (<span class=\"string\">\"android.widget.Button\"</span>.equals(node.getClassName())) &#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//layout元素，遍历找button</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; node.getChildCount(); i++) &#123;</span><br><span class=\"line\">\t    AccessibilityNodeInfo button = findOpenButton(node.getChild(i));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (button != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> button;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承这个class ,重写onAccessibilityEvent ,在该方法内处理具体逻辑:</p>\n<p>到这里只监听TYPE_WINDOW_STATE_CHANGED类型就行了.通过控件的TEXT来实现找到需要点击的控件.<br>这里可以Dump View hierarchy工具来查看我们想要的控件具体信息.</p>\n<p><img src=\"dump.png\" alt=\"Dump View hierarchy\"></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void onAccessibilityEvent(AccessibilityEvent event) &#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eventType = event.getEventType()<span class=\"comment\">;</span></span><br><span class=\"line\">XLogger.v(<span class=\"string\">\"eventType:\"</span> + eventType)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (eventType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:</span><br><span class=\"line\">        String clazzName = event.getClassName().toString()<span class=\"comment\">;</span></span><br><span class=\"line\">        AccessibilityNodeInfo nodeInfo = event.getSource()<span class=\"comment\">;</span></span><br><span class=\"line\">        XLogger.i( <span class=\"string\">\"悬浮窗：\"</span> + clazzName)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazzName.equals(<span class=\"string\">\"com.miui.permcenter.permissions.AppPermissionsEditorActivity\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">end</span>) &#123;</span><br><span class=\"line\">                clickByText(nodeInfo, <span class=\"string\">\"XiaomiPJ\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                boolean access = clickByText(nodeInfo, <span class=\"string\">\"显示悬浮窗\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">                XLogger.i(<span class=\"string\">\"access\"</span> + access)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazzName.equals(<span class=\"string\">\"miui.app.AlertDialog\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">end</span> = clickByText(nodeInfo, <span class=\"string\">\"允许\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">            XLogger.i( <span class=\"string\">\"getClick:\"</span> + <span class=\"keyword\">end</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><em>到这里就可以实现一键开启小米rom悬浮窗权限了</em> </p>\n<p>但是一键开启前我们需要判断,该权限是否已经开启:</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span><br><span class=\"line\">    * 判断MIUI的悬浮窗权限</span><br><span class=\"line\">    * @param context</span><br><span class=\"line\">    * @return</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> boolean isMiuiFloatWindowOpAllowed(Context context) &#123;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">version</span> = Build.VERSION.SDK_INT;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">version</span> &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> checkOp(context, <span class=\"number\">24</span>);  <span class=\"comment\">// AppOpsManager.OP_SYSTEM_ALERT_WINDOW</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((context.getApplicationInfo().flags &amp; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">27</span>) == <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">27</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> boolean checkOp(Context context, <span class=\"keyword\">int</span> op) &#123;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"keyword\">version</span> = Build.VERSION.SDK_INT;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">version</span> &gt;= <span class=\"number\">19</span>) &#123;</span><br><span class=\"line\">    AppOpsManager manager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; spClazz = Class.forName(manager.getClass().getName());</span><br><span class=\"line\">        Method method = manager.getClass().getDeclaredMethod(<span class=\"string\">\"checkOp\"</span>, <span class=\"keyword\">int</span>.<span class=\"keyword\">class</span>, <span class=\"keyword\">int</span>.<span class=\"keyword\">class</span>, String.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> property = (Integer) method.invoke(manager, op,</span><br><span class=\"line\">                Binder.getCallingUid(), context.getPackageName());</span><br><span class=\"line\">        XLogger.e(AppOpsManager.MODE_ALLOWED + <span class=\"string\">\" invoke \"</span> + property);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AppOpsManager.MODE_ALLOWED == property) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        XLogger.e(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    XLogger.e(<span class=\"string\">\"Below API 19 cannot invoke!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><code>api&gt;=19需要用反射来活取系统相关配置信息,应该也适用于魅族手机,为验证.</code></p>\n<p>这里我们就实现了一键开启小米Rom悬浮窗权限,并且实现了判断是否已经开启了该权限状态.<br>本Demo相关源码地址: <a href=\"https://github.com/CankingApp/XiaomiPJ\">https://github.com/CankingApp/XiaomiPJ</a></p>"},{"title":"Android 6.0系统中权限问题调用 - Permission in Android M","date":"2016-03-18T12:11:28.000Z","_content":"\n\n\n安卓平台权限一直有被流氓应用随便利用诟病, android M的发布彻底解决了这一问题,取而代之的是，app不得不在运行时一个一个询问用户授予权限。 \n\nAndroid 6.0(api23)系统中,做了一些限制, 开发者在使用到每条权限时必须自己调用相关代码请求.\n<!--more-->\n\n如果没有获得某项权限,直接使用相关功能,则会导致自己程序crash.\n![见log][6]\n\n\n可见6.0以后的系统开发者必须对权限适配,否则软件随时都可能奔溃,那么问题来了~\n\n**已经发出去的版本或是targetSdkVersion小与23的apk怎么办?**\n废话,当然会崩了!!!\n\n只要在满足在Android M上直接使用为授权的功能，程序必须Crash. targetSdkVersion<23的应用在安装时系统会默认全部授权应用在manifest中申请的权限，\n不要应用这样你的应用就完事大全了．用户可以在以下页面或是其他应用关闭相关权限，然后...你的应用就没有然后了～\n![关闭权限页][2]\n\n## Android M 权限分类\n\n*安卓系统把权限分为了三类:*\n\n* Normal Permissions\n\n* Dangerous Permissions\n\n* Special Permissions\n\n### Normal Permissions-一般权限\n一般权限都是一些系统认为比较权限的权限，流氓应用就是拥有这些权限也干不出多大坏事，Normal 权限会在应用安装是直接授权，\n[官网解释][6]：权限如下：\n\n    ACCESS_LOCATION_EXTRA_COMMANDS\n    ACCESS_NETWORK_STATE\n    ACCESS_NOTIFICATION_POLICY\n    ACCESS_WIFI_STATE\n    BLUETOOTH\n    BLUETOOTH_ADMIN\n    BROADCAST_STICKY\n    CHANGE_NETWORK_STATE\n    CHANGE_WIFI_MULTICAST_STATE\n    CHANGE_WIFI_STATE\n    DISABLE_KEYGUARD\n    EXPAND_STATUS_BAR\n    FLASHLIGHT\n    GET_PACKAGE_SIZE\n    INTERNET\n    KILL_BACKGROUND_PROCESSES\n    MODIFY_AUDIO_SETTINGS\n    NFC\n    READ_SYNC_SETTINGS\n    READ_SYNC_STATS\n    RECEIVE_BOOT_COMPLETED\n    REORDER_TASKS\n    REQUEST_INSTALL_PACKAGES\n    SET_TIME_ZONE\n    SET_WALLPAPER\n    SET_WALLPAPER_HINTS\n    TRANSMIT_IR\n    USE_FINGERPRINT\n    VIBRATE\n    WAKE_LOCK\n    WRITE_SYNC_SETTINGS\n    SET_ALARM\n    INSTALL_SHORTCUT\n    UNINSTALL_SHORTCUT\n\n### Dangerous Permissions－危险权限\n这些权限都是一些敏感性权限，一些广告平台或是流氓应用会用这些权限干一些坏坏的事情，因此系统将这类权限分了几个类别，\n应用每次都要检测下是否有权限，没有的化必须弹出对话框申请，只要一个组别中的一个权限得到了授权，整个组的权限都会的到授权．\n\n这部分权限也是我们重点在Ｍ系统上关注和适配的部分．\n[官网权威说明][8], 具体相关权限见图：\n\n![Dangerous Permission][9]\n\n### Special Permissions- 特殊权限\nSYSTEM_ALERT_WINDOW and WRITE_SETTINGS, 这两个权限比较特殊，不能通过代码申请方式获取，必须得用户打开软件设置页手动打开，才能授权．\n\n>There are a couple of permissions that don't behave like normal and dangerous permissions. SYSTEM_ALERT_WINDOW and WRITE_SETTINGS are particularly sensitive, so most apps should not use them. If an app needs one of these permissions, it must declare the permission in the manifest, and send an intent requesting the user's authorization. The system responds to the intent by showing a detailed management screen to the user.\n\n[特殊权限官网推荐用法][10]\n\n\n## 实战Android m权限申请用法\n我们对相关申请方法封装成了工具类，方便ｍ系统适配随时调用．\n\n### 相关配置\ncompileSdkVersion and targetSdkVersion 设置为 23开始\n\n### 调用相关权限\n\n```\n    private void testAlertPermission() {\n        WindowManager mWindowManager = (WindowManager) getSystemService(\n                Context.WINDOW_SERVICE);\n        WindowManager.LayoutParams params = new WindowManager.LayoutParams();\n        params.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;\n        mWindowManager.addView(new TextView(this), params);\n    }\n```\n\n### 权限申请相关代码\n\n```\n    // Here, thisActivity is the current activity\n    if (ContextCompat.checkSelfPermission(thisActivity,\n                   Manifest.permission.READ_CONTACTS)\n            != PackageManager.PERMISSION_GRANTED) {\n\n       // Should we show an explanation?\n        if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,\n               Manifest.permission.READ_CONTACTS)) {\n\n        // Show an expanation to the user *asynchronously* -- don't block\n        // this thread waiting for the user's response! After the user\n        // sees the explanation, try again to request the permission.\n\n         } else {\n\n        // No explanation needed, we can request the permission.\n\n        ActivityCompat.requestPermissions(thisActivity,\n                new String[]{Manifest.permission.READ_CONTACTS},\n                MY_PERMISSIONS_REQUEST_READ_CONTACTS);\n\n        // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an\n        // app-defined int constant. The callback method gets the\n        // result of the request.\n          }\n    }\n```\n\nrequestPermissions方法调用时会弹出以下对话框．当用户点击拒绝并且勾选了不再弹出后这个对话框将不会再弹出，会直接拒绝掉该权限：\n![requestPermissions][1]\n\n#### shouldShowRequestPermissionRationale方法说明\n用户拒绝，或是不在弹出，这个方法会返回false．\n![返回说明][11]\n\n#### Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：\n\n```\n    @TargetApi(Build.VERSION_CODES.M)\n    public static boolean checkPermission(Object cxt, String permission, int requestCode) {\n        if (!checkSelfPermissionWrapper(cxt, permission)) {\n            if (!shouldShowRequestPermissionRationaleWrapper(cxt, permission)) {\n                requestPermissionsWrapper(cxt, new String[]{permission}, requestCode);\n            } else {\n                Log.d(TAG, \"should show rational\");\n            }\n            return false;\n        }\n        return true;\n    }\n\n    private static void requestPermissionsWrapper(Object cxt, String[] permission, int requestCode) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            ActivityCompat.requestPermissions(activity, permission, requestCode);\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            fragment.requestPermissions(permission, requestCode);\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n    }\n```\n\n#### 权限可以一次申请多个\n如图一次可以申请多个权限，但是用户还是一个一个授权．我们对该请求也做了封装：\n![multi][4] ![multi][3]\n\n```\n    @TargetApi(23)\n    private static boolean checkSelfPermissionWrapper(Object cxt, String permission) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            return ActivityCompat.checkSelfPermission(activity,\n                    permission) == PackageManager.PERMISSION_GRANTED;\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            return fragment.getActivity().checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n    }\n\n    private static String[] checkSelfPermissionArray(Object cxt, String[] permission) {\n        ArrayList<String> permiList = new ArrayList<>();\n        for (String p : permission) {\n            if (!checkSelfPermissionWrapper(cxt, p)) {\n                permiList.add(p);\n            }\n        }\n\n        return permiList.toArray(new String[permiList.size()]);\n    }\n```\n\n### 权限返回处理\n在activity或fragment 中重写onRequestPermissionsResult，用户处理相关权限后会回调该方法，当活取到相关应用后可以继续原来的逻辑．\n\n```\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        switch (requestCode) {\n            case PermissionUtils.PERMISSION_REQUEST_CODE:\n                if (PermissionUtils.verifyPermissions(grantResults)) {\n                    // Permission Granted\n                    // do you action\n                } else {\n                    // Permission Denied\n                    Toast.makeText(this, \"WRITE_CONTACTS Denied\", Toast.LENGTH_SHORT)\n                            .show();\n                }\n                break;\n            default:\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n    \n    public static boolean verifyPermissions(int[] grantResults) {\n        // At least one result must be checked.\n        if (grantResults.length < 1) {\n            return false;\n        }\n\n        // Verify that each required permission has been granted, otherwise return false.\n        for (int result : grantResults) {\n            if (result != PackageManager.PERMISSION_GRANTED) {\n                return false;\n            }\n        }\n        return true;\n    }\n```\n\n## 特殊权限的申请\n以前特殊权限说明地方已经支出，该类权限需求intent到具体的设置页面，让用户手动打开，才能授权．\n同样重写onActivityResult方法，返回该页面时做回调处理．\n\n![sp][5]\n\n系统弹出权限，相关代码实例：\n\n```\n   /**\n    * 检测系统弹出权限\n    * @param cxt\n    * @param req\n    * @return\n    */\n    @TargetApi(23)\n    public static boolean checkSettingAlertPermission(Object cxt, int req) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            if (!Settings.canDrawOverlays(activity.getBaseContext())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n                        Uri.parse(\"package:\" + activity.getPackageName()));\n                activity.startActivityForResult(intent, req);\n                return false;\n            }\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            if (!Settings.canDrawOverlays(fragment.getActivity())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n                        Uri.parse(\"package:\" + fragment.getActivity().getPackageName()));\n                fragment.startActivityForResult(intent, req);\n                return false;\n            }\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n\n        return true;\n    }\n    \n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == PermissionUtils.PERMISSION_SETTING_REQ_CODE) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                if (Settings.canDrawOverlays(this)) {\n                        // do something\n                } else {\n                        Toast.makeText(this, \"not has setting permission\", Toast.LENGTH_LONG).show();\n                        finish();\n                }\n             }\n        }\n    }\n```\n\n系统设置权限代码\n```\n    /**\n     * WRITE_SETTINGS 权限\n     * @param cxt\n     * @param req\n     * @return\n     */\n    @TargetApi(23)\n    public static boolean checkSettingSystemPermission(Object cxt, int req) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            if (!Settings.System.canWrite(activity)) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);\n                intent.setData(Uri.parse(\"package:\" + activity.getPackageName()));\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivityForResult(intent, req);\n                return false;\n            }\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            if (!Settings.System.canWrite(fragment.getContext())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);\n                intent.setData(Uri.parse(\"package:\" + fragment.getContext().getPackageName()));\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                fragment.startActivityForResult(intent, req);\n                return false;\n            }\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n\n        return true;\n    }\n```\n\n## 结语\nAndroid 6.0系统权限管理是安卓系统的一大进步，为安卓手机用户提供了一个安全干净系统前提，鉴于google对未授权应用的奔溃方式处理，\n安卓开发者应当尽早适配6.0系统，提示软件体验．\n\n实战整体代码已提交到[GitHub](https://github.com/CankingApp/PermissionDemo),欢迎下载交流学习～\n\n\n## License\n\n    Copyright 2015 ChangXing\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n  [1]: ./single_p.png\n  [2]: ./per_show.png\n  [3]: ./mult_2.png\n  [4]: ./mult_p1.png\n  [5]: ./acces_in.png\n  [6]: ./error.png\n  [7]: http://developer.android.com/intl/zh-cn/guide/topics/security/normal-permissions.html\n  [8]: http://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\n  [9]: ./danger.png\n  [10]: http://developer.android.com/intl/zh-cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW\n  [11]: ./should.png\n","source":"_posts/android-permission.md","raw":"---\ntitle: Android 6.0系统中权限问题调用 - Permission in Android M\ndate: 2016-03-18 20:11:28\ncategories: android \ntags: android\n---\n\n\n\n安卓平台权限一直有被流氓应用随便利用诟病, android M的发布彻底解决了这一问题,取而代之的是，app不得不在运行时一个一个询问用户授予权限。 \n\nAndroid 6.0(api23)系统中,做了一些限制, 开发者在使用到每条权限时必须自己调用相关代码请求.\n<!--more-->\n\n如果没有获得某项权限,直接使用相关功能,则会导致自己程序crash.\n![见log][6]\n\n\n可见6.0以后的系统开发者必须对权限适配,否则软件随时都可能奔溃,那么问题来了~\n\n**已经发出去的版本或是targetSdkVersion小与23的apk怎么办?**\n废话,当然会崩了!!!\n\n只要在满足在Android M上直接使用为授权的功能，程序必须Crash. targetSdkVersion<23的应用在安装时系统会默认全部授权应用在manifest中申请的权限，\n不要应用这样你的应用就完事大全了．用户可以在以下页面或是其他应用关闭相关权限，然后...你的应用就没有然后了～\n![关闭权限页][2]\n\n## Android M 权限分类\n\n*安卓系统把权限分为了三类:*\n\n* Normal Permissions\n\n* Dangerous Permissions\n\n* Special Permissions\n\n### Normal Permissions-一般权限\n一般权限都是一些系统认为比较权限的权限，流氓应用就是拥有这些权限也干不出多大坏事，Normal 权限会在应用安装是直接授权，\n[官网解释][6]：权限如下：\n\n    ACCESS_LOCATION_EXTRA_COMMANDS\n    ACCESS_NETWORK_STATE\n    ACCESS_NOTIFICATION_POLICY\n    ACCESS_WIFI_STATE\n    BLUETOOTH\n    BLUETOOTH_ADMIN\n    BROADCAST_STICKY\n    CHANGE_NETWORK_STATE\n    CHANGE_WIFI_MULTICAST_STATE\n    CHANGE_WIFI_STATE\n    DISABLE_KEYGUARD\n    EXPAND_STATUS_BAR\n    FLASHLIGHT\n    GET_PACKAGE_SIZE\n    INTERNET\n    KILL_BACKGROUND_PROCESSES\n    MODIFY_AUDIO_SETTINGS\n    NFC\n    READ_SYNC_SETTINGS\n    READ_SYNC_STATS\n    RECEIVE_BOOT_COMPLETED\n    REORDER_TASKS\n    REQUEST_INSTALL_PACKAGES\n    SET_TIME_ZONE\n    SET_WALLPAPER\n    SET_WALLPAPER_HINTS\n    TRANSMIT_IR\n    USE_FINGERPRINT\n    VIBRATE\n    WAKE_LOCK\n    WRITE_SYNC_SETTINGS\n    SET_ALARM\n    INSTALL_SHORTCUT\n    UNINSTALL_SHORTCUT\n\n### Dangerous Permissions－危险权限\n这些权限都是一些敏感性权限，一些广告平台或是流氓应用会用这些权限干一些坏坏的事情，因此系统将这类权限分了几个类别，\n应用每次都要检测下是否有权限，没有的化必须弹出对话框申请，只要一个组别中的一个权限得到了授权，整个组的权限都会的到授权．\n\n这部分权限也是我们重点在Ｍ系统上关注和适配的部分．\n[官网权威说明][8], 具体相关权限见图：\n\n![Dangerous Permission][9]\n\n### Special Permissions- 特殊权限\nSYSTEM_ALERT_WINDOW and WRITE_SETTINGS, 这两个权限比较特殊，不能通过代码申请方式获取，必须得用户打开软件设置页手动打开，才能授权．\n\n>There are a couple of permissions that don't behave like normal and dangerous permissions. SYSTEM_ALERT_WINDOW and WRITE_SETTINGS are particularly sensitive, so most apps should not use them. If an app needs one of these permissions, it must declare the permission in the manifest, and send an intent requesting the user's authorization. The system responds to the intent by showing a detailed management screen to the user.\n\n[特殊权限官网推荐用法][10]\n\n\n## 实战Android m权限申请用法\n我们对相关申请方法封装成了工具类，方便ｍ系统适配随时调用．\n\n### 相关配置\ncompileSdkVersion and targetSdkVersion 设置为 23开始\n\n### 调用相关权限\n\n```\n    private void testAlertPermission() {\n        WindowManager mWindowManager = (WindowManager) getSystemService(\n                Context.WINDOW_SERVICE);\n        WindowManager.LayoutParams params = new WindowManager.LayoutParams();\n        params.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;\n        mWindowManager.addView(new TextView(this), params);\n    }\n```\n\n### 权限申请相关代码\n\n```\n    // Here, thisActivity is the current activity\n    if (ContextCompat.checkSelfPermission(thisActivity,\n                   Manifest.permission.READ_CONTACTS)\n            != PackageManager.PERMISSION_GRANTED) {\n\n       // Should we show an explanation?\n        if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,\n               Manifest.permission.READ_CONTACTS)) {\n\n        // Show an expanation to the user *asynchronously* -- don't block\n        // this thread waiting for the user's response! After the user\n        // sees the explanation, try again to request the permission.\n\n         } else {\n\n        // No explanation needed, we can request the permission.\n\n        ActivityCompat.requestPermissions(thisActivity,\n                new String[]{Manifest.permission.READ_CONTACTS},\n                MY_PERMISSIONS_REQUEST_READ_CONTACTS);\n\n        // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an\n        // app-defined int constant. The callback method gets the\n        // result of the request.\n          }\n    }\n```\n\nrequestPermissions方法调用时会弹出以下对话框．当用户点击拒绝并且勾选了不再弹出后这个对话框将不会再弹出，会直接拒绝掉该权限：\n![requestPermissions][1]\n\n#### shouldShowRequestPermissionRationale方法说明\n用户拒绝，或是不在弹出，这个方法会返回false．\n![返回说明][11]\n\n#### Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：\n\n```\n    @TargetApi(Build.VERSION_CODES.M)\n    public static boolean checkPermission(Object cxt, String permission, int requestCode) {\n        if (!checkSelfPermissionWrapper(cxt, permission)) {\n            if (!shouldShowRequestPermissionRationaleWrapper(cxt, permission)) {\n                requestPermissionsWrapper(cxt, new String[]{permission}, requestCode);\n            } else {\n                Log.d(TAG, \"should show rational\");\n            }\n            return false;\n        }\n        return true;\n    }\n\n    private static void requestPermissionsWrapper(Object cxt, String[] permission, int requestCode) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            ActivityCompat.requestPermissions(activity, permission, requestCode);\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            fragment.requestPermissions(permission, requestCode);\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n    }\n```\n\n#### 权限可以一次申请多个\n如图一次可以申请多个权限，但是用户还是一个一个授权．我们对该请求也做了封装：\n![multi][4] ![multi][3]\n\n```\n    @TargetApi(23)\n    private static boolean checkSelfPermissionWrapper(Object cxt, String permission) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            return ActivityCompat.checkSelfPermission(activity,\n                    permission) == PackageManager.PERMISSION_GRANTED;\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            return fragment.getActivity().checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n    }\n\n    private static String[] checkSelfPermissionArray(Object cxt, String[] permission) {\n        ArrayList<String> permiList = new ArrayList<>();\n        for (String p : permission) {\n            if (!checkSelfPermissionWrapper(cxt, p)) {\n                permiList.add(p);\n            }\n        }\n\n        return permiList.toArray(new String[permiList.size()]);\n    }\n```\n\n### 权限返回处理\n在activity或fragment 中重写onRequestPermissionsResult，用户处理相关权限后会回调该方法，当活取到相关应用后可以继续原来的逻辑．\n\n```\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        switch (requestCode) {\n            case PermissionUtils.PERMISSION_REQUEST_CODE:\n                if (PermissionUtils.verifyPermissions(grantResults)) {\n                    // Permission Granted\n                    // do you action\n                } else {\n                    // Permission Denied\n                    Toast.makeText(this, \"WRITE_CONTACTS Denied\", Toast.LENGTH_SHORT)\n                            .show();\n                }\n                break;\n            default:\n                super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n    }\n    \n    public static boolean verifyPermissions(int[] grantResults) {\n        // At least one result must be checked.\n        if (grantResults.length < 1) {\n            return false;\n        }\n\n        // Verify that each required permission has been granted, otherwise return false.\n        for (int result : grantResults) {\n            if (result != PackageManager.PERMISSION_GRANTED) {\n                return false;\n            }\n        }\n        return true;\n    }\n```\n\n## 特殊权限的申请\n以前特殊权限说明地方已经支出，该类权限需求intent到具体的设置页面，让用户手动打开，才能授权．\n同样重写onActivityResult方法，返回该页面时做回调处理．\n\n![sp][5]\n\n系统弹出权限，相关代码实例：\n\n```\n   /**\n    * 检测系统弹出权限\n    * @param cxt\n    * @param req\n    * @return\n    */\n    @TargetApi(23)\n    public static boolean checkSettingAlertPermission(Object cxt, int req) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            if (!Settings.canDrawOverlays(activity.getBaseContext())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n                        Uri.parse(\"package:\" + activity.getPackageName()));\n                activity.startActivityForResult(intent, req);\n                return false;\n            }\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            if (!Settings.canDrawOverlays(fragment.getActivity())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n                        Uri.parse(\"package:\" + fragment.getActivity().getPackageName()));\n                fragment.startActivityForResult(intent, req);\n                return false;\n            }\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n\n        return true;\n    }\n    \n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == PermissionUtils.PERMISSION_SETTING_REQ_CODE) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                if (Settings.canDrawOverlays(this)) {\n                        // do something\n                } else {\n                        Toast.makeText(this, \"not has setting permission\", Toast.LENGTH_LONG).show();\n                        finish();\n                }\n             }\n        }\n    }\n```\n\n系统设置权限代码\n```\n    /**\n     * WRITE_SETTINGS 权限\n     * @param cxt\n     * @param req\n     * @return\n     */\n    @TargetApi(23)\n    public static boolean checkSettingSystemPermission(Object cxt, int req) {\n        if (cxt instanceof Activity) {\n            Activity activity = (Activity) cxt;\n            if (!Settings.System.canWrite(activity)) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);\n                intent.setData(Uri.parse(\"package:\" + activity.getPackageName()));\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                activity.startActivityForResult(intent, req);\n                return false;\n            }\n        } else if (cxt instanceof Fragment) {\n            Fragment fragment = (Fragment) cxt;\n            if (!Settings.System.canWrite(fragment.getContext())) {\n                Log.i(TAG, \"Setting not permission\");\n\n                Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);\n                intent.setData(Uri.parse(\"package:\" + fragment.getContext().getPackageName()));\n                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                fragment.startActivityForResult(intent, req);\n                return false;\n            }\n        } else {\n            throw new RuntimeException(\"cxt is net a activity or fragment\");\n        }\n\n        return true;\n    }\n```\n\n## 结语\nAndroid 6.0系统权限管理是安卓系统的一大进步，为安卓手机用户提供了一个安全干净系统前提，鉴于google对未授权应用的奔溃方式处理，\n安卓开发者应当尽早适配6.0系统，提示软件体验．\n\n实战整体代码已提交到[GitHub](https://github.com/CankingApp/PermissionDemo),欢迎下载交流学习～\n\n\n## License\n\n    Copyright 2015 ChangXing\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n  [1]: ./single_p.png\n  [2]: ./per_show.png\n  [3]: ./mult_2.png\n  [4]: ./mult_p1.png\n  [5]: ./acces_in.png\n  [6]: ./error.png\n  [7]: http://developer.android.com/intl/zh-cn/guide/topics/security/normal-permissions.html\n  [8]: http://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\n  [9]: ./danger.png\n  [10]: http://developer.android.com/intl/zh-cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW\n  [11]: ./should.png\n","slug":"android-permission","published":1,"updated":"2016-11-08T04:31:55.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlq0005a4756ypdwir6","content":"<p>安卓平台权限一直有被流氓应用随便利用诟病, android M的发布彻底解决了这一问题,取而代之的是，app不得不在运行时一个一个询问用户授予权限。 </p>\n<p>Android 6.0(api23)系统中,做了一些限制, 开发者在使用到每条权限时必须自己调用相关代码请求.<br><a id=\"more\"></a></p>\n<p>如果没有获得某项权限,直接使用相关功能,则会导致自己程序crash.<br><img src=\"./error.png\" alt=\"见log\"></p>\n<p>可见6.0以后的系统开发者必须对权限适配,否则软件随时都可能奔溃,那么问题来了~</p>\n<p><strong>已经发出去的版本或是targetSdkVersion小与23的apk怎么办?</strong><br>废话,当然会崩了!!!</p>\n<p>只要在满足在Android M上直接使用为授权的功能，程序必须Crash. targetSdkVersion&lt;23的应用在安装时系统会默认全部授权应用在manifest中申请的权限，<br>不要应用这样你的应用就完事大全了．用户可以在以下页面或是其他应用关闭相关权限，然后…你的应用就没有然后了～<br><img src=\"./per_show.png\" alt=\"关闭权限页\"></p>\n<h2 id=\"Android-M-权限分类\"><a href=\"#Android-M-权限分类\" class=\"headerlink\" title=\"Android M 权限分类\"></a>Android M 权限分类</h2><p><em>安卓系统把权限分为了三类:</em></p>\n<ul>\n<li><p>Normal Permissions</p>\n</li>\n<li><p>Dangerous Permissions</p>\n</li>\n<li><p>Special Permissions</p>\n</li>\n</ul>\n<h3 id=\"Normal-Permissions-一般权限\"><a href=\"#Normal-Permissions-一般权限\" class=\"headerlink\" title=\"Normal Permissions-一般权限\"></a>Normal Permissions-一般权限</h3><p>一般权限都是一些系统认为比较权限的权限，流氓应用就是拥有这些权限也干不出多大坏事，Normal 权限会在应用安装是直接授权，<br><a href=\"./error.png\">官网解释</a>：权限如下：</p>\n<pre><code>ACCESS_LOCATION_EXTRA_COMMANDS\nACCESS_NETWORK_STATE\nACCESS_NOTIFICATION_POLICY\nACCESS_WIFI_STATE\nBLUETOOTH\nBLUETOOTH_ADMIN\nBROADCAST_STICKY\nCHANGE_NETWORK_STATE\nCHANGE_WIFI_MULTICAST_STATE\nCHANGE_WIFI_STATE\nDISABLE_KEYGUARD\nEXPAND_STATUS_BAR\nFLASHLIGHT\nGET_PACKAGE_SIZE\nINTERNET\nKILL_BACKGROUND_PROCESSES\nMODIFY_AUDIO_SETTINGS\nNFC\nREAD_SYNC_SETTINGS\nREAD_SYNC_STATS\nRECEIVE_BOOT_COMPLETED\nREORDER_TASKS\nREQUEST_INSTALL_PACKAGES\nSET_TIME_ZONE\nSET_WALLPAPER\nSET_WALLPAPER_HINTS\nTRANSMIT_IR\nUSE_FINGERPRINT\nVIBRATE\nWAKE_LOCK\nWRITE_SYNC_SETTINGS\nSET_ALARM\nINSTALL_SHORTCUT\nUNINSTALL_SHORTCUT\n</code></pre><h3 id=\"Dangerous-Permissions－危险权限\"><a href=\"#Dangerous-Permissions－危险权限\" class=\"headerlink\" title=\"Dangerous Permissions－危险权限\"></a>Dangerous Permissions－危险权限</h3><p>这些权限都是一些敏感性权限，一些广告平台或是流氓应用会用这些权限干一些坏坏的事情，因此系统将这类权限分了几个类别，<br>应用每次都要检测下是否有权限，没有的化必须弹出对话框申请，只要一个组别中的一个权限得到了授权，整个组的权限都会的到授权．</p>\n<p>这部分权限也是我们重点在Ｍ系统上关注和适配的部分．<br><a href=\"http://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\" target=\"_blank\" rel=\"external\">官网权威说明</a>, 具体相关权限见图：</p>\n<p><img src=\"./danger.png\" alt=\"Dangerous Permission\"></p>\n<h3 id=\"Special-Permissions-特殊权限\"><a href=\"#Special-Permissions-特殊权限\" class=\"headerlink\" title=\"Special Permissions- 特殊权限\"></a>Special Permissions- 特殊权限</h3><p>SYSTEM_ALERT_WINDOW and WRITE_SETTINGS, 这两个权限比较特殊，不能通过代码申请方式获取，必须得用户打开软件设置页手动打开，才能授权．</p>\n<blockquote>\n<p>There are a couple of permissions that don’t behave like normal and dangerous permissions. SYSTEM_ALERT_WINDOW and WRITE_SETTINGS are particularly sensitive, so most apps should not use them. If an app needs one of these permissions, it must declare the permission in the manifest, and send an intent requesting the user’s authorization. The system responds to the intent by showing a detailed management screen to the user.</p>\n</blockquote>\n<p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW\" target=\"_blank\" rel=\"external\">特殊权限官网推荐用法</a></p>\n<h2 id=\"实战Android-m权限申请用法\"><a href=\"#实战Android-m权限申请用法\" class=\"headerlink\" title=\"实战Android m权限申请用法\"></a>实战Android m权限申请用法</h2><p>我们对相关申请方法封装成了工具类，方便ｍ系统适配随时调用．</p>\n<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><p>compileSdkVersion and targetSdkVersion 设置为 23开始</p>\n<h3 id=\"调用相关权限\"><a href=\"#调用相关权限\" class=\"headerlink\" title=\"调用相关权限\"></a>调用相关权限</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">testAlertPermission</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    WindowManager mWindowManager = (WindowManager) getSystemService(</span><br><span class=\"line\">            Context.WINDOW_SERVICE);</span><br><span class=\"line\">    WindowManager.LayoutParams <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</span><br><span class=\"line\">    <span class=\"keyword\">params</span>.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;</span><br><span class=\"line\">    mWindowManager.addView(<span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>), <span class=\"keyword\">params</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限申请相关代码\"><a href=\"#权限申请相关代码\" class=\"headerlink\" title=\"权限申请相关代码\"></a>权限申请相关代码</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here, thisActivity is the current activity</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class=\"line\">               Manifest.permission.READ_CONTACTS)</span><br><span class=\"line\">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Should we show an explanation?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class=\"line\">           Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class=\"line\">    <span class=\"comment\">// this thread waiting for the user's response! After the user</span></span><br><span class=\"line\">    <span class=\"comment\">// sees the explanation, try again to request the permission.</span></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; <span class=\"decorator\"><span class=\"keyword\">else</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// No explanation needed, we can request the permission.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ActivityCompat.requestPermissions(thisActivity,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class=\"line\">            MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class=\"line\">    <span class=\"comment\">// app-defined int constant. The callback method gets the</span></span><br><span class=\"line\">    <span class=\"comment\">// result of the request.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>requestPermissions方法调用时会弹出以下对话框．当用户点击拒绝并且勾选了不再弹出后这个对话框将不会再弹出，会直接拒绝掉该权限：<br><img src=\"./single_p.png\" alt=\"requestPermissions\"></p>\n<h4 id=\"shouldShowRequestPermissionRationale方法说明\"><a href=\"#shouldShowRequestPermissionRationale方法说明\" class=\"headerlink\" title=\"shouldShowRequestPermissionRationale方法说明\"></a>shouldShowRequestPermissionRationale方法说明</h4><p>用户拒绝，或是不在弹出，这个方法会返回false．<br><img src=\"./should.png\" alt=\"返回说明\"></p>\n<h4 id=\"Activity和Fragment的申请方法不一样，所以我们对方法做了包装如下：\"><a href=\"#Activity和Fragment的申请方法不一样，所以我们对方法做了包装如下：\" class=\"headerlink\" title=\"Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：\"></a>Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：</h4><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TargetApi(Build.VERSION_CODES.M)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkPermission(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span> permission, <span class=\"built_in\">int</span> requestCode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkSelfPermissionWrapper(cxt, permission)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldShowRequestPermissionRationaleWrapper(cxt, permission)) &#123;</span><br><span class=\"line\">            requestPermissionsWrapper(cxt, <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;permission&#125;, requestCode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"should show rational\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> requestPermissionsWrapper(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span>[] permission, <span class=\"built_in\">int</span> requestCode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt;</span><br><span class=\"line\">        ActivityCompat.requestPermissions(activity, permission, requestCode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">        fragment.requestPermissions(permission, requestCode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限可以一次申请多个\"><a href=\"#权限可以一次申请多个\" class=\"headerlink\" title=\"权限可以一次申请多个\"></a>权限可以一次申请多个</h4><p>如图一次可以申请多个权限，但是用户还是一个一个授权．我们对该请求也做了封装：<br><img src=\"./mult_p1.png\" alt=\"multi\"> <img src=\"./mult_2.png\" alt=\"multi\"></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TargetApi(<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkSelfPermissionWrapper(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span> permission) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ActivityCompat.checkSelfPermission(activity,</span><br><span class=\"line\">                permission) == PackageManager.PERMISSION_GRANTED;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment.getActivity().checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span>[] checkSelfPermissionArray(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span>[] permission) &#123;</span><br><span class=\"line\">    ArrayList&lt;<span class=\"keyword\">String</span>&gt; permiList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> p : permission) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!checkSelfPermissionWrapper(cxt, p)) &#123;</span><br><span class=\"line\">            permiList.<span class=\"built_in\">add</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> permiList.toArray(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[permiList.<span class=\"built_in\">size</span>()]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限返回处理\"><a href=\"#权限返回处理\" class=\"headerlink\" title=\"权限返回处理\"></a>权限返回处理</h3><p>在activity或fragment 中重写onRequestPermissionsResult，用户处理相关权限后会回调该方法，当活取到相关应用后可以继续原来的逻辑．</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"type\">Override</span></span><br><span class=\"line\">public <span class=\"built_in\">void</span> onRequestPermissionsResult(<span class=\"built_in\">int</span> requestCode, <span class=\"type\">String</span>[] permissions, <span class=\"built_in\">int</span>[] grantResults) &#123;</span><br><span class=\"line\">    switch (requestCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">PermissionUtils</span>.<span class=\"type\">PERMISSION_REQUEST_CODE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"type\">PermissionUtils</span>.verifyPermissions(grantResults)) &#123;</span><br><span class=\"line\">                // <span class=\"type\">Permission</span> <span class=\"type\">Granted</span></span><br><span class=\"line\">                // <span class=\"keyword\">do</span> you action</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // <span class=\"type\">Permission</span> <span class=\"type\">Denied</span></span><br><span class=\"line\">                <span class=\"type\">Toast</span>.makeText(this, <span class=\"string\">\"WRITE_CONTACTS Denied\"</span>, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>)</span><br><span class=\"line\">                        .show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"keyword\">static</span> boolean verifyPermissions(<span class=\"built_in\">int</span>[] grantResults) &#123;</span><br><span class=\"line\">    // <span class=\"type\">At</span> least one <span class=\"literal\">result</span> must be checked.</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grantResults.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"type\">Verify</span> that each required permission has been granted, otherwise <span class=\"keyword\">return</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> <span class=\"literal\">result</span> : grantResults) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">result</span> != <span class=\"type\">PackageManager</span>.<span class=\"type\">PERMISSION_GRANTED</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特殊权限的申请\"><a href=\"#特殊权限的申请\" class=\"headerlink\" title=\"特殊权限的申请\"></a>特殊权限的申请</h2><p>以前特殊权限说明地方已经支出，该类权限需求intent到具体的设置页面，让用户手动打开，才能授权．<br>同样重写onActivityResult方法，返回该页面时做回调处理．</p>\n<p><img src=\"./acces_in.png\" alt=\"sp\"></p>\n<p>系统弹出权限，相关代码实例：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 检测系统弹出权限</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> cxt</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> req</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span></span><br><span class=\"line\"> */</span></span><br><span class=\"line\"> <span class=\"meta\">@TargetApi</span>(<span class=\"number\">23</span>)</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkSettingAlertPermission</span><span class=\"params\">(Object cxt, <span class=\"keyword\">int</span> req)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">         Activity activity = (Activity) cxt;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(activity.getBaseContext())) &#123;</span><br><span class=\"line\">             Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</span><br><span class=\"line\">                     Uri.parse(<span class=\"string\">\"package:\"</span> + activity.getPackageName()));</span><br><span class=\"line\">             activity.startActivityForResult(intent, req);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(cxt <span class=\"keyword\">instanceof</span> Fragment)</span> </span>&#123;</span><br><span class=\"line\">         Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(fragment.getActivity())) &#123;</span><br><span class=\"line\">             Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</span><br><span class=\"line\">                     Uri.parse(<span class=\"string\">\"package:\"</span> + fragment.getActivity().getPackageName()));</span><br><span class=\"line\">             fragment.startActivityForResult(intent, req);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (requestCode == PermissionUtils.PERMISSION_SETTING_REQ_CODE) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// do something</span></span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                     Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"not has setting permission\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                     finish();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>系统设置权限代码<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * WRITE_SETTINGS 权限</span><br><span class=\"line\"> * @param cxt</span><br><span class=\"line\"> * @param req</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">@TargetApi(<span class=\"number\">23</span>)</span><br><span class=\"line\">public static boolean checkSettingSystemPermission(Object cxt, <span class=\"keyword\">int</span> req) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt instanceof Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Settings.<span class=\"keyword\">System</span>.canWrite(activity)) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS)<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">\"package:\"</span> + activity.getPackageName()))<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">            activity.startActivityForResult(intent, req)<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt instanceof Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Settings.<span class=\"keyword\">System</span>.canWrite(fragment.getContext())) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS)<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">\"package:\"</span> + fragment.getContext().getPackageName()))<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">            fragment.startActivityForResult(intent, req)<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        throw new RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> true<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Android 6.0系统权限管理是安卓系统的一大进步，为安卓手机用户提供了一个安全干净系统前提，鉴于google对未授权应用的奔溃方式处理，<br>安卓开发者应当尽早适配6.0系统，提示软件体验．</p>\n<p>实战整体代码已提交到<a href=\"https://github.com/CankingApp/PermissionDemo\" target=\"_blank\" rel=\"external\">GitHub</a>,欢迎下载交流学习～</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>Copyright 2015 ChangXing\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>","excerpt":"<p>安卓平台权限一直有被流氓应用随便利用诟病, android M的发布彻底解决了这一问题,取而代之的是，app不得不在运行时一个一个询问用户授予权限。 </p>\n<p>Android 6.0(api23)系统中,做了一些限制, 开发者在使用到每条权限时必须自己调用相关代码请求.<br>","more":"</p>\n<p>如果没有获得某项权限,直接使用相关功能,则会导致自己程序crash.<br><img src=\"./error.png\" alt=\"见log\"></p>\n<p>可见6.0以后的系统开发者必须对权限适配,否则软件随时都可能奔溃,那么问题来了~</p>\n<p><strong>已经发出去的版本或是targetSdkVersion小与23的apk怎么办?</strong><br>废话,当然会崩了!!!</p>\n<p>只要在满足在Android M上直接使用为授权的功能，程序必须Crash. targetSdkVersion&lt;23的应用在安装时系统会默认全部授权应用在manifest中申请的权限，<br>不要应用这样你的应用就完事大全了．用户可以在以下页面或是其他应用关闭相关权限，然后…你的应用就没有然后了～<br><img src=\"./per_show.png\" alt=\"关闭权限页\"></p>\n<h2 id=\"Android-M-权限分类\"><a href=\"#Android-M-权限分类\" class=\"headerlink\" title=\"Android M 权限分类\"></a>Android M 权限分类</h2><p><em>安卓系统把权限分为了三类:</em></p>\n<ul>\n<li><p>Normal Permissions</p>\n</li>\n<li><p>Dangerous Permissions</p>\n</li>\n<li><p>Special Permissions</p>\n</li>\n</ul>\n<h3 id=\"Normal-Permissions-一般权限\"><a href=\"#Normal-Permissions-一般权限\" class=\"headerlink\" title=\"Normal Permissions-一般权限\"></a>Normal Permissions-一般权限</h3><p>一般权限都是一些系统认为比较权限的权限，流氓应用就是拥有这些权限也干不出多大坏事，Normal 权限会在应用安装是直接授权，<br><a href=\"./error.png\">官网解释</a>：权限如下：</p>\n<pre><code>ACCESS_LOCATION_EXTRA_COMMANDS\nACCESS_NETWORK_STATE\nACCESS_NOTIFICATION_POLICY\nACCESS_WIFI_STATE\nBLUETOOTH\nBLUETOOTH_ADMIN\nBROADCAST_STICKY\nCHANGE_NETWORK_STATE\nCHANGE_WIFI_MULTICAST_STATE\nCHANGE_WIFI_STATE\nDISABLE_KEYGUARD\nEXPAND_STATUS_BAR\nFLASHLIGHT\nGET_PACKAGE_SIZE\nINTERNET\nKILL_BACKGROUND_PROCESSES\nMODIFY_AUDIO_SETTINGS\nNFC\nREAD_SYNC_SETTINGS\nREAD_SYNC_STATS\nRECEIVE_BOOT_COMPLETED\nREORDER_TASKS\nREQUEST_INSTALL_PACKAGES\nSET_TIME_ZONE\nSET_WALLPAPER\nSET_WALLPAPER_HINTS\nTRANSMIT_IR\nUSE_FINGERPRINT\nVIBRATE\nWAKE_LOCK\nWRITE_SYNC_SETTINGS\nSET_ALARM\nINSTALL_SHORTCUT\nUNINSTALL_SHORTCUT\n</code></pre><h3 id=\"Dangerous-Permissions－危险权限\"><a href=\"#Dangerous-Permissions－危险权限\" class=\"headerlink\" title=\"Dangerous Permissions－危险权限\"></a>Dangerous Permissions－危险权限</h3><p>这些权限都是一些敏感性权限，一些广告平台或是流氓应用会用这些权限干一些坏坏的事情，因此系统将这类权限分了几个类别，<br>应用每次都要检测下是否有权限，没有的化必须弹出对话框申请，只要一个组别中的一个权限得到了授权，整个组的权限都会的到授权．</p>\n<p>这部分权限也是我们重点在Ｍ系统上关注和适配的部分．<br><a href=\"http://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\">官网权威说明</a>, 具体相关权限见图：</p>\n<p><img src=\"./danger.png\" alt=\"Dangerous Permission\"></p>\n<h3 id=\"Special-Permissions-特殊权限\"><a href=\"#Special-Permissions-特殊权限\" class=\"headerlink\" title=\"Special Permissions- 特殊权限\"></a>Special Permissions- 特殊权限</h3><p>SYSTEM_ALERT_WINDOW and WRITE_SETTINGS, 这两个权限比较特殊，不能通过代码申请方式获取，必须得用户打开软件设置页手动打开，才能授权．</p>\n<blockquote>\n<p>There are a couple of permissions that don’t behave like normal and dangerous permissions. SYSTEM_ALERT_WINDOW and WRITE_SETTINGS are particularly sensitive, so most apps should not use them. If an app needs one of these permissions, it must declare the permission in the manifest, and send an intent requesting the user’s authorization. The system responds to the intent by showing a detailed management screen to the user.</p>\n</blockquote>\n<p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW\">特殊权限官网推荐用法</a></p>\n<h2 id=\"实战Android-m权限申请用法\"><a href=\"#实战Android-m权限申请用法\" class=\"headerlink\" title=\"实战Android m权限申请用法\"></a>实战Android m权限申请用法</h2><p>我们对相关申请方法封装成了工具类，方便ｍ系统适配随时调用．</p>\n<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><p>compileSdkVersion and targetSdkVersion 设置为 23开始</p>\n<h3 id=\"调用相关权限\"><a href=\"#调用相关权限\" class=\"headerlink\" title=\"调用相关权限\"></a>调用相关权限</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">testAlertPermission</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    WindowManager mWindowManager = (WindowManager) getSystemService(</span><br><span class=\"line\">            Context.WINDOW_SERVICE);</span><br><span class=\"line\">    WindowManager.LayoutParams <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> WindowManager.LayoutParams();</span><br><span class=\"line\">    <span class=\"keyword\">params</span>.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;</span><br><span class=\"line\">    mWindowManager.addView(<span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>), <span class=\"keyword\">params</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限申请相关代码\"><a href=\"#权限申请相关代码\" class=\"headerlink\" title=\"权限申请相关代码\"></a>权限申请相关代码</h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here, thisActivity is the current activity</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class=\"line\">               Manifest.permission.READ_CONTACTS)</span><br><span class=\"line\">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Should we show an explanation?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class=\"line\">           Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class=\"line\">    <span class=\"comment\">// this thread waiting for the user's response! After the user</span></span><br><span class=\"line\">    <span class=\"comment\">// sees the explanation, try again to request the permission.</span></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; <span class=\"decorator\"><span class=\"keyword\">else</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// No explanation needed, we can request the permission.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ActivityCompat.requestPermissions(thisActivity,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class=\"line\">            MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class=\"line\">    <span class=\"comment\">// app-defined int constant. The callback method gets the</span></span><br><span class=\"line\">    <span class=\"comment\">// result of the request.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>requestPermissions方法调用时会弹出以下对话框．当用户点击拒绝并且勾选了不再弹出后这个对话框将不会再弹出，会直接拒绝掉该权限：<br><img src=\"./single_p.png\" alt=\"requestPermissions\"></p>\n<h4 id=\"shouldShowRequestPermissionRationale方法说明\"><a href=\"#shouldShowRequestPermissionRationale方法说明\" class=\"headerlink\" title=\"shouldShowRequestPermissionRationale方法说明\"></a>shouldShowRequestPermissionRationale方法说明</h4><p>用户拒绝，或是不在弹出，这个方法会返回false．<br><img src=\"./should.png\" alt=\"返回说明\"></p>\n<h4 id=\"Activity和Fragment的申请方法不一样，所以我们对方法做了包装如下：\"><a href=\"#Activity和Fragment的申请方法不一样，所以我们对方法做了包装如下：\" class=\"headerlink\" title=\"Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：\"></a>Ａctivity和Ｆragment的申请方法不一样，所以我们对方法做了包装如下：</h4><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TargetApi(Build.VERSION_CODES.M)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkPermission(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span> permission, <span class=\"built_in\">int</span> requestCode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!checkSelfPermissionWrapper(cxt, permission)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shouldShowRequestPermissionRationaleWrapper(cxt, permission)) &#123;</span><br><span class=\"line\">            requestPermissionsWrapper(cxt, <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;permission&#125;, requestCode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"should show rational\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> requestPermissionsWrapper(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span>[] permission, <span class=\"built_in\">int</span> requestCode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt;</span><br><span class=\"line\">        ActivityCompat.requestPermissions(activity, permission, requestCode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">        fragment.requestPermissions(permission, requestCode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限可以一次申请多个\"><a href=\"#权限可以一次申请多个\" class=\"headerlink\" title=\"权限可以一次申请多个\"></a>权限可以一次申请多个</h4><p>如图一次可以申请多个权限，但是用户还是一个一个授权．我们对该请求也做了封装：<br><img src=\"./mult_p1.png\" alt=\"multi\"> <img src=\"./mult_2.png\" alt=\"multi\"></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TargetApi(<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> checkSelfPermissionWrapper(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span> permission) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ActivityCompat.checkSelfPermission(activity,</span><br><span class=\"line\">                permission) == PackageManager.PERMISSION_GRANTED;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment.getActivity().checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span>[] checkSelfPermissionArray(<span class=\"keyword\">Object</span> cxt, <span class=\"keyword\">String</span>[] permission) &#123;</span><br><span class=\"line\">    ArrayList&lt;<span class=\"keyword\">String</span>&gt; permiList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">String</span> p : permission) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!checkSelfPermissionWrapper(cxt, p)) &#123;</span><br><span class=\"line\">            permiList.<span class=\"built_in\">add</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> permiList.toArray(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[permiList.<span class=\"built_in\">size</span>()]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权限返回处理\"><a href=\"#权限返回处理\" class=\"headerlink\" title=\"权限返回处理\"></a>权限返回处理</h3><p>在activity或fragment 中重写onRequestPermissionsResult，用户处理相关权限后会回调该方法，当活取到相关应用后可以继续原来的逻辑．</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"type\">Override</span></span><br><span class=\"line\">public <span class=\"built_in\">void</span> onRequestPermissionsResult(<span class=\"built_in\">int</span> requestCode, <span class=\"type\">String</span>[] permissions, <span class=\"built_in\">int</span>[] grantResults) &#123;</span><br><span class=\"line\">    switch (requestCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">PermissionUtils</span>.<span class=\"type\">PERMISSION_REQUEST_CODE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"type\">PermissionUtils</span>.verifyPermissions(grantResults)) &#123;</span><br><span class=\"line\">                // <span class=\"type\">Permission</span> <span class=\"type\">Granted</span></span><br><span class=\"line\">                // <span class=\"keyword\">do</span> you action</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                // <span class=\"type\">Permission</span> <span class=\"type\">Denied</span></span><br><span class=\"line\">                <span class=\"type\">Toast</span>.makeText(this, <span class=\"string\">\"WRITE_CONTACTS Denied\"</span>, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>)</span><br><span class=\"line\">                        .show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"keyword\">static</span> boolean verifyPermissions(<span class=\"built_in\">int</span>[] grantResults) &#123;</span><br><span class=\"line\">    // <span class=\"type\">At</span> least one <span class=\"literal\">result</span> must be checked.</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grantResults.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"type\">Verify</span> that each required permission has been granted, otherwise <span class=\"keyword\">return</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> <span class=\"literal\">result</span> : grantResults) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">result</span> != <span class=\"type\">PackageManager</span>.<span class=\"type\">PERMISSION_GRANTED</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"特殊权限的申请\"><a href=\"#特殊权限的申请\" class=\"headerlink\" title=\"特殊权限的申请\"></a>特殊权限的申请</h2><p>以前特殊权限说明地方已经支出，该类权限需求intent到具体的设置页面，让用户手动打开，才能授权．<br>同样重写onActivityResult方法，返回该页面时做回调处理．</p>\n<p><img src=\"./acces_in.png\" alt=\"sp\"></p>\n<p>系统弹出权限，相关代码实例：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 检测系统弹出权限</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> cxt</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> req</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span></span><br><span class=\"line\"> */</span></span><br><span class=\"line\"> <span class=\"meta\">@TargetApi</span>(<span class=\"number\">23</span>)</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">checkSettingAlertPermission</span><span class=\"params\">(Object cxt, <span class=\"keyword\">int</span> req)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (cxt <span class=\"keyword\">instanceof</span> Activity) &#123;</span><br><span class=\"line\">         Activity activity = (Activity) cxt;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(activity.getBaseContext())) &#123;</span><br><span class=\"line\">             Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</span><br><span class=\"line\">                     Uri.parse(<span class=\"string\">\"package:\"</span> + activity.getPackageName()));</span><br><span class=\"line\">             activity.startActivityForResult(intent, req);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(cxt <span class=\"keyword\">instanceof</span> Fragment)</span> </span>&#123;</span><br><span class=\"line\">         Fragment fragment = (Fragment) cxt;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Settings.canDrawOverlays(fragment.getActivity())) &#123;</span><br><span class=\"line\">             Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">             Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,</span><br><span class=\"line\">                     Uri.parse(<span class=\"string\">\"package:\"</span> + fragment.getActivity().getPackageName()));</span><br><span class=\"line\">             fragment.startActivityForResult(intent, req);</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (requestCode == PermissionUtils.PERMISSION_SETTING_REQ_CODE) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (Settings.canDrawOverlays(<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// do something</span></span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                     Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"not has setting permission\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                     finish();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>系统设置权限代码<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * WRITE_SETTINGS 权限</span><br><span class=\"line\"> * @param cxt</span><br><span class=\"line\"> * @param req</span><br><span class=\"line\"> * @return</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">@TargetApi(<span class=\"number\">23</span>)</span><br><span class=\"line\">public static boolean checkSettingSystemPermission(Object cxt, <span class=\"keyword\">int</span> req) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxt instanceof Activity) &#123;</span><br><span class=\"line\">        Activity activity = (Activity) cxt<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Settings.<span class=\"keyword\">System</span>.canWrite(activity)) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS)<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">\"package:\"</span> + activity.getPackageName()))<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">            activity.startActivityForResult(intent, req)<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cxt instanceof Fragment) &#123;</span><br><span class=\"line\">        Fragment fragment = (Fragment) cxt<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Settings.<span class=\"keyword\">System</span>.canWrite(fragment.getContext())) &#123;</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"Setting not permission\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS)<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.setData(Uri.parse(<span class=\"string\">\"package:\"</span> + fragment.getContext().getPackageName()))<span class=\"comment\">;</span></span><br><span class=\"line\">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">            fragment.startActivityForResult(intent, req)<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        throw new RuntimeException(<span class=\"string\">\"cxt is net a activity or fragment\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> true<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Android 6.0系统权限管理是安卓系统的一大进步，为安卓手机用户提供了一个安全干净系统前提，鉴于google对未授权应用的奔溃方式处理，<br>安卓开发者应当尽早适配6.0系统，提示软件体验．</p>\n<p>实战整体代码已提交到<a href=\"https://github.com/CankingApp/PermissionDemo\">GitHub</a>,欢迎下载交流学习～</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>Copyright 2015 ChangXing\n\nLicensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"title":"Android Theme-安卓样式换肤实践方案","date":"2016-03-30T12:04:03.000Z","_content":"所谓的主题切换，就是能够根据不同的设定，呈现不同风格的界面给用户，也就是所谓的换肤。 本文主要总结了目前作者所知的两种实现方案.\n\n![安卓换肤](http://img.blog.csdn.net/20160331180056383)\n\n<!--more-->\n\n\n## 概述 \n\n一直以来,认为App换肤是件很酷的东西,不同用户可以自己打造喜欢的颜色,类似墨迹,QQ,或是软件夜间模式,给用户很酷的体验.\n\n在写这个换肤实践方案之前,我也参考了其他人的一些总结,基本上大家都是从这几个思路去实现, 如果出现有误或者不够详细的地方，希望大家提出意见或者自行进行扩展.\n\n基本上换肤实现思路有两类: 1):应用内自定义style. 2):外部加载(apk,压缩资源,插件等) . 本文重要讲内置style及实现的相关步骤, 外部加载只不过是中间加了一部分数据下载和处理,有兴趣的同学自行baidu/google.\n\n## 内置Style\n\n### 1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml\n\n```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<resources>\n\t    <attr name=\"mainColor\" format=\"color\" />\n\t    <attr name=\"mainPrimaryTextColor\" format=\"color\" />\n\t    <attr name=\"mainPrimaryLightTextColor\" format=\"color\" />\n\t    <attr name=\"mainBgColor\" format=\"color\" />\n\t</resources>\n```\nattr里可以定义各种属性类型，如color、float、integer、boolean、dimension（sp、dp/dip、px、pt...）、reference（指向本地资源）等等。\n\n### 2.定义主题\n\n我们需要在资源文件中定义若干套主题。并且在主题中设置各个属性的值。本例子中,重要是针对软件颜色做了不同样式的定义.\n\n```\n    <style name=\"AppTheme.Base.Green\">\n        <item name=\"colorPrimary\">#4CAF50</item>\n        <item name=\"colorPrimaryDark\">#388E3C</item>\n        <item name=\"colorAccent\">#9E9E9E</item>\n        <item name=\"mainBgColor\">#C8E6C9</item>\n        <item name=\"mainColor\">#4CAF50</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Blue\">\n        <item name=\"colorPrimary\">#2196F3</item>\n        <item name=\"colorPrimaryDark\">#1976D2</item>\n        <item name=\"colorAccent\">#607D8B</item>\n        <item name=\"mainBgColor\">#BBDEFB</item>\n        <item name=\"mainColor\">#2196F3</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Purple\">\n        <item name=\"colorPrimary\">#673AB7</item>\n        <item name=\"colorPrimaryDark\">#512DA8</item>\n        <item name=\"colorAccent\">#795548</item>\n        <item name=\"mainBgColor\">#D1C4E9</item>\n        <item name=\"mainColor\">#673AB7</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Grey\">\n        <item name=\"colorPrimary\">#607D8B</item>\n        <item name=\"colorPrimaryDark\">#455A64</item>\n        <item name=\"colorAccent\">#FFC107</item>\n        <item name=\"mainBgColor\">#CFD8DC</item>\n        <item name=\"mainColor\">#607D8B</item>\n    </style>\n```\n\n### 3.布局文件中使用\n\n资源定义好后,需要订制样式的控件需要引用我们自定义的属性,使用方法如下:\n\n```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<android.support.v7.widget.Toolbar xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\t    android:id=\"@+id/toolbar\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:paddingTop=\"@dimen/toolbar_padding_top\"\n\t    android:background=\"?attr/mainColor\"\n\t    android:minHeight=\"?attr/actionBarSize\"\n\t    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n\t    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n```\n\n这里只列出了tool应用颜色的例子*android:background=\"?attr/mainColor\"* , 当然还可以使用?attr/colorValue、?attr/stringValue与?attr/referenceValue来引用主题中的颜色值、字符串以及图片。\n\n### 4.设置主题及布局文件\n\n布局文件与主题都写好了，接下来我们就要在Activity的onCreate方法里的setContextView前使用了。这里最好写在BaseActivity中,更具share保存的样式值,来动态设置theme\n\n```\n    private void setBaseTheme() {\n        SharedPreferences sharedPreferences = getSharedPreferences(\n                Consts.SHARE_NAME, MODE_PRIVATE);\n        int themeType = sharedPreferences.getInt(\"theme_type\", 0);\n        int themeId;\n        switch (themeType) {\n            case THEME_GREEN:\n                themeId = R.style.AppTheme_Base_Green;\n                break;\n            case ThEME_BLUE:\n                themeId = R.style.AppTheme_Base_Blue;\n                break;\n            case THEME_ORANGE:\n                themeId = R.style.AppTheme_Base_Orange;\n                break;\n            case THEME_TEAL:\n                themeId = R.style.AppTheme_Base_Teal;\n                break;\n            case THEME_BROWN:\n                themeId = R.style.AppTheme_Base_Brown;\n                break;\n            case THEME_GREY:\n                themeId = R.style.AppTheme_Base_Grey;\n                break;\n            case THEME_PURPLE:\n                themeId = R.style.AppTheme_Base_Purple;\n                break;\n            default:\n                themeId = R.style.AppTheme_Base_Default;\n        }\n        setTheme(themeId);\n    }\n\n```\n\n### 5.样式生效方法\n\n谈到生效方法,大家会有很多说法,也有很多思路, 当然直接设置后立即生效体验会好点, 但是系统限制, 正常的化需要重启activity.\n\n#### 1自定义需要样式变换的所有View, 不需要重启\n\n代表性项目 [MultipleTheme](https://github.com/dersoncheng/MultipleTheme), 为了不重启activity, 自定义了所有需要样式变动的View, 原理为通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。方式臃肿粗暴, 虽然是不需要重启activity,还可以针对每个view变换过程做动画,但是个人不推荐.\n\n#### 2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作\n\n这种也不用重启activity, 代表性项目 [Colorful](https://github.com/bboyfeiyu/Colorful),虽然对比上一种方式从业务逻辑脱了了一部分,但还是有点繁杂,需要对每个控件做 Setter\n\n\n```\n\tListView  mNewsListView = (ListView) findViewById(R.id.listview);\n\n\t// 为ListView设置要修改的属性,在这里没有对ListView本身的属性做修改\n\tViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView, 0);\n\t// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\n\tlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n\n\t// 构建Colorful对象\n\tColorful mColorful = new Colorful.Builder(this)\n\t\t.backgroundDrawable(R.id.root_view, R.attr.root_view_bg) // 设置view的背景图片\n\t\t.backgroundColor(R.id.change_btn, R.attr.btn_bg) // 设置按钮的背景色\n\t\t.textColor(R.id.textview, R.attr.text_color) // 设置文本颜色\n\t\t.setter(listViewSetter)           // 手动设置setter\n\t\t.create(); \n```\n\n#### 3乖乖重启activity\n\n既然这个多方法都不能完美去完成项目, 那我们不如按照官方方重启activity,为了美化转变效果,可以正对activity做一些动画,效果也是不错, 如下视频.\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"http://v.qq.com/iframe/player.html?vid=q0191cq7h61&tiny=0&auto=0\" allowfullscreen></iframe>\n\n\n### 6.代码中如何动态活取自定义属性值\n\n有两种方法如下:\n\n\n```\n        TypedArray a = obtainStyledAttributes(new int[]{R.attr.mainBgColor, \n\tR.attr.mainColor});\n\tint color = a.getColor(0, Color.BLACK)\n```\n\n```\n\tTypedValue typedValue = new TypedValue();\n\tnewTheme.resolveAttribute(mAttrResId, typedValue, true)\n\t\n```\n\n## 聊聊apk方式的主题实现\n\nAPK主题方案和主题包保存到SD卡上(墨迹,搜狗实现方式)的方案类似,只不过是apk压缩格式,一些资源的引用可以调用系统api。\n\nAPK主题方案的基本思路是：在Android中，所有的资源都是基于包的。资源以id进行标识，在同一个应用中，每个资源都有唯一标识。但在不同的应用中，可以有相同的id。因此，只要获取到了其他应用的Context对象，就可以通过它的getRsources获取到其绑定的资源对象。然后，就可以使用Resources的getXXX方法获取字符串、颜色、dimension、图片等。\n要想获取其他应用的Context对象，Android已经为我们提供好了接口。那就是android.content.ContextWrapper.createPackageContext(String packageName, int flags)方法。\n\n\n```\n\ttry { \n            String remotePackage = \"com.your.themepackagename\";  \n            Context remoteContext = createPackageContext(remotePackage,  \n                    CONTEXT_IGNORE_SECURITY);  \n            Resources remoteResources = remoteContext.getResources();  \n            text.setText(remoteResources.getText(remoteResources.getIdentifier(\"application_name\", \"string\", remotePackage)));  \n            color.setTextColor(remoteResources.getColor(remoteResources.getIdentifier(\"color_name\", \"color\", remotePackage)));  \n            image.setImageDrawable(remoteResources.getDrawable(remoteResources.getIdentifier(\"ic_icon\", \"drawable\", remotePackage)));  \n        } catch (NameNotFoundException e) {  \n            e.printStackTrace();  \n        }     \t\n```\n\n***\n除了压缩包,apk包等实现方式,还可以考虑插件实现方式,目的都是更好的解耦,更方便的迭代项目.\n实践源码[Github](https://github.com/CankingApp/AndroidTheme)\n\n","source":"_posts/android-theme.md","raw":"---\ntitle: Android Theme-安卓样式换肤实践方案\ndate: 2016-03-30 20:04:03\ncategories: android \ntags: theme\n---\n所谓的主题切换，就是能够根据不同的设定，呈现不同风格的界面给用户，也就是所谓的换肤。 本文主要总结了目前作者所知的两种实现方案.\n\n![安卓换肤](http://img.blog.csdn.net/20160331180056383)\n\n<!--more-->\n\n\n## 概述 \n\n一直以来,认为App换肤是件很酷的东西,不同用户可以自己打造喜欢的颜色,类似墨迹,QQ,或是软件夜间模式,给用户很酷的体验.\n\n在写这个换肤实践方案之前,我也参考了其他人的一些总结,基本上大家都是从这几个思路去实现, 如果出现有误或者不够详细的地方，希望大家提出意见或者自行进行扩展.\n\n基本上换肤实现思路有两类: 1):应用内自定义style. 2):外部加载(apk,压缩资源,插件等) . 本文重要讲内置style及实现的相关步骤, 外部加载只不过是中间加了一部分数据下载和处理,有兴趣的同学自行baidu/google.\n\n## 内置Style\n\n### 1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml\n\n```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<resources>\n\t    <attr name=\"mainColor\" format=\"color\" />\n\t    <attr name=\"mainPrimaryTextColor\" format=\"color\" />\n\t    <attr name=\"mainPrimaryLightTextColor\" format=\"color\" />\n\t    <attr name=\"mainBgColor\" format=\"color\" />\n\t</resources>\n```\nattr里可以定义各种属性类型，如color、float、integer、boolean、dimension（sp、dp/dip、px、pt...）、reference（指向本地资源）等等。\n\n### 2.定义主题\n\n我们需要在资源文件中定义若干套主题。并且在主题中设置各个属性的值。本例子中,重要是针对软件颜色做了不同样式的定义.\n\n```\n    <style name=\"AppTheme.Base.Green\">\n        <item name=\"colorPrimary\">#4CAF50</item>\n        <item name=\"colorPrimaryDark\">#388E3C</item>\n        <item name=\"colorAccent\">#9E9E9E</item>\n        <item name=\"mainBgColor\">#C8E6C9</item>\n        <item name=\"mainColor\">#4CAF50</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Blue\">\n        <item name=\"colorPrimary\">#2196F3</item>\n        <item name=\"colorPrimaryDark\">#1976D2</item>\n        <item name=\"colorAccent\">#607D8B</item>\n        <item name=\"mainBgColor\">#BBDEFB</item>\n        <item name=\"mainColor\">#2196F3</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Purple\">\n        <item name=\"colorPrimary\">#673AB7</item>\n        <item name=\"colorPrimaryDark\">#512DA8</item>\n        <item name=\"colorAccent\">#795548</item>\n        <item name=\"mainBgColor\">#D1C4E9</item>\n        <item name=\"mainColor\">#673AB7</item>\n    </style>\n\n    <style name=\"AppTheme.Base.Grey\">\n        <item name=\"colorPrimary\">#607D8B</item>\n        <item name=\"colorPrimaryDark\">#455A64</item>\n        <item name=\"colorAccent\">#FFC107</item>\n        <item name=\"mainBgColor\">#CFD8DC</item>\n        <item name=\"mainColor\">#607D8B</item>\n    </style>\n```\n\n### 3.布局文件中使用\n\n资源定义好后,需要订制样式的控件需要引用我们自定义的属性,使用方法如下:\n\n```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<android.support.v7.widget.Toolbar xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\t    android:id=\"@+id/toolbar\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"wrap_content\"\n\t    android:paddingTop=\"@dimen/toolbar_padding_top\"\n\t    android:background=\"?attr/mainColor\"\n\t    android:minHeight=\"?attr/actionBarSize\"\n\t    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n\t    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n```\n\n这里只列出了tool应用颜色的例子*android:background=\"?attr/mainColor\"* , 当然还可以使用?attr/colorValue、?attr/stringValue与?attr/referenceValue来引用主题中的颜色值、字符串以及图片。\n\n### 4.设置主题及布局文件\n\n布局文件与主题都写好了，接下来我们就要在Activity的onCreate方法里的setContextView前使用了。这里最好写在BaseActivity中,更具share保存的样式值,来动态设置theme\n\n```\n    private void setBaseTheme() {\n        SharedPreferences sharedPreferences = getSharedPreferences(\n                Consts.SHARE_NAME, MODE_PRIVATE);\n        int themeType = sharedPreferences.getInt(\"theme_type\", 0);\n        int themeId;\n        switch (themeType) {\n            case THEME_GREEN:\n                themeId = R.style.AppTheme_Base_Green;\n                break;\n            case ThEME_BLUE:\n                themeId = R.style.AppTheme_Base_Blue;\n                break;\n            case THEME_ORANGE:\n                themeId = R.style.AppTheme_Base_Orange;\n                break;\n            case THEME_TEAL:\n                themeId = R.style.AppTheme_Base_Teal;\n                break;\n            case THEME_BROWN:\n                themeId = R.style.AppTheme_Base_Brown;\n                break;\n            case THEME_GREY:\n                themeId = R.style.AppTheme_Base_Grey;\n                break;\n            case THEME_PURPLE:\n                themeId = R.style.AppTheme_Base_Purple;\n                break;\n            default:\n                themeId = R.style.AppTheme_Base_Default;\n        }\n        setTheme(themeId);\n    }\n\n```\n\n### 5.样式生效方法\n\n谈到生效方法,大家会有很多说法,也有很多思路, 当然直接设置后立即生效体验会好点, 但是系统限制, 正常的化需要重启activity.\n\n#### 1自定义需要样式变换的所有View, 不需要重启\n\n代表性项目 [MultipleTheme](https://github.com/dersoncheng/MultipleTheme), 为了不重启activity, 自定义了所有需要样式变动的View, 原理为通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。方式臃肿粗暴, 虽然是不需要重启activity,还可以针对每个view变换过程做动画,但是个人不推荐.\n\n#### 2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作\n\n这种也不用重启activity, 代表性项目 [Colorful](https://github.com/bboyfeiyu/Colorful),虽然对比上一种方式从业务逻辑脱了了一部分,但还是有点繁杂,需要对每个控件做 Setter\n\n\n```\n\tListView  mNewsListView = (ListView) findViewById(R.id.listview);\n\n\t// 为ListView设置要修改的属性,在这里没有对ListView本身的属性做修改\n\tViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView, 0);\n\t// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性\n\tlistViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);\n\n\n\t// 构建Colorful对象\n\tColorful mColorful = new Colorful.Builder(this)\n\t\t.backgroundDrawable(R.id.root_view, R.attr.root_view_bg) // 设置view的背景图片\n\t\t.backgroundColor(R.id.change_btn, R.attr.btn_bg) // 设置按钮的背景色\n\t\t.textColor(R.id.textview, R.attr.text_color) // 设置文本颜色\n\t\t.setter(listViewSetter)           // 手动设置setter\n\t\t.create(); \n```\n\n#### 3乖乖重启activity\n\n既然这个多方法都不能完美去完成项目, 那我们不如按照官方方重启activity,为了美化转变效果,可以正对activity做一些动画,效果也是不错, 如下视频.\n\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"http://v.qq.com/iframe/player.html?vid=q0191cq7h61&tiny=0&auto=0\" allowfullscreen></iframe>\n\n\n### 6.代码中如何动态活取自定义属性值\n\n有两种方法如下:\n\n\n```\n        TypedArray a = obtainStyledAttributes(new int[]{R.attr.mainBgColor, \n\tR.attr.mainColor});\n\tint color = a.getColor(0, Color.BLACK)\n```\n\n```\n\tTypedValue typedValue = new TypedValue();\n\tnewTheme.resolveAttribute(mAttrResId, typedValue, true)\n\t\n```\n\n## 聊聊apk方式的主题实现\n\nAPK主题方案和主题包保存到SD卡上(墨迹,搜狗实现方式)的方案类似,只不过是apk压缩格式,一些资源的引用可以调用系统api。\n\nAPK主题方案的基本思路是：在Android中，所有的资源都是基于包的。资源以id进行标识，在同一个应用中，每个资源都有唯一标识。但在不同的应用中，可以有相同的id。因此，只要获取到了其他应用的Context对象，就可以通过它的getRsources获取到其绑定的资源对象。然后，就可以使用Resources的getXXX方法获取字符串、颜色、dimension、图片等。\n要想获取其他应用的Context对象，Android已经为我们提供好了接口。那就是android.content.ContextWrapper.createPackageContext(String packageName, int flags)方法。\n\n\n```\n\ttry { \n            String remotePackage = \"com.your.themepackagename\";  \n            Context remoteContext = createPackageContext(remotePackage,  \n                    CONTEXT_IGNORE_SECURITY);  \n            Resources remoteResources = remoteContext.getResources();  \n            text.setText(remoteResources.getText(remoteResources.getIdentifier(\"application_name\", \"string\", remotePackage)));  \n            color.setTextColor(remoteResources.getColor(remoteResources.getIdentifier(\"color_name\", \"color\", remotePackage)));  \n            image.setImageDrawable(remoteResources.getDrawable(remoteResources.getIdentifier(\"ic_icon\", \"drawable\", remotePackage)));  \n        } catch (NameNotFoundException e) {  \n            e.printStackTrace();  \n        }     \t\n```\n\n***\n除了压缩包,apk包等实现方式,还可以考虑插件实现方式,目的都是更好的解耦,更方便的迭代项目.\n实践源码[Github](https://github.com/CankingApp/AndroidTheme)\n\n","slug":"android-theme","published":1,"updated":"2016-11-08T04:31:55.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlr0007a47542thkwn5","content":"<p>所谓的主题切换，就是能够根据不同的设定，呈现不同风格的界面给用户，也就是所谓的换肤。 本文主要总结了目前作者所知的两种实现方案.</p>\n<p><img src=\"http://img.blog.csdn.net/20160331180056383\" alt=\"安卓换肤\"></p>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>一直以来,认为App换肤是件很酷的东西,不同用户可以自己打造喜欢的颜色,类似墨迹,QQ,或是软件夜间模式,给用户很酷的体验.</p>\n<p>在写这个换肤实践方案之前,我也参考了其他人的一些总结,基本上大家都是从这几个思路去实现, 如果出现有误或者不够详细的地方，希望大家提出意见或者自行进行扩展.</p>\n<p>基本上换肤实现思路有两类: 1):应用内自定义style. 2):外部加载(apk,压缩资源,插件等) . 本文重要讲内置style及实现的相关步骤, 外部加载只不过是中间加了一部分数据下载和处理,有兴趣的同学自行baidu/google.</p>\n<h2 id=\"内置Style\"><a href=\"#内置Style\" class=\"headerlink\" title=\"内置Style\"></a>内置Style</h2><h3 id=\"1-自定义软件中换肤需要统一处理的属性名-如下-atts-xml\"><a href=\"#1-自定义软件中换肤需要统一处理的属性名-如下-atts-xml\" class=\"headerlink\" title=\"1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml\"></a>1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainPrimaryTextColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainPrimaryLightTextColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainBgColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>attr里可以定义各种属性类型，如color、float、integer、boolean、dimension（sp、dp/dip、px、pt…）、reference（指向本地资源）等等。</p>\n<h3 id=\"2-定义主题\"><a href=\"#2-定义主题\" class=\"headerlink\" title=\"2.定义主题\"></a>2.定义主题</h3><p>我们需要在资源文件中定义若干套主题。并且在主题中设置各个属性的值。本例子中,重要是针对软件颜色做了不同样式的定义.</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Green\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#4CAF50&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#388E3C&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#9E9E9E&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#C8E6C9&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#4CAF50&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Blue\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#2196F3&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#1976D2&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#BBDEFB&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#2196F3&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Purple\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#673AB7&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#512DA8&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#795548&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#D1C4E9&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#673AB7&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Grey\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#455A64&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#FFC107&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#CFD8DC&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-布局文件中使用\"><a href=\"#3-布局文件中使用\" class=\"headerlink\" title=\"3.布局文件中使用\"></a>3.布局文件中使用</h3><p>资源定义好后,需要订制样式的控件需要引用我们自定义的属性,使用方法如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/toolbar_padding_top\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/mainColor\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">    <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></span><br><span class=\"line\">    <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里只列出了tool应用颜色的例子<em>android:background=”?attr/mainColor”</em> , 当然还可以使用?attr/colorValue、?attr/stringValue与?attr/referenceValue来引用主题中的颜色值、字符串以及图片。</p>\n<h3 id=\"4-设置主题及布局文件\"><a href=\"#4-设置主题及布局文件\" class=\"headerlink\" title=\"4.设置主题及布局文件\"></a>4.设置主题及布局文件</h3><p>布局文件与主题都写好了，接下来我们就要在Activity的onCreate方法里的setContextView前使用了。这里最好写在BaseActivity中,更具share保存的样式值,来动态设置theme</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void setBaseTheme() &#123;</span><br><span class=\"line\">    SharedPreferences sharedPreferences = getSharedPreferences(</span><br><span class=\"line\">            Consts.SHARE_NAME, MODE_PRIVATE)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> themeType = sharedPreferences.getInt(<span class=\"string\">\"theme_type\"</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> themeId<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (themeType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_GREEN:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Green<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> ThEME_BLUE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Blue<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_ORANGE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Orange<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_TEAL:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Teal<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_BROWN:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Brown<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_GREY:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Grey<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_PURPLE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Purple<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Default<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTheme(themeId)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-样式生效方法\"><a href=\"#5-样式生效方法\" class=\"headerlink\" title=\"5.样式生效方法\"></a>5.样式生效方法</h3><p>谈到生效方法,大家会有很多说法,也有很多思路, 当然直接设置后立即生效体验会好点, 但是系统限制, 正常的化需要重启activity.</p>\n<h4 id=\"1自定义需要样式变换的所有View-不需要重启\"><a href=\"#1自定义需要样式变换的所有View-不需要重启\" class=\"headerlink\" title=\"1自定义需要样式变换的所有View, 不需要重启\"></a>1自定义需要样式变换的所有View, 不需要重启</h4><p>代表性项目 <a href=\"https://github.com/dersoncheng/MultipleTheme\" target=\"_blank\" rel=\"external\">MultipleTheme</a>, 为了不重启activity, 自定义了所有需要样式变动的View, 原理为通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。方式臃肿粗暴, 虽然是不需要重启activity,还可以针对每个view变换过程做动画,但是个人不推荐.</p>\n<h4 id=\"2动态活取每个需要样式变更控件-活取atts值-对每个控件操作\"><a href=\"#2动态活取每个需要样式变更控件-活取atts值-对每个控件操作\" class=\"headerlink\" title=\"2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作\"></a>2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作</h4><p>这种也不用重启activity, 代表性项目 <a href=\"https://github.com/bboyfeiyu/Colorful\" target=\"_blank\" rel=\"external\">Colorful</a>,虽然对比上一种方式从业务逻辑脱了了一部分,但还是有点繁杂,需要对每个控件做 Setter</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListView  mNewsListView = (ListView) findViewById(<span class=\"keyword\">R</span>.id.listview)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为ListView设置要修改的属性,在这里没有对ListView本身的属性做修改</span></span><br><span class=\"line\">ViewGroupSetter listViewSetter = <span class=\"keyword\">new</span> ViewGroupSetter(mNewsListView, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性</span></span><br><span class=\"line\">listViewSetter.childViewTextColor(<span class=\"keyword\">R</span>.id.news_title, <span class=\"keyword\">R</span>.attr.text_color)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建Colorful对象</span></span><br><span class=\"line\">Colorful mColorful = <span class=\"keyword\">new</span> Colorful.Builder(this)</span><br><span class=\"line\">\t.backgroundDrawable(<span class=\"keyword\">R</span>.id.root_view, <span class=\"keyword\">R</span>.attr.root_view_bg) <span class=\"comment\">// 设置view的背景图片</span></span><br><span class=\"line\">\t.backgroundColor(<span class=\"keyword\">R</span>.id.change_btn, <span class=\"keyword\">R</span>.attr.btn_bg) <span class=\"comment\">// 设置按钮的背景色</span></span><br><span class=\"line\">\t.textColor(<span class=\"keyword\">R</span>.id.textview, <span class=\"keyword\">R</span>.attr.text_color) <span class=\"comment\">// 设置文本颜色</span></span><br><span class=\"line\">\t.setter(listViewSetter)           <span class=\"comment\">// 手动设置setter</span></span><br><span class=\"line\">\t.create()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3乖乖重启activity\"><a href=\"#3乖乖重启activity\" class=\"headerlink\" title=\"3乖乖重启activity\"></a>3乖乖重启activity</h4><p>既然这个多方法都不能完美去完成项目, 那我们不如按照官方方重启activity,为了美化转变效果,可以正对activity做一些动画,效果也是不错, 如下视频.</p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"http://v.qq.com/iframe/player.html?vid=q0191cq7h61&tiny=0&auto=0\" allowfullscreen></iframe>\n\n\n<h3 id=\"6-代码中如何动态活取自定义属性值\"><a href=\"#6-代码中如何动态活取自定义属性值\" class=\"headerlink\" title=\"6.代码中如何动态活取自定义属性值\"></a>6.代码中如何动态活取自定义属性值</h3><p>有两种方法如下:</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       TypedArray a = obtainStyledAttributes(new <span class=\"keyword\">int</span>[]&#123;R.attr.mainBgColor, </span><br><span class=\"line\">R.attr.mainColor&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">color</span> = a.getColor(<span class=\"number\">0</span>, <span class=\"keyword\">Color</span>.BLACK)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TypedValue</span> typedValue = new <span class=\"type\">TypedValue</span>();</span><br><span class=\"line\"><span class=\"title\">newTheme</span>.resolveAttribute(mAttrResId, typedValue, true)</span><br></pre></td></tr></table></figure>\n<h2 id=\"聊聊apk方式的主题实现\"><a href=\"#聊聊apk方式的主题实现\" class=\"headerlink\" title=\"聊聊apk方式的主题实现\"></a>聊聊apk方式的主题实现</h2><p>APK主题方案和主题包保存到SD卡上(墨迹,搜狗实现方式)的方案类似,只不过是apk压缩格式,一些资源的引用可以调用系统api。</p>\n<p>APK主题方案的基本思路是：在Android中，所有的资源都是基于包的。资源以id进行标识，在同一个应用中，每个资源都有唯一标识。但在不同的应用中，可以有相同的id。因此，只要获取到了其他应用的Context对象，就可以通过它的getRsources获取到其绑定的资源对象。然后，就可以使用Resources的getXXX方法获取字符串、颜色、dimension、图片等。<br>要想获取其他应用的Context对象，Android已经为我们提供好了接口。那就是android.content.ContextWrapper.createPackageContext(String packageName, int flags)方法。</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">           String remotePackage = <span class=\"string\">\"com.your.themepackagename\"</span><span class=\"comment\">;  </span></span><br><span class=\"line\">           Context remoteContext = createPackageContext(remotePackage,  </span><br><span class=\"line\">                   CONTEXT_IGNORE_SECURITY)<span class=\"comment\">;  </span></span><br><span class=\"line\">           Resources remoteResources = remoteContext.getResources()<span class=\"comment\">;  </span></span><br><span class=\"line\">           text.setText(remoteResources.getText(remoteResources.getIdentifier(<span class=\"string\">\"application_name\"</span>, <span class=\"string\">\"string\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">           <span class=\"keyword\">color</span>.setTextColor(remoteResources.getColor(remoteResources.getIdentifier(<span class=\"string\">\"color_name\"</span>, <span class=\"string\">\"color\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">           image.setImageDrawable(remoteResources.getDrawable(remoteResources.getIdentifier(<span class=\"string\">\"ic_icon\"</span>, <span class=\"string\">\"drawable\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">       &#125; catch (NameNotFoundException e) &#123;  </span><br><span class=\"line\">           e.printStackTrace()<span class=\"comment\">;  </span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>除了压缩包,apk包等实现方式,还可以考虑插件实现方式,目的都是更好的解耦,更方便的迭代项目.<br>实践源码<a href=\"https://github.com/CankingApp/AndroidTheme\" target=\"_blank\" rel=\"external\">Github</a></p>\n","excerpt":"<p>所谓的主题切换，就是能够根据不同的设定，呈现不同风格的界面给用户，也就是所谓的换肤。 本文主要总结了目前作者所知的两种实现方案.</p>\n<p><img src=\"http://img.blog.csdn.net/20160331180056383\" alt=\"安卓换肤\"></p>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>一直以来,认为App换肤是件很酷的东西,不同用户可以自己打造喜欢的颜色,类似墨迹,QQ,或是软件夜间模式,给用户很酷的体验.</p>\n<p>在写这个换肤实践方案之前,我也参考了其他人的一些总结,基本上大家都是从这几个思路去实现, 如果出现有误或者不够详细的地方，希望大家提出意见或者自行进行扩展.</p>\n<p>基本上换肤实现思路有两类: 1):应用内自定义style. 2):外部加载(apk,压缩资源,插件等) . 本文重要讲内置style及实现的相关步骤, 外部加载只不过是中间加了一部分数据下载和处理,有兴趣的同学自行baidu/google.</p>\n<h2 id=\"内置Style\"><a href=\"#内置Style\" class=\"headerlink\" title=\"内置Style\"></a>内置Style</h2><h3 id=\"1-自定义软件中换肤需要统一处理的属性名-如下-atts-xml\"><a href=\"#1-自定义软件中换肤需要统一处理的属性名-如下-atts-xml\" class=\"headerlink\" title=\"1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml\"></a>1.自定义软件中换肤需要统一处理的属性名,如下 atts.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainPrimaryTextColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainPrimaryLightTextColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainBgColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>attr里可以定义各种属性类型，如color、float、integer、boolean、dimension（sp、dp/dip、px、pt…）、reference（指向本地资源）等等。</p>\n<h3 id=\"2-定义主题\"><a href=\"#2-定义主题\" class=\"headerlink\" title=\"2.定义主题\"></a>2.定义主题</h3><p>我们需要在资源文件中定义若干套主题。并且在主题中设置各个属性的值。本例子中,重要是针对软件颜色做了不同样式的定义.</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Green\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#4CAF50&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#388E3C&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#9E9E9E&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#C8E6C9&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#4CAF50&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Blue\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#2196F3&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#1976D2&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#BBDEFB&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#2196F3&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Purple\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#673AB7&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#512DA8&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#795548&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#D1C4E9&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#673AB7&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style <span class=\"built_in\">name</span>=<span class=\"string\">\"AppTheme.Base.Grey\"</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;<span class=\"comment\">#455A64&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;<span class=\"comment\">#FFC107&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainBgColor\"</span>&gt;<span class=\"comment\">#CFD8DC&lt;/item&gt;</span></span><br><span class=\"line\">    &lt;<span class=\"built_in\">item</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"mainColor\"</span>&gt;<span class=\"comment\">#607D8B&lt;/item&gt;</span></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-布局文件中使用\"><a href=\"#3-布局文件中使用\" class=\"headerlink\" title=\"3.布局文件中使用\"></a>3.布局文件中使用</h3><p>资源定义好后,需要订制样式的控件需要引用我们自定义的属性,使用方法如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"@dimen/toolbar_padding_top\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/mainColor\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></span><br><span class=\"line\">    <span class=\"attr\">app:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></span><br><span class=\"line\">    <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里只列出了tool应用颜色的例子<em>android:background=”?attr/mainColor”</em> , 当然还可以使用?attr/colorValue、?attr/stringValue与?attr/referenceValue来引用主题中的颜色值、字符串以及图片。</p>\n<h3 id=\"4-设置主题及布局文件\"><a href=\"#4-设置主题及布局文件\" class=\"headerlink\" title=\"4.设置主题及布局文件\"></a>4.设置主题及布局文件</h3><p>布局文件与主题都写好了，接下来我们就要在Activity的onCreate方法里的setContextView前使用了。这里最好写在BaseActivity中,更具share保存的样式值,来动态设置theme</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void setBaseTheme() &#123;</span><br><span class=\"line\">    SharedPreferences sharedPreferences = getSharedPreferences(</span><br><span class=\"line\">            Consts.SHARE_NAME, MODE_PRIVATE)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> themeType = sharedPreferences.getInt(<span class=\"string\">\"theme_type\"</span>, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> themeId<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (themeType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_GREEN:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Green<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> ThEME_BLUE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Blue<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_ORANGE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Orange<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_TEAL:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Teal<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_BROWN:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Brown<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_GREY:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Grey<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> THEME_PURPLE:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Purple<span class=\"comment\">;</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span><span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            themeId = R.style.AppTheme_Base_Default<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTheme(themeId)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-样式生效方法\"><a href=\"#5-样式生效方法\" class=\"headerlink\" title=\"5.样式生效方法\"></a>5.样式生效方法</h3><p>谈到生效方法,大家会有很多说法,也有很多思路, 当然直接设置后立即生效体验会好点, 但是系统限制, 正常的化需要重启activity.</p>\n<h4 id=\"1自定义需要样式变换的所有View-不需要重启\"><a href=\"#1自定义需要样式变换的所有View-不需要重启\" class=\"headerlink\" title=\"1自定义需要样式变换的所有View, 不需要重启\"></a>1自定义需要样式变换的所有View, 不需要重启</h4><p>代表性项目 <a href=\"https://github.com/dersoncheng/MultipleTheme\">MultipleTheme</a>, 为了不重启activity, 自定义了所有需要样式变动的View, 原理为通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。方式臃肿粗暴, 虽然是不需要重启activity,还可以针对每个view变换过程做动画,但是个人不推荐.</p>\n<h4 id=\"2动态活取每个需要样式变更控件-活取atts值-对每个控件操作\"><a href=\"#2动态活取每个需要样式变更控件-活取atts值-对每个控件操作\" class=\"headerlink\" title=\"2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作\"></a>2动态活取每个需要样式变更控件, 活取atts值,对每个控件操作</h4><p>这种也不用重启activity, 代表性项目 <a href=\"https://github.com/bboyfeiyu/Colorful\">Colorful</a>,虽然对比上一种方式从业务逻辑脱了了一部分,但还是有点繁杂,需要对每个控件做 Setter</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListView  mNewsListView = (ListView) findViewById(<span class=\"keyword\">R</span>.id.listview)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为ListView设置要修改的属性,在这里没有对ListView本身的属性做修改</span></span><br><span class=\"line\">ViewGroupSetter listViewSetter = <span class=\"keyword\">new</span> ViewGroupSetter(mNewsListView, <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"comment\">// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性</span></span><br><span class=\"line\">listViewSetter.childViewTextColor(<span class=\"keyword\">R</span>.id.news_title, <span class=\"keyword\">R</span>.attr.text_color)<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建Colorful对象</span></span><br><span class=\"line\">Colorful mColorful = <span class=\"keyword\">new</span> Colorful.Builder(this)</span><br><span class=\"line\">\t.backgroundDrawable(<span class=\"keyword\">R</span>.id.root_view, <span class=\"keyword\">R</span>.attr.root_view_bg) <span class=\"comment\">// 设置view的背景图片</span></span><br><span class=\"line\">\t.backgroundColor(<span class=\"keyword\">R</span>.id.change_btn, <span class=\"keyword\">R</span>.attr.btn_bg) <span class=\"comment\">// 设置按钮的背景色</span></span><br><span class=\"line\">\t.textColor(<span class=\"keyword\">R</span>.id.textview, <span class=\"keyword\">R</span>.attr.text_color) <span class=\"comment\">// 设置文本颜色</span></span><br><span class=\"line\">\t.setter(listViewSetter)           <span class=\"comment\">// 手动设置setter</span></span><br><span class=\"line\">\t.create()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3乖乖重启activity\"><a href=\"#3乖乖重启activity\" class=\"headerlink\" title=\"3乖乖重启activity\"></a>3乖乖重启activity</h4><p>既然这个多方法都不能完美去完成项目, 那我们不如按照官方方重启activity,为了美化转变效果,可以正对activity做一些动画,效果也是不错, 如下视频.</p>\n<iframe frameborder=\"0\" width=\"640\" height=\"498\" src=\"http://v.qq.com/iframe/player.html?vid=q0191cq7h61&tiny=0&auto=0\" allowfullscreen></iframe>\n\n\n<h3 id=\"6-代码中如何动态活取自定义属性值\"><a href=\"#6-代码中如何动态活取自定义属性值\" class=\"headerlink\" title=\"6.代码中如何动态活取自定义属性值\"></a>6.代码中如何动态活取自定义属性值</h3><p>有两种方法如下:</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       TypedArray a = obtainStyledAttributes(new <span class=\"keyword\">int</span>[]&#123;R.attr.mainBgColor, </span><br><span class=\"line\">R.attr.mainColor&#125;)<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">color</span> = a.getColor(<span class=\"number\">0</span>, <span class=\"keyword\">Color</span>.BLACK)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TypedValue</span> typedValue = new <span class=\"type\">TypedValue</span>();</span><br><span class=\"line\"><span class=\"title\">newTheme</span>.resolveAttribute(mAttrResId, typedValue, true)</span><br></pre></td></tr></table></figure>\n<h2 id=\"聊聊apk方式的主题实现\"><a href=\"#聊聊apk方式的主题实现\" class=\"headerlink\" title=\"聊聊apk方式的主题实现\"></a>聊聊apk方式的主题实现</h2><p>APK主题方案和主题包保存到SD卡上(墨迹,搜狗实现方式)的方案类似,只不过是apk压缩格式,一些资源的引用可以调用系统api。</p>\n<p>APK主题方案的基本思路是：在Android中，所有的资源都是基于包的。资源以id进行标识，在同一个应用中，每个资源都有唯一标识。但在不同的应用中，可以有相同的id。因此，只要获取到了其他应用的Context对象，就可以通过它的getRsources获取到其绑定的资源对象。然后，就可以使用Resources的getXXX方法获取字符串、颜色、dimension、图片等。<br>要想获取其他应用的Context对象，Android已经为我们提供好了接口。那就是android.content.ContextWrapper.createPackageContext(String packageName, int flags)方法。</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">           String remotePackage = <span class=\"string\">\"com.your.themepackagename\"</span><span class=\"comment\">;  </span></span><br><span class=\"line\">           Context remoteContext = createPackageContext(remotePackage,  </span><br><span class=\"line\">                   CONTEXT_IGNORE_SECURITY)<span class=\"comment\">;  </span></span><br><span class=\"line\">           Resources remoteResources = remoteContext.getResources()<span class=\"comment\">;  </span></span><br><span class=\"line\">           text.setText(remoteResources.getText(remoteResources.getIdentifier(<span class=\"string\">\"application_name\"</span>, <span class=\"string\">\"string\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">           <span class=\"keyword\">color</span>.setTextColor(remoteResources.getColor(remoteResources.getIdentifier(<span class=\"string\">\"color_name\"</span>, <span class=\"string\">\"color\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">           image.setImageDrawable(remoteResources.getDrawable(remoteResources.getIdentifier(<span class=\"string\">\"ic_icon\"</span>, <span class=\"string\">\"drawable\"</span>, remotePackage)))<span class=\"comment\">;  </span></span><br><span class=\"line\">       &#125; catch (NameNotFoundException e) &#123;  </span><br><span class=\"line\">           e.printStackTrace()<span class=\"comment\">;  </span></span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>除了压缩包,apk包等实现方式,还可以考虑插件实现方式,目的都是更好的解耦,更方便的迭代项目.<br>实践源码<a href=\"https://github.com/CankingApp/AndroidTheme\">Github</a></p>"},{"title":"安卓设备上备份已安装应用的apk包技术实现方案","date":"2016-03-22T10:44:00.000Z","_content":"\n在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?\n\n本文将告诉你如何靠谱的导出一个已安装应用的apk.\n<!-- more -->\n\n## 需求的目的\n在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?\n\n本文将告诉你如何靠谱的导出一个已安装应用的apk.\n## 了解相关目录\n安卓设备上根据安卓方式的不同,安装的数据存放路径也不同\n### 1. system/app\n 此类应用是系统初始化时候安装完成的, 存放在 'system/app' 目录下, 用户无法删除及操作.\n### 2.  data/app\n通过market下载后安装(无安装界面),或是用户手动安装(adb,packageinstall等).这类apk安装过程系统会备份在data/app目录下\n### 3. /mnt/asec/\n安装到sd卡上的应用,作用同上\n### 4. data/data\n应用安装过程,会在该目录下存在应用的私有数据\n### 5. data/dalvik-cache\n\n应用安装过程中,会解析data/app下的安装包中的dex文件, 拷贝到data/dalvik-cache,以备应用运行时使用.\n\n> 应用的删除过程即删除应用安装时所产生的这几个文件\n\n## 备份apk思路分享\n了解这个文件夹的作用后, 可以看到导出已安装应用只要拷贝相关目录下的应用即可.\n\n通过测试,可以确定除了系统应用安装的备份数据没有权限, 第三方应用所产生的文件夹下的内容都是有读权限的. 所以我们不需要任何特殊权限即可实现安装应用的备份导出.\n\n那问题来了, 在相关目录下如:data/app下如何才能知道一个应用的决定路径?\n\n> 答案:\n\n```\n> context.getPackageManager().getApplicationInfo(\"packagename\",\n> 0).sourceDir;\n```\n\n所以需要了解下 PackageManager 相关api\n\n## 实现代码\n知道路径后,那么我们接可以将文件拷贝到指定地方了,代码如下:\n\n```\n    private void backupApp(String path, String outname) throws IOException {\n        File in = new File(path);\n\n        if (!mBaseFile.exists()) mBaseFile.mkdir();\n        File out = new File(mBaseFile, outname + \".apk\");\n        if (!out.exists()) out.createNewFile();\n        FileInputStream fis = new FileInputStream(in);\n        FileOutputStream fos = new FileOutputStream(out);\n\n        int count;\n        byte[] buffer = new byte[256 * 1024];\n        while ((count = fis.read(buffer)) > 0) {\n            fos.write(buffer, 0, count);\n        }\n\n        fis.close();\n        fos.flush();\n        fos.close();\n    }\n\n\t//活取全面已安装应用的方法\n        PackageManager packageManager = getPackageManager();\n        List<PackageInfo> allPackages = packageManager.getInstalledPackages(0);\n        for (int i = 0; i < allPackages.size(); i++) {\n            PackageInfo packageInfo = allPackages.get(i);\n            String path = packageInfo.applicationInfo.sourceDir;\n            String name = packageInfo.applicationInfo.loadLabel(packageManager).toString();\n        }\n\n\t//判断是否是第三方应用方法\n    public boolean isUserApp(PackageInfo pInfo) {\n        return (((pInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) && ((pInfo.applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0));\n    }\n```\n## 正确性保障\n\n如何确保拷贝出来的apk的正确性呢?\n\n直接的办法可以校验md5或sha1, 当然还可以尝试解决文件格式等\n\n## Demo源代码\n测试小程序已上传到[github](https://github.com/CankingApp/ApkBackup.git),  有兴趣的可以直接下载研究学习.\n\n![这里写图片描述](http://img.blog.csdn.net/20160204192838199)\n\n\n\n","source":"_posts/apk-backup.md","raw":"---\ntitle: 安卓设备上备份已安装应用的apk包技术实现方案\ndate: 2016-03-22 18:44:00\ncategories: android \ntags: android\n---\n\n在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?\n\n本文将告诉你如何靠谱的导出一个已安装应用的apk.\n<!-- more -->\n\n## 需求的目的\n在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?\n\n本文将告诉你如何靠谱的导出一个已安装应用的apk.\n## 了解相关目录\n安卓设备上根据安卓方式的不同,安装的数据存放路径也不同\n### 1. system/app\n 此类应用是系统初始化时候安装完成的, 存放在 'system/app' 目录下, 用户无法删除及操作.\n### 2.  data/app\n通过market下载后安装(无安装界面),或是用户手动安装(adb,packageinstall等).这类apk安装过程系统会备份在data/app目录下\n### 3. /mnt/asec/\n安装到sd卡上的应用,作用同上\n### 4. data/data\n应用安装过程,会在该目录下存在应用的私有数据\n### 5. data/dalvik-cache\n\n应用安装过程中,会解析data/app下的安装包中的dex文件, 拷贝到data/dalvik-cache,以备应用运行时使用.\n\n> 应用的删除过程即删除应用安装时所产生的这几个文件\n\n## 备份apk思路分享\n了解这个文件夹的作用后, 可以看到导出已安装应用只要拷贝相关目录下的应用即可.\n\n通过测试,可以确定除了系统应用安装的备份数据没有权限, 第三方应用所产生的文件夹下的内容都是有读权限的. 所以我们不需要任何特殊权限即可实现安装应用的备份导出.\n\n那问题来了, 在相关目录下如:data/app下如何才能知道一个应用的决定路径?\n\n> 答案:\n\n```\n> context.getPackageManager().getApplicationInfo(\"packagename\",\n> 0).sourceDir;\n```\n\n所以需要了解下 PackageManager 相关api\n\n## 实现代码\n知道路径后,那么我们接可以将文件拷贝到指定地方了,代码如下:\n\n```\n    private void backupApp(String path, String outname) throws IOException {\n        File in = new File(path);\n\n        if (!mBaseFile.exists()) mBaseFile.mkdir();\n        File out = new File(mBaseFile, outname + \".apk\");\n        if (!out.exists()) out.createNewFile();\n        FileInputStream fis = new FileInputStream(in);\n        FileOutputStream fos = new FileOutputStream(out);\n\n        int count;\n        byte[] buffer = new byte[256 * 1024];\n        while ((count = fis.read(buffer)) > 0) {\n            fos.write(buffer, 0, count);\n        }\n\n        fis.close();\n        fos.flush();\n        fos.close();\n    }\n\n\t//活取全面已安装应用的方法\n        PackageManager packageManager = getPackageManager();\n        List<PackageInfo> allPackages = packageManager.getInstalledPackages(0);\n        for (int i = 0; i < allPackages.size(); i++) {\n            PackageInfo packageInfo = allPackages.get(i);\n            String path = packageInfo.applicationInfo.sourceDir;\n            String name = packageInfo.applicationInfo.loadLabel(packageManager).toString();\n        }\n\n\t//判断是否是第三方应用方法\n    public boolean isUserApp(PackageInfo pInfo) {\n        return (((pInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) && ((pInfo.applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0));\n    }\n```\n## 正确性保障\n\n如何确保拷贝出来的apk的正确性呢?\n\n直接的办法可以校验md5或sha1, 当然还可以尝试解决文件格式等\n\n## Demo源代码\n测试小程序已上传到[github](https://github.com/CankingApp/ApkBackup.git),  有兴趣的可以直接下载研究学习.\n\n![这里写图片描述](http://img.blog.csdn.net/20160204192838199)\n\n\n\n","slug":"apk-backup","published":1,"updated":"2016-11-08T04:31:55.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlt000aa47548ud4rki","content":"<p>在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?</p>\n<p>本文将告诉你如何靠谱的导出一个已安装应用的apk.<br><a id=\"more\"></a></p>\n<h2 id=\"需求的目的\"><a href=\"#需求的目的\" class=\"headerlink\" title=\"需求的目的\"></a>需求的目的</h2><p>在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?</p>\n<p>本文将告诉你如何靠谱的导出一个已安装应用的apk.</p>\n<h2 id=\"了解相关目录\"><a href=\"#了解相关目录\" class=\"headerlink\" title=\"了解相关目录\"></a>了解相关目录</h2><p>安卓设备上根据安卓方式的不同,安装的数据存放路径也不同</p>\n<h3 id=\"1-system-app\"><a href=\"#1-system-app\" class=\"headerlink\" title=\"1. system/app\"></a>1. system/app</h3><p> 此类应用是系统初始化时候安装完成的, 存放在 ‘system/app’ 目录下, 用户无法删除及操作.</p>\n<h3 id=\"2-data-app\"><a href=\"#2-data-app\" class=\"headerlink\" title=\"2.  data/app\"></a>2.  data/app</h3><p>通过market下载后安装(无安装界面),或是用户手动安装(adb,packageinstall等).这类apk安装过程系统会备份在data/app目录下</p>\n<h3 id=\"3-mnt-asec\"><a href=\"#3-mnt-asec\" class=\"headerlink\" title=\"3. /mnt/asec/\"></a>3. /mnt/asec/</h3><p>安装到sd卡上的应用,作用同上</p>\n<h3 id=\"4-data-data\"><a href=\"#4-data-data\" class=\"headerlink\" title=\"4. data/data\"></a>4. data/data</h3><p>应用安装过程,会在该目录下存在应用的私有数据</p>\n<h3 id=\"5-data-dalvik-cache\"><a href=\"#5-data-dalvik-cache\" class=\"headerlink\" title=\"5. data/dalvik-cache\"></a>5. data/dalvik-cache</h3><p>应用安装过程中,会解析data/app下的安装包中的dex文件, 拷贝到data/dalvik-cache,以备应用运行时使用.</p>\n<blockquote>\n<p>应用的删除过程即删除应用安装时所产生的这几个文件</p>\n</blockquote>\n<h2 id=\"备份apk思路分享\"><a href=\"#备份apk思路分享\" class=\"headerlink\" title=\"备份apk思路分享\"></a>备份apk思路分享</h2><p>了解这个文件夹的作用后, 可以看到导出已安装应用只要拷贝相关目录下的应用即可.</p>\n<p>通过测试,可以确定除了系统应用安装的备份数据没有权限, 第三方应用所产生的文件夹下的内容都是有读权限的. 所以我们不需要任何特殊权限即可实现安装应用的备份导出.</p>\n<p>那问题来了, 在相关目录下如:data/app下如何才能知道一个应用的决定路径?</p>\n<blockquote>\n<p>答案:</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"selector-tag\">context</span><span class=\"selector-class\">.getPackageManager</span>()<span class=\"selector-class\">.getApplicationInfo</span>(\"<span class=\"selector-tag\">packagename</span>\",</span><br><span class=\"line\">&gt; 0)<span class=\"selector-class\">.sourceDir</span>;</span><br></pre></td></tr></table></figure>\n<p>所以需要了解下 PackageManager 相关api</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><p>知道路径后,那么我们接可以将文件拷贝到指定地方了,代码如下:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> backupApp(<span class=\"keyword\">String</span> path, <span class=\"keyword\">String</span> outname) throws IOException &#123;</span><br><span class=\"line\">       <span class=\"built_in\">File</span> in = new <span class=\"built_in\">File</span>(path);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">if</span> (!mBaseFile.<span class=\"built_in\">exists</span>()) mBaseFile.<span class=\"built_in\">mkdir</span>();</span><br><span class=\"line\">       <span class=\"built_in\">File</span> out = new <span class=\"built_in\">File</span>(mBaseFile, outname + <span class=\"string\">\".apk\"</span>);</span><br><span class=\"line\">       <span class=\"built_in\">if</span> (!out.<span class=\"built_in\">exists</span>()) out.createNewFile();</span><br><span class=\"line\">       FileInputStream fis = new FileInputStream(in);</span><br><span class=\"line\">       FileOutputStream fos = new FileOutputStream(out);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">       <span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = new <span class=\"keyword\">byte</span>[<span class=\"number\">256</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">       <span class=\"built_in\">while</span> ((count = fis.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           fos.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, count);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       fis.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">       fos.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">       fos.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//活取全面已安装应用的方法</span></span><br><span class=\"line\">       PackageManager packageManager = getPackageManager();</span><br><span class=\"line\">       List&lt;PackageInfo&gt; allPackages = packageManager.getInstalledPackages(<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; allPackages.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">           PackageInfo packageInfo = allPackages.<span class=\"built_in\">get</span>(i);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> path = packageInfo.applicationInfo.sourceDir;</span><br><span class=\"line\">           <span class=\"keyword\">String</span> name = packageInfo.applicationInfo.loadLabel(packageManager).toString();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否是第三方应用方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isUserApp(PackageInfo pInfo) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">return</span> (((pInfo.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class=\"number\">0</span>) &amp;&amp; ((pInfo.applicationInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == <span class=\"number\">0</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正确性保障\"><a href=\"#正确性保障\" class=\"headerlink\" title=\"正确性保障\"></a>正确性保障</h2><p>如何确保拷贝出来的apk的正确性呢?</p>\n<p>直接的办法可以校验md5或sha1, 当然还可以尝试解决文件格式等</p>\n<h2 id=\"Demo源代码\"><a href=\"#Demo源代码\" class=\"headerlink\" title=\"Demo源代码\"></a>Demo源代码</h2><p>测试小程序已上传到<a href=\"https://github.com/CankingApp/ApkBackup.git\" target=\"_blank\" rel=\"external\">github</a>,  有兴趣的可以直接下载研究学习.</p>\n<p><img src=\"http://img.blog.csdn.net/20160204192838199\" alt=\"这里写图片描述\"></p>\n","excerpt":"<p>在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?</p>\n<p>本文将告诉你如何靠谱的导出一个已安装应用的apk.<br>","more":"</p>\n<h2 id=\"需求的目的\"><a href=\"#需求的目的\" class=\"headerlink\" title=\"需求的目的\"></a>需求的目的</h2><p>在只有安装应用, 没有该应用的apk,而我们又想活取应用apk,用来分享给别人,或是应用的备份, 说是应用的增量升级的, 怎么办?</p>\n<p>本文将告诉你如何靠谱的导出一个已安装应用的apk.</p>\n<h2 id=\"了解相关目录\"><a href=\"#了解相关目录\" class=\"headerlink\" title=\"了解相关目录\"></a>了解相关目录</h2><p>安卓设备上根据安卓方式的不同,安装的数据存放路径也不同</p>\n<h3 id=\"1-system-app\"><a href=\"#1-system-app\" class=\"headerlink\" title=\"1. system/app\"></a>1. system/app</h3><p> 此类应用是系统初始化时候安装完成的, 存放在 ‘system/app’ 目录下, 用户无法删除及操作.</p>\n<h3 id=\"2-data-app\"><a href=\"#2-data-app\" class=\"headerlink\" title=\"2.  data/app\"></a>2.  data/app</h3><p>通过market下载后安装(无安装界面),或是用户手动安装(adb,packageinstall等).这类apk安装过程系统会备份在data/app目录下</p>\n<h3 id=\"3-mnt-asec\"><a href=\"#3-mnt-asec\" class=\"headerlink\" title=\"3. /mnt/asec/\"></a>3. /mnt/asec/</h3><p>安装到sd卡上的应用,作用同上</p>\n<h3 id=\"4-data-data\"><a href=\"#4-data-data\" class=\"headerlink\" title=\"4. data/data\"></a>4. data/data</h3><p>应用安装过程,会在该目录下存在应用的私有数据</p>\n<h3 id=\"5-data-dalvik-cache\"><a href=\"#5-data-dalvik-cache\" class=\"headerlink\" title=\"5. data/dalvik-cache\"></a>5. data/dalvik-cache</h3><p>应用安装过程中,会解析data/app下的安装包中的dex文件, 拷贝到data/dalvik-cache,以备应用运行时使用.</p>\n<blockquote>\n<p>应用的删除过程即删除应用安装时所产生的这几个文件</p>\n</blockquote>\n<h2 id=\"备份apk思路分享\"><a href=\"#备份apk思路分享\" class=\"headerlink\" title=\"备份apk思路分享\"></a>备份apk思路分享</h2><p>了解这个文件夹的作用后, 可以看到导出已安装应用只要拷贝相关目录下的应用即可.</p>\n<p>通过测试,可以确定除了系统应用安装的备份数据没有权限, 第三方应用所产生的文件夹下的内容都是有读权限的. 所以我们不需要任何特殊权限即可实现安装应用的备份导出.</p>\n<p>那问题来了, 在相关目录下如:data/app下如何才能知道一个应用的决定路径?</p>\n<blockquote>\n<p>答案:</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"selector-tag\">context</span><span class=\"selector-class\">.getPackageManager</span>()<span class=\"selector-class\">.getApplicationInfo</span>(\"<span class=\"selector-tag\">packagename</span>\",</span><br><span class=\"line\">&gt; 0)<span class=\"selector-class\">.sourceDir</span>;</span><br></pre></td></tr></table></figure>\n<p>所以需要了解下 PackageManager 相关api</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><p>知道路径后,那么我们接可以将文件拷贝到指定地方了,代码如下:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> backupApp(<span class=\"keyword\">String</span> path, <span class=\"keyword\">String</span> outname) throws IOException &#123;</span><br><span class=\"line\">       <span class=\"built_in\">File</span> in = new <span class=\"built_in\">File</span>(path);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">if</span> (!mBaseFile.<span class=\"built_in\">exists</span>()) mBaseFile.<span class=\"built_in\">mkdir</span>();</span><br><span class=\"line\">       <span class=\"built_in\">File</span> out = new <span class=\"built_in\">File</span>(mBaseFile, outname + <span class=\"string\">\".apk\"</span>);</span><br><span class=\"line\">       <span class=\"built_in\">if</span> (!out.<span class=\"built_in\">exists</span>()) out.createNewFile();</span><br><span class=\"line\">       FileInputStream fis = new FileInputStream(in);</span><br><span class=\"line\">       FileOutputStream fos = new FileOutputStream(out);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">       <span class=\"keyword\">byte</span>[] <span class=\"built_in\">buffer</span> = new <span class=\"keyword\">byte</span>[<span class=\"number\">256</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">       <span class=\"built_in\">while</span> ((count = fis.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           fos.<span class=\"built_in\">write</span>(<span class=\"built_in\">buffer</span>, <span class=\"number\">0</span>, count);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       fis.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">       fos.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\">       fos.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//活取全面已安装应用的方法</span></span><br><span class=\"line\">       PackageManager packageManager = getPackageManager();</span><br><span class=\"line\">       List&lt;PackageInfo&gt; allPackages = packageManager.getInstalledPackages(<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; allPackages.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">           PackageInfo packageInfo = allPackages.<span class=\"built_in\">get</span>(i);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> path = packageInfo.applicationInfo.sourceDir;</span><br><span class=\"line\">           <span class=\"keyword\">String</span> name = packageInfo.applicationInfo.loadLabel(packageManager).toString();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否是第三方应用方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isUserApp(PackageInfo pInfo) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">return</span> (((pInfo.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class=\"number\">0</span>) &amp;&amp; ((pInfo.applicationInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == <span class=\"number\">0</span>));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正确性保障\"><a href=\"#正确性保障\" class=\"headerlink\" title=\"正确性保障\"></a>正确性保障</h2><p>如何确保拷贝出来的apk的正确性呢?</p>\n<p>直接的办法可以校验md5或sha1, 当然还可以尝试解决文件格式等</p>\n<h2 id=\"Demo源代码\"><a href=\"#Demo源代码\" class=\"headerlink\" title=\"Demo源代码\"></a>Demo源代码</h2><p>测试小程序已上传到<a href=\"https://github.com/CankingApp/ApkBackup.git\">github</a>,  有兴趣的可以直接下载研究学习.</p>\n<p><img src=\"http://img.blog.csdn.net/20160204192838199\" alt=\"这里写图片描述\"></p>"},{"title":"视频转gif图片格式－好用的软件","date":"2016-03-30T11:07:51.000Z","_content":"\nFFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。\n\n![支持格式](http://cankingapp.github.io/2016/03/30/ffmpeg/2016-03-30 19-10-29.png)\n\n## 引文\n\n博客中一直引用图片，感觉没有其他人博文中动态图更加有效果，一直以来因为懒,且markdown不支持视频，就一直延续着截图插入，今天发现一款便捷小巧的转化软件，命令行操作，非常方便，分享出来，也作为自己的博客记录．\n\n## 安装命令\n\n该软件是linux环境下一款视频处理软件，命令行操作，非常方便，安装方法如下：\n\n`sudo apt-get install ffmpeg`\n\n## 基本用法\n\n软件功能十分强大，不仅能把视频转为图片，还能把图片换为适配，当然加水印什么的更不在话下．本文中只针对视频转化为gif格式图片讲解．\n\n### 查看ffmpeg支持格式\n\n`ffmpeg –formats`\n\n![支持格式](2016-03-30 19-10-29.png)\n\n从图片中可以看到gif的支持\n\n\n\n### 转化指定时间端视频\n\n转化本目录下的文件cangjinkong.wmv　6s后10s视频　为　*demo.gif*\n\n\n`ffmpeg -ss 6 -t 10 -i cangjinkong.wmv -f gif ./demo.gif`\n\n转化后效果如下： \n\n\n![支持格式](http://img.blog.csdn.net/20160330195113710)  ![支持格式](a.gif)\n\n\n### 转化参数设置\n你的源文件可能是1080P的高清视频，帧率可能还比较高。为了便于网络分享，GIF文件最好小一点。于是，我们需要使用-s参数来进行图像的缩放，使用-r参数来限制目标文件的帧率,帧率降到了1 fps（从源视频里每隔一秒抽取一帧图像输出到目标文件）。命令行如下：\n\n`ffmpeg -ss  6 -t 10 -i cangjinkong.wmv -s 320x240 -f gif -r 1 ./demo.gif`\n\n如果丢针效果不好怎么办? 我们可以分两部先均匀取出图片，然后转化为gif\n\n* 首先，执行ffmpeg -ss 25 -t 10 -i cangjinkong.wmv -r 1 -s 320x240 -f image2 .\\foo-%03d.jpeg，从源视频中每秒钟抽取一帧图像，保存为一系列JPEG文件。\n* 然后，再执行ffmpeg -f image2 -framerate 5 -i .\\foo-%03d.jpeg .\\c.gif，将这一系列JPEG图像合成为帧率5 fps的GIF文件。\n\n截取视频内任意时间点（比如第16.1秒处）的一帧图像保存为JPEG文件：\n\n`ffmpeg -ss 16.1 -i cangjinkong.wmv -s 320x240 -vframes 1 -f image2 ./d.jpeg`\n\n\n[百度百科介绍](http://baike.baidu.com/link?url=yeAKY2Zfi310bwaYfsjKzZMfrcnGYCnuFdRvC9QdWzIMXtxErZOUv_kMIQGA32fh6ufuYPD5G5Jh-GqVitBEX_)\n\n\n","source":"_posts/ffmpeg.md","raw":"---\ntitle: 视频转gif图片格式－好用的软件\ndate: 2016-03-30 19:07:51\ncategories: tool \ntags: ffmpeg\n---\n\nFFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。\n\n![支持格式](http://cankingapp.github.io/2016/03/30/ffmpeg/2016-03-30 19-10-29.png)\n\n## 引文\n\n博客中一直引用图片，感觉没有其他人博文中动态图更加有效果，一直以来因为懒,且markdown不支持视频，就一直延续着截图插入，今天发现一款便捷小巧的转化软件，命令行操作，非常方便，分享出来，也作为自己的博客记录．\n\n## 安装命令\n\n该软件是linux环境下一款视频处理软件，命令行操作，非常方便，安装方法如下：\n\n`sudo apt-get install ffmpeg`\n\n## 基本用法\n\n软件功能十分强大，不仅能把视频转为图片，还能把图片换为适配，当然加水印什么的更不在话下．本文中只针对视频转化为gif格式图片讲解．\n\n### 查看ffmpeg支持格式\n\n`ffmpeg –formats`\n\n![支持格式](2016-03-30 19-10-29.png)\n\n从图片中可以看到gif的支持\n\n\n\n### 转化指定时间端视频\n\n转化本目录下的文件cangjinkong.wmv　6s后10s视频　为　*demo.gif*\n\n\n`ffmpeg -ss 6 -t 10 -i cangjinkong.wmv -f gif ./demo.gif`\n\n转化后效果如下： \n\n\n![支持格式](http://img.blog.csdn.net/20160330195113710)  ![支持格式](a.gif)\n\n\n### 转化参数设置\n你的源文件可能是1080P的高清视频，帧率可能还比较高。为了便于网络分享，GIF文件最好小一点。于是，我们需要使用-s参数来进行图像的缩放，使用-r参数来限制目标文件的帧率,帧率降到了1 fps（从源视频里每隔一秒抽取一帧图像输出到目标文件）。命令行如下：\n\n`ffmpeg -ss  6 -t 10 -i cangjinkong.wmv -s 320x240 -f gif -r 1 ./demo.gif`\n\n如果丢针效果不好怎么办? 我们可以分两部先均匀取出图片，然后转化为gif\n\n* 首先，执行ffmpeg -ss 25 -t 10 -i cangjinkong.wmv -r 1 -s 320x240 -f image2 .\\foo-%03d.jpeg，从源视频中每秒钟抽取一帧图像，保存为一系列JPEG文件。\n* 然后，再执行ffmpeg -f image2 -framerate 5 -i .\\foo-%03d.jpeg .\\c.gif，将这一系列JPEG图像合成为帧率5 fps的GIF文件。\n\n截取视频内任意时间点（比如第16.1秒处）的一帧图像保存为JPEG文件：\n\n`ffmpeg -ss 16.1 -i cangjinkong.wmv -s 320x240 -vframes 1 -f image2 ./d.jpeg`\n\n\n[百度百科介绍](http://baike.baidu.com/link?url=yeAKY2Zfi310bwaYfsjKzZMfrcnGYCnuFdRvC9QdWzIMXtxErZOUv_kMIQGA32fh6ufuYPD5G5Jh-GqVitBEX_)\n\n\n","slug":"ffmpeg","published":1,"updated":"2016-11-08T04:31:55.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tlv000ca4754orpv08s","content":"<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。</p>\n<p><img src=\"http://cankingapp.github.io/2016/03/30/ffmpeg/2016-03-30 19-10-29.png\" alt=\"支持格式\"></p>\n<h2 id=\"引文\"><a href=\"#引文\" class=\"headerlink\" title=\"引文\"></a>引文</h2><p>博客中一直引用图片，感觉没有其他人博文中动态图更加有效果，一直以来因为懒,且markdown不支持视频，就一直延续着截图插入，今天发现一款便捷小巧的转化软件，命令行操作，非常方便，分享出来，也作为自己的博客记录．</p>\n<h2 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h2><p>该软件是linux环境下一款视频处理软件，命令行操作，非常方便，安装方法如下：</p>\n<p><code>sudo apt-get install ffmpeg</code></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>软件功能十分强大，不仅能把视频转为图片，还能把图片换为适配，当然加水印什么的更不在话下．本文中只针对视频转化为gif格式图片讲解．</p>\n<h3 id=\"查看ffmpeg支持格式\"><a href=\"#查看ffmpeg支持格式\" class=\"headerlink\" title=\"查看ffmpeg支持格式\"></a>查看ffmpeg支持格式</h3><p><code>ffmpeg –formats</code></p>\n<p><img src=\"2016-03-30 19-10-29.png\" alt=\"支持格式\"></p>\n<p>从图片中可以看到gif的支持</p>\n<h3 id=\"转化指定时间端视频\"><a href=\"#转化指定时间端视频\" class=\"headerlink\" title=\"转化指定时间端视频\"></a>转化指定时间端视频</h3><p>转化本目录下的文件cangjinkong.wmv　6s后10s视频　为　<em>demo.gif</em></p>\n<p><code>ffmpeg -ss 6 -t 10 -i cangjinkong.wmv -f gif ./demo.gif</code></p>\n<p>转化后效果如下： </p>\n<p><img src=\"http://img.blog.csdn.net/20160330195113710\" alt=\"支持格式\">  <img src=\"a.gif\" alt=\"支持格式\"></p>\n<h3 id=\"转化参数设置\"><a href=\"#转化参数设置\" class=\"headerlink\" title=\"转化参数设置\"></a>转化参数设置</h3><p>你的源文件可能是1080P的高清视频，帧率可能还比较高。为了便于网络分享，GIF文件最好小一点。于是，我们需要使用-s参数来进行图像的缩放，使用-r参数来限制目标文件的帧率,帧率降到了1 fps（从源视频里每隔一秒抽取一帧图像输出到目标文件）。命令行如下：</p>\n<p><code>ffmpeg -ss  6 -t 10 -i cangjinkong.wmv -s 320x240 -f gif -r 1 ./demo.gif</code></p>\n<p>如果丢针效果不好怎么办? 我们可以分两部先均匀取出图片，然后转化为gif</p>\n<ul>\n<li>首先，执行ffmpeg -ss 25 -t 10 -i cangjinkong.wmv -r 1 -s 320x240 -f image2 .\\foo-%03d.jpeg，从源视频中每秒钟抽取一帧图像，保存为一系列JPEG文件。</li>\n<li>然后，再执行ffmpeg -f image2 -framerate 5 -i .\\foo-%03d.jpeg .\\c.gif，将这一系列JPEG图像合成为帧率5 fps的GIF文件。</li>\n</ul>\n<p>截取视频内任意时间点（比如第16.1秒处）的一帧图像保存为JPEG文件：</p>\n<p><code>ffmpeg -ss 16.1 -i cangjinkong.wmv -s 320x240 -vframes 1 -f image2 ./d.jpeg</code></p>\n<p><a href=\"http://baike.baidu.com/link?url=yeAKY2Zfi310bwaYfsjKzZMfrcnGYCnuFdRvC9QdWzIMXtxErZOUv_kMIQGA32fh6ufuYPD5G5Jh-GqVitBEX_\" target=\"_blank\" rel=\"external\">百度百科介绍</a></p>\n","excerpt":"","more":"<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。</p>\n<p><img src=\"http://cankingapp.github.io/2016/03/30/ffmpeg/2016-03-30 19-10-29.png\" alt=\"支持格式\"></p>\n<h2 id=\"引文\"><a href=\"#引文\" class=\"headerlink\" title=\"引文\"></a>引文</h2><p>博客中一直引用图片，感觉没有其他人博文中动态图更加有效果，一直以来因为懒,且markdown不支持视频，就一直延续着截图插入，今天发现一款便捷小巧的转化软件，命令行操作，非常方便，分享出来，也作为自己的博客记录．</p>\n<h2 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h2><p>该软件是linux环境下一款视频处理软件，命令行操作，非常方便，安装方法如下：</p>\n<p><code>sudo apt-get install ffmpeg</code></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>软件功能十分强大，不仅能把视频转为图片，还能把图片换为适配，当然加水印什么的更不在话下．本文中只针对视频转化为gif格式图片讲解．</p>\n<h3 id=\"查看ffmpeg支持格式\"><a href=\"#查看ffmpeg支持格式\" class=\"headerlink\" title=\"查看ffmpeg支持格式\"></a>查看ffmpeg支持格式</h3><p><code>ffmpeg –formats</code></p>\n<p><img src=\"2016-03-30 19-10-29.png\" alt=\"支持格式\"></p>\n<p>从图片中可以看到gif的支持</p>\n<h3 id=\"转化指定时间端视频\"><a href=\"#转化指定时间端视频\" class=\"headerlink\" title=\"转化指定时间端视频\"></a>转化指定时间端视频</h3><p>转化本目录下的文件cangjinkong.wmv　6s后10s视频　为　<em>demo.gif</em></p>\n<p><code>ffmpeg -ss 6 -t 10 -i cangjinkong.wmv -f gif ./demo.gif</code></p>\n<p>转化后效果如下： </p>\n<p><img src=\"http://img.blog.csdn.net/20160330195113710\" alt=\"支持格式\">  <img src=\"a.gif\" alt=\"支持格式\"></p>\n<h3 id=\"转化参数设置\"><a href=\"#转化参数设置\" class=\"headerlink\" title=\"转化参数设置\"></a>转化参数设置</h3><p>你的源文件可能是1080P的高清视频，帧率可能还比较高。为了便于网络分享，GIF文件最好小一点。于是，我们需要使用-s参数来进行图像的缩放，使用-r参数来限制目标文件的帧率,帧率降到了1 fps（从源视频里每隔一秒抽取一帧图像输出到目标文件）。命令行如下：</p>\n<p><code>ffmpeg -ss  6 -t 10 -i cangjinkong.wmv -s 320x240 -f gif -r 1 ./demo.gif</code></p>\n<p>如果丢针效果不好怎么办? 我们可以分两部先均匀取出图片，然后转化为gif</p>\n<ul>\n<li>首先，执行ffmpeg -ss 25 -t 10 -i cangjinkong.wmv -r 1 -s 320x240 -f image2 .\\foo-%03d.jpeg，从源视频中每秒钟抽取一帧图像，保存为一系列JPEG文件。</li>\n<li>然后，再执行ffmpeg -f image2 -framerate 5 -i .\\foo-%03d.jpeg .\\c.gif，将这一系列JPEG图像合成为帧率5 fps的GIF文件。</li>\n</ul>\n<p>截取视频内任意时间点（比如第16.1秒处）的一帧图像保存为JPEG文件：</p>\n<p><code>ffmpeg -ss 16.1 -i cangjinkong.wmv -s 320x240 -vframes 1 -f image2 ./d.jpeg</code></p>\n<p><a href=\"http://baike.baidu.com/link?url=yeAKY2Zfi310bwaYfsjKzZMfrcnGYCnuFdRvC9QdWzIMXtxErZOUv_kMIQGA32fh6ufuYPD5G5Jh-GqVitBEX_\">百度百科介绍</a></p>\n"},{"title":"Hello Hexo World !","date":"2016-03-17T07:40:40.000Z","photos":["http://img.blog.csdn.net/20160318142902109"],"_content":"\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). <!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello Hexo World ! \ncategories: hexo \ndate: 2016-03-17 15:40:40\ntags: hexo\nphotos:\n- http://img.blog.csdn.net/20160318142902109\n---\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). <!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-11-08T04:31:55.997Z","comments":1,"layout":"post","link":"","_id":"civam5tlz000ha47548j94e59","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>. <a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"NotificationListenerService 安卓通知栏管理详解及分析","date":"2016-03-18T10:13:41.000Z","_content":"\n\n### 一. 方法概述\nandroid在api 18前可以通过辅助功能'AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED'或是*反射*活取通知栏相关信息。\n现在我们可以根据*NotificationListenerService*类非常容易的活取通知回调相关信息。\n<!--more-->\n### 二. NotificationListenerService详解\n\n通知的新增和删除，都会回调你注册的NLS里的方法，这些信息可以通过StatusBarNotification类对象来获取。\n另外比较主要的是，系统开启通知读取服务后，系统就会对APP有个保活功能，当被系统或是第三方软件kill后，系统会将你的应用重启。很多厂商会利用这点做一些坏坏的事情。并且国内各大杀毒，清理软件都有开启该功能。\n#### NotificationListenerService主要方法(成员变量)：\n\n删除通知时会回调onNotificationRemoved, 新增通知或是更新时会回调onNotificationPosted\n\n* cancelAllNotifications() ：删除系统中所有 *可被清除* 的通知； \n* cancelNotification(String pkg, String tag, int id) ：删除具体某一个通知；\n* getActiveNotifications() ：返回当前系统所有通知到StatusBarNotification[]的列表；\n* onNotificationPosted(StatusBarNotification sbn) ：当系统收到新的通知后出发回调； \n* onNotificationRemoved(StatusBarNotification sbn) ：当系统通知被删掉后出发回调；\n\n#### StatusBarNotification类详解\nStatusBarNotification，多进程传递对象，所有通知信息都会在这个类中通过Binder传递过来.\n内部几个重要的方法如下：\n\n* getId()：返回通知对应的id；\n* getNotification()：返回通知对象；\n* getPackageName()：返回通知对应的包名；\n* getPostTime()：返回通知发起的时间；\n* getTag()：返回通知的Tag，如果没有设置返回null；\n* isClearable()：返回该通知是否可被清楚，FLAG_ONGOING_EVENT、FLAG_NO_CLEAR；\n* isOngoing()：检查该通知的flag是否为FLAG_ONGOING_EVENT；\n\n其中，我们通过getNotification()可以得到Notification对象，Notification是我们比较熟悉的类了，我们可以得到通知具体内容甚至可以还原RemoteViews到我们的本地view上。\n\n### 三. 使用方法\n正确使用NotificationListenerService需要进行三步骤：\n\n#### 1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\n\n```java\n\n    public class NLService extends NotificationListenerService {\n        @Override\n        public void onNotificationPosted(StatusBarNotification sbn) {\n        }\n \n        @Override\n        public void onNotificationRemoved(StatusBarNotification sbn) {\n        }\n    }\n\n```\n\n#### 2. 在AndroidManifest.xml中注册Service并声明相关权限；\n\n```xml\n   <service android:name=\".NLService\"\n          android:label=\"@string/service_name\"\n          android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\">\n     <intent-filter>\n         <action android:name=\"android.service.notification.NotificationListenerService\" />\n     </intent-filter>\n   </service>\n\n```\n\n#### 3. 开启NotificationMonitor的监听功能；\n\n```java\n\n            if (!isEnabled()) {\n                Intent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\n                startActivity(intent);\n            } else {\n                Toast.makeText(this, \"已开启服务权限\", Toast.LENGTH_LONG).show();\n            }\n            \n```\n\n```java\n\n    private boolean isEnabled() {\n        String pkgName = getPackageName();\n        final String flat = Settings.Secure.getString(getContentResolver(),\n                ENABLED_NOTIFICATION_LISTENERS);\n        if (!TextUtils.isEmpty(flat)) {\n            final String[] names = flat.split(\":\");\n            for (int i = 0; i < names.length; i++) {\n                final ComponentName cn = ComponentName.unflattenFromString(names[i]);\n                if (cn != null) {\n                    if (TextUtils.equals(pkgName, cn.getPackageName())) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n```\n### 四. Demo讲解\n根据以上步骤，已经可以接收到通知栏变换时的回调，及获取当前所有通知列表，我们限制写个小例子，活取所有通知列表并且监听通知栏的变换，把收到的Notification及相关信息展示到我们的页面ListView中．\n\n#### 1. 按照以上步骤建立基本例子框架\n\n写布局，要有开启服务的btn, 活取所有通知的btn和清除所有列表的btn, 界面比较简陋，如图：\n\n![Demo截图](./screenshot/demo.png)\n\n#### 2. 建立BroadcastReceiver和Service交互\n当然也可以用binder说是message通信,根据自己程序设计选择,这里为了简单的演示用了BroadcastReceiver机制\n\n```java\n\n    class NotificationReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String temp = mInfoList.size() + \"：\" + intent.getStringExtra(EVENT);\n            NTBean bean = new NTBean();\n            bean.info = temp;\n\n            Bundle budle = intent.getExtras();\n            bean.title = budle.getString(Notification.EXTRA_TITLE);\n            bean.text = budle.getString(Notification.EXTRA_TEXT);\n            bean.subText = budle.getString(Notification.EXTRA_SUB_TEXT);\n            bean.largeIcon = budle.getParcelable(Notification.EXTRA_LARGE_ICON);\n            Icon icon = budle.getParcelable(Notification.EXTRA_SMALL_ICON);\n            bean.smallIcon = icon;\n\n            bean.viewS = budle.getParcelable(VIEW_S);\n            bean.viewL = budle.getParcelable(View_L);\n\n            mInfoList.add(bean);\n            Log.e(\"changxing\", \"receive:\" + temp + \"\\n\" + budle);\n            mAdapter.notifyDataSetChanged();\n        }\n\n    }\n    \n```\n\n#### 3. 活取相关回调展示页面\n\n将回调的相关参数传递到activity中, 展示到listview中,其中可以直接用**RemoteViews#apply**方法将Notification展示到我们本地*ViewGroup*中.\n\n程序运行如下:\n\n![程序运行截图](scr_a.png)\n![程序运行截图](scr_b.png)\n","source":"_posts/notification-mgr.md","raw":"---\ntitle: NotificationListenerService 安卓通知栏管理详解及分析\ndate: 2016-03-18 18:13:41\ncategories: android \ntags: android\n---\n\n\n### 一. 方法概述\nandroid在api 18前可以通过辅助功能'AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED'或是*反射*活取通知栏相关信息。\n现在我们可以根据*NotificationListenerService*类非常容易的活取通知回调相关信息。\n<!--more-->\n### 二. NotificationListenerService详解\n\n通知的新增和删除，都会回调你注册的NLS里的方法，这些信息可以通过StatusBarNotification类对象来获取。\n另外比较主要的是，系统开启通知读取服务后，系统就会对APP有个保活功能，当被系统或是第三方软件kill后，系统会将你的应用重启。很多厂商会利用这点做一些坏坏的事情。并且国内各大杀毒，清理软件都有开启该功能。\n#### NotificationListenerService主要方法(成员变量)：\n\n删除通知时会回调onNotificationRemoved, 新增通知或是更新时会回调onNotificationPosted\n\n* cancelAllNotifications() ：删除系统中所有 *可被清除* 的通知； \n* cancelNotification(String pkg, String tag, int id) ：删除具体某一个通知；\n* getActiveNotifications() ：返回当前系统所有通知到StatusBarNotification[]的列表；\n* onNotificationPosted(StatusBarNotification sbn) ：当系统收到新的通知后出发回调； \n* onNotificationRemoved(StatusBarNotification sbn) ：当系统通知被删掉后出发回调；\n\n#### StatusBarNotification类详解\nStatusBarNotification，多进程传递对象，所有通知信息都会在这个类中通过Binder传递过来.\n内部几个重要的方法如下：\n\n* getId()：返回通知对应的id；\n* getNotification()：返回通知对象；\n* getPackageName()：返回通知对应的包名；\n* getPostTime()：返回通知发起的时间；\n* getTag()：返回通知的Tag，如果没有设置返回null；\n* isClearable()：返回该通知是否可被清楚，FLAG_ONGOING_EVENT、FLAG_NO_CLEAR；\n* isOngoing()：检查该通知的flag是否为FLAG_ONGOING_EVENT；\n\n其中，我们通过getNotification()可以得到Notification对象，Notification是我们比较熟悉的类了，我们可以得到通知具体内容甚至可以还原RemoteViews到我们的本地view上。\n\n### 三. 使用方法\n正确使用NotificationListenerService需要进行三步骤：\n\n#### 1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\n\n```java\n\n    public class NLService extends NotificationListenerService {\n        @Override\n        public void onNotificationPosted(StatusBarNotification sbn) {\n        }\n \n        @Override\n        public void onNotificationRemoved(StatusBarNotification sbn) {\n        }\n    }\n\n```\n\n#### 2. 在AndroidManifest.xml中注册Service并声明相关权限；\n\n```xml\n   <service android:name=\".NLService\"\n          android:label=\"@string/service_name\"\n          android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\">\n     <intent-filter>\n         <action android:name=\"android.service.notification.NotificationListenerService\" />\n     </intent-filter>\n   </service>\n\n```\n\n#### 3. 开启NotificationMonitor的监听功能；\n\n```java\n\n            if (!isEnabled()) {\n                Intent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\n                startActivity(intent);\n            } else {\n                Toast.makeText(this, \"已开启服务权限\", Toast.LENGTH_LONG).show();\n            }\n            \n```\n\n```java\n\n    private boolean isEnabled() {\n        String pkgName = getPackageName();\n        final String flat = Settings.Secure.getString(getContentResolver(),\n                ENABLED_NOTIFICATION_LISTENERS);\n        if (!TextUtils.isEmpty(flat)) {\n            final String[] names = flat.split(\":\");\n            for (int i = 0; i < names.length; i++) {\n                final ComponentName cn = ComponentName.unflattenFromString(names[i]);\n                if (cn != null) {\n                    if (TextUtils.equals(pkgName, cn.getPackageName())) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n```\n### 四. Demo讲解\n根据以上步骤，已经可以接收到通知栏变换时的回调，及获取当前所有通知列表，我们限制写个小例子，活取所有通知列表并且监听通知栏的变换，把收到的Notification及相关信息展示到我们的页面ListView中．\n\n#### 1. 按照以上步骤建立基本例子框架\n\n写布局，要有开启服务的btn, 活取所有通知的btn和清除所有列表的btn, 界面比较简陋，如图：\n\n![Demo截图](./screenshot/demo.png)\n\n#### 2. 建立BroadcastReceiver和Service交互\n当然也可以用binder说是message通信,根据自己程序设计选择,这里为了简单的演示用了BroadcastReceiver机制\n\n```java\n\n    class NotificationReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String temp = mInfoList.size() + \"：\" + intent.getStringExtra(EVENT);\n            NTBean bean = new NTBean();\n            bean.info = temp;\n\n            Bundle budle = intent.getExtras();\n            bean.title = budle.getString(Notification.EXTRA_TITLE);\n            bean.text = budle.getString(Notification.EXTRA_TEXT);\n            bean.subText = budle.getString(Notification.EXTRA_SUB_TEXT);\n            bean.largeIcon = budle.getParcelable(Notification.EXTRA_LARGE_ICON);\n            Icon icon = budle.getParcelable(Notification.EXTRA_SMALL_ICON);\n            bean.smallIcon = icon;\n\n            bean.viewS = budle.getParcelable(VIEW_S);\n            bean.viewL = budle.getParcelable(View_L);\n\n            mInfoList.add(bean);\n            Log.e(\"changxing\", \"receive:\" + temp + \"\\n\" + budle);\n            mAdapter.notifyDataSetChanged();\n        }\n\n    }\n    \n```\n\n#### 3. 活取相关回调展示页面\n\n将回调的相关参数传递到activity中, 展示到listview中,其中可以直接用**RemoteViews#apply**方法将Notification展示到我们本地*ViewGroup*中.\n\n程序运行如下:\n\n![程序运行截图](scr_a.png)\n![程序运行截图](scr_b.png)\n","slug":"notification-mgr","published":1,"updated":"2016-11-08T04:51:12.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tm1000ja475yfb7h856","content":"<h3 id=\"一-方法概述\"><a href=\"#一-方法概述\" class=\"headerlink\" title=\"一. 方法概述\"></a>一. 方法概述</h3><p>android在api 18前可以通过辅助功能’AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED’或是<em>反射</em>活取通知栏相关信息。<br>现在我们可以根据<em>NotificationListenerService</em>类非常容易的活取通知回调相关信息。<br><a id=\"more\"></a></p>\n<h3 id=\"二-NotificationListenerService详解\"><a href=\"#二-NotificationListenerService详解\" class=\"headerlink\" title=\"二. NotificationListenerService详解\"></a>二. NotificationListenerService详解</h3><p>通知的新增和删除，都会回调你注册的NLS里的方法，这些信息可以通过StatusBarNotification类对象来获取。<br>另外比较主要的是，系统开启通知读取服务后，系统就会对APP有个保活功能，当被系统或是第三方软件kill后，系统会将你的应用重启。很多厂商会利用这点做一些坏坏的事情。并且国内各大杀毒，清理软件都有开启该功能。</p>\n<h4 id=\"NotificationListenerService主要方法-成员变量-：\"><a href=\"#NotificationListenerService主要方法-成员变量-：\" class=\"headerlink\" title=\"NotificationListenerService主要方法(成员变量)：\"></a>NotificationListenerService主要方法(成员变量)：</h4><p>删除通知时会回调onNotificationRemoved, 新增通知或是更新时会回调onNotificationPosted</p>\n<ul>\n<li>cancelAllNotifications() ：删除系统中所有 <em>可被清除</em> 的通知； </li>\n<li>cancelNotification(String pkg, String tag, int id) ：删除具体某一个通知；</li>\n<li>getActiveNotifications() ：返回当前系统所有通知到StatusBarNotification[]的列表；</li>\n<li>onNotificationPosted(StatusBarNotification sbn) ：当系统收到新的通知后出发回调； </li>\n<li>onNotificationRemoved(StatusBarNotification sbn) ：当系统通知被删掉后出发回调；</li>\n</ul>\n<h4 id=\"StatusBarNotification类详解\"><a href=\"#StatusBarNotification类详解\" class=\"headerlink\" title=\"StatusBarNotification类详解\"></a>StatusBarNotification类详解</h4><p>StatusBarNotification，多进程传递对象，所有通知信息都会在这个类中通过Binder传递过来.<br>内部几个重要的方法如下：</p>\n<ul>\n<li>getId()：返回通知对应的id；</li>\n<li>getNotification()：返回通知对象；</li>\n<li>getPackageName()：返回通知对应的包名；</li>\n<li>getPostTime()：返回通知发起的时间；</li>\n<li>getTag()：返回通知的Tag，如果没有设置返回null；</li>\n<li>isClearable()：返回该通知是否可被清楚，FLAG_ONGOING_EVENT、FLAG_NO_CLEAR；</li>\n<li>isOngoing()：检查该通知的flag是否为FLAG_ONGOING_EVENT；</li>\n</ul>\n<p>其中，我们通过getNotification()可以得到Notification对象，Notification是我们比较熟悉的类了，我们可以得到通知具体内容甚至可以还原RemoteViews到我们的本地view上。</p>\n<h3 id=\"三-使用方法\"><a href=\"#三-使用方法\" class=\"headerlink\" title=\"三. 使用方法\"></a>三. 使用方法</h3><p>正确使用NotificationListenerService需要进行三步骤：</p>\n<h4 id=\"1-新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\"><a href=\"#1-新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\" class=\"headerlink\" title=\"1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\"></a>1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NLService</span> <span class=\"keyword\">extends</span> <span class=\"title\">NotificationListenerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationPosted</span><span class=\"params\">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationRemoved</span><span class=\"params\">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在AndroidManifest-xml中注册Service并声明相关权限；\"><a href=\"#2-在AndroidManifest-xml中注册Service并声明相关权限；\" class=\"headerlink\" title=\"2. 在AndroidManifest.xml中注册Service并声明相关权限；\"></a>2. 在AndroidManifest.xml中注册Service并声明相关权限；</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".NLService\"</span></span><br><span class=\"line\">       <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/service_name\"</span></span><br><span class=\"line\">       <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.service.notification.NotificationListenerService\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-开启NotificationMonitor的监听功能；\"><a href=\"#3-开启NotificationMonitor的监听功能；\" class=\"headerlink\" title=\"3. 开启NotificationMonitor的监听功能；\"></a>3. 开启NotificationMonitor的监听功能；</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isEnabled()) &#123;</span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\"</span>);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"已开启服务权限\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String pkgName = getPackageName();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String flat = Settings.Secure.getString(getContentResolver(),</span><br><span class=\"line\">            ENABLED_NOTIFICATION_LISTENERS);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(flat)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] names = flat.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ComponentName cn = ComponentName.unflattenFromString(names[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TextUtils.equals(pkgName, cn.getPackageName())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-Demo讲解\"><a href=\"#四-Demo讲解\" class=\"headerlink\" title=\"四. Demo讲解\"></a>四. Demo讲解</h3><p>根据以上步骤，已经可以接收到通知栏变换时的回调，及获取当前所有通知列表，我们限制写个小例子，活取所有通知列表并且监听通知栏的变换，把收到的Notification及相关信息展示到我们的页面ListView中．</p>\n<h4 id=\"1-按照以上步骤建立基本例子框架\"><a href=\"#1-按照以上步骤建立基本例子框架\" class=\"headerlink\" title=\"1. 按照以上步骤建立基本例子框架\"></a>1. 按照以上步骤建立基本例子框架</h4><p>写布局，要有开启服务的btn, 活取所有通知的btn和清除所有列表的btn, 界面比较简陋，如图：</p>\n<p><img src=\"./screenshot/demo.png\" alt=\"Demo截图\"></p>\n<h4 id=\"2-建立BroadcastReceiver和Service交互\"><a href=\"#2-建立BroadcastReceiver和Service交互\" class=\"headerlink\" title=\"2. 建立BroadcastReceiver和Service交互\"></a>2. 建立BroadcastReceiver和Service交互</h4><p>当然也可以用binder说是message通信,根据自己程序设计选择,这里为了简单的演示用了BroadcastReceiver机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotificationReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        String temp = mInfoList.size() + <span class=\"string\">\"：\"</span> + intent.getStringExtra(EVENT);</span><br><span class=\"line\">        NTBean bean = <span class=\"keyword\">new</span> NTBean();</span><br><span class=\"line\">        bean.info = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        Bundle budle = intent.getExtras();</span><br><span class=\"line\">        bean.title = budle.getString(Notification.EXTRA_TITLE);</span><br><span class=\"line\">        bean.text = budle.getString(Notification.EXTRA_TEXT);</span><br><span class=\"line\">        bean.subText = budle.getString(Notification.EXTRA_SUB_TEXT);</span><br><span class=\"line\">        bean.largeIcon = budle.getParcelable(Notification.EXTRA_LARGE_ICON);</span><br><span class=\"line\">        Icon icon = budle.getParcelable(Notification.EXTRA_SMALL_ICON);</span><br><span class=\"line\">        bean.smallIcon = icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.viewS = budle.getParcelable(VIEW_S);</span><br><span class=\"line\">        bean.viewL = budle.getParcelable(View_L);</span><br><span class=\"line\"></span><br><span class=\"line\">        mInfoList.add(bean);</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"changxing\"</span>, <span class=\"string\">\"receive:\"</span> + temp + <span class=\"string\">\"\\n\"</span> + budle);</span><br><span class=\"line\">        mAdapter.notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-活取相关回调展示页面\"><a href=\"#3-活取相关回调展示页面\" class=\"headerlink\" title=\"3. 活取相关回调展示页面\"></a>3. 活取相关回调展示页面</h4><p>将回调的相关参数传递到activity中, 展示到listview中,其中可以直接用<strong>RemoteViews#apply</strong>方法将Notification展示到我们本地<em>ViewGroup</em>中.</p>\n<p>程序运行如下:</p>\n<p><img src=\"scr_a.png\" alt=\"程序运行截图\"><br><img src=\"scr_b.png\" alt=\"程序运行截图\"></p>\n","excerpt":"<h3 id=\"一-方法概述\"><a href=\"#一-方法概述\" class=\"headerlink\" title=\"一. 方法概述\"></a>一. 方法概述</h3><p>android在api 18前可以通过辅助功能’AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED’或是<em>反射</em>活取通知栏相关信息。<br>现在我们可以根据<em>NotificationListenerService</em>类非常容易的活取通知回调相关信息。<br>","more":"</p>\n<h3 id=\"二-NotificationListenerService详解\"><a href=\"#二-NotificationListenerService详解\" class=\"headerlink\" title=\"二. NotificationListenerService详解\"></a>二. NotificationListenerService详解</h3><p>通知的新增和删除，都会回调你注册的NLS里的方法，这些信息可以通过StatusBarNotification类对象来获取。<br>另外比较主要的是，系统开启通知读取服务后，系统就会对APP有个保活功能，当被系统或是第三方软件kill后，系统会将你的应用重启。很多厂商会利用这点做一些坏坏的事情。并且国内各大杀毒，清理软件都有开启该功能。</p>\n<h4 id=\"NotificationListenerService主要方法-成员变量-：\"><a href=\"#NotificationListenerService主要方法-成员变量-：\" class=\"headerlink\" title=\"NotificationListenerService主要方法(成员变量)：\"></a>NotificationListenerService主要方法(成员变量)：</h4><p>删除通知时会回调onNotificationRemoved, 新增通知或是更新时会回调onNotificationPosted</p>\n<ul>\n<li>cancelAllNotifications() ：删除系统中所有 <em>可被清除</em> 的通知； </li>\n<li>cancelNotification(String pkg, String tag, int id) ：删除具体某一个通知；</li>\n<li>getActiveNotifications() ：返回当前系统所有通知到StatusBarNotification[]的列表；</li>\n<li>onNotificationPosted(StatusBarNotification sbn) ：当系统收到新的通知后出发回调； </li>\n<li>onNotificationRemoved(StatusBarNotification sbn) ：当系统通知被删掉后出发回调；</li>\n</ul>\n<h4 id=\"StatusBarNotification类详解\"><a href=\"#StatusBarNotification类详解\" class=\"headerlink\" title=\"StatusBarNotification类详解\"></a>StatusBarNotification类详解</h4><p>StatusBarNotification，多进程传递对象，所有通知信息都会在这个类中通过Binder传递过来.<br>内部几个重要的方法如下：</p>\n<ul>\n<li>getId()：返回通知对应的id；</li>\n<li>getNotification()：返回通知对象；</li>\n<li>getPackageName()：返回通知对应的包名；</li>\n<li>getPostTime()：返回通知发起的时间；</li>\n<li>getTag()：返回通知的Tag，如果没有设置返回null；</li>\n<li>isClearable()：返回该通知是否可被清楚，FLAG_ONGOING_EVENT、FLAG_NO_CLEAR；</li>\n<li>isOngoing()：检查该通知的flag是否为FLAG_ONGOING_EVENT；</li>\n</ul>\n<p>其中，我们通过getNotification()可以得到Notification对象，Notification是我们比较熟悉的类了，我们可以得到通知具体内容甚至可以还原RemoteViews到我们的本地view上。</p>\n<h3 id=\"三-使用方法\"><a href=\"#三-使用方法\" class=\"headerlink\" title=\"三. 使用方法\"></a>三. 使用方法</h3><p>正确使用NotificationListenerService需要进行三步骤：</p>\n<h4 id=\"1-新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\"><a href=\"#1-新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\" class=\"headerlink\" title=\"1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；\"></a>1. 新建一个类并继承自NotificationListenerService，override其中重要的两个方法；</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NLService</span> <span class=\"keyword\">extends</span> <span class=\"title\">NotificationListenerService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationPosted</span><span class=\"params\">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNotificationRemoved</span><span class=\"params\">(StatusBarNotification sbn)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在AndroidManifest-xml中注册Service并声明相关权限；\"><a href=\"#2-在AndroidManifest-xml中注册Service并声明相关权限；\" class=\"headerlink\" title=\"2. 在AndroidManifest.xml中注册Service并声明相关权限；\"></a>2. 在AndroidManifest.xml中注册Service并声明相关权限；</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".NLService\"</span></span><br><span class=\"line\">       <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/service_name\"</span></span><br><span class=\"line\">       <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.service.notification.NotificationListenerService\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-开启NotificationMonitor的监听功能；\"><a href=\"#3-开启NotificationMonitor的监听功能；\" class=\"headerlink\" title=\"3. 开启NotificationMonitor的监听功能；\"></a>3. 开启NotificationMonitor的监听功能；</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isEnabled()) &#123;</span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\"</span>);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"已开启服务权限\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnabled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String pkgName = getPackageName();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String flat = Settings.Secure.getString(getContentResolver(),</span><br><span class=\"line\">            ENABLED_NOTIFICATION_LISTENERS);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!TextUtils.isEmpty(flat)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String[] names = flat.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; names.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ComponentName cn = ComponentName.unflattenFromString(names[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (TextUtils.equals(pkgName, cn.getPackageName())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-Demo讲解\"><a href=\"#四-Demo讲解\" class=\"headerlink\" title=\"四. Demo讲解\"></a>四. Demo讲解</h3><p>根据以上步骤，已经可以接收到通知栏变换时的回调，及获取当前所有通知列表，我们限制写个小例子，活取所有通知列表并且监听通知栏的变换，把收到的Notification及相关信息展示到我们的页面ListView中．</p>\n<h4 id=\"1-按照以上步骤建立基本例子框架\"><a href=\"#1-按照以上步骤建立基本例子框架\" class=\"headerlink\" title=\"1. 按照以上步骤建立基本例子框架\"></a>1. 按照以上步骤建立基本例子框架</h4><p>写布局，要有开启服务的btn, 活取所有通知的btn和清除所有列表的btn, 界面比较简陋，如图：</p>\n<p><img src=\"./screenshot/demo.png\" alt=\"Demo截图\"></p>\n<h4 id=\"2-建立BroadcastReceiver和Service交互\"><a href=\"#2-建立BroadcastReceiver和Service交互\" class=\"headerlink\" title=\"2. 建立BroadcastReceiver和Service交互\"></a>2. 建立BroadcastReceiver和Service交互</h4><p>当然也可以用binder说是message通信,根据自己程序设计选择,这里为了简单的演示用了BroadcastReceiver机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotificationReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        String temp = mInfoList.size() + <span class=\"string\">\"：\"</span> + intent.getStringExtra(EVENT);</span><br><span class=\"line\">        NTBean bean = <span class=\"keyword\">new</span> NTBean();</span><br><span class=\"line\">        bean.info = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        Bundle budle = intent.getExtras();</span><br><span class=\"line\">        bean.title = budle.getString(Notification.EXTRA_TITLE);</span><br><span class=\"line\">        bean.text = budle.getString(Notification.EXTRA_TEXT);</span><br><span class=\"line\">        bean.subText = budle.getString(Notification.EXTRA_SUB_TEXT);</span><br><span class=\"line\">        bean.largeIcon = budle.getParcelable(Notification.EXTRA_LARGE_ICON);</span><br><span class=\"line\">        Icon icon = budle.getParcelable(Notification.EXTRA_SMALL_ICON);</span><br><span class=\"line\">        bean.smallIcon = icon;</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.viewS = budle.getParcelable(VIEW_S);</span><br><span class=\"line\">        bean.viewL = budle.getParcelable(View_L);</span><br><span class=\"line\"></span><br><span class=\"line\">        mInfoList.add(bean);</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"changxing\"</span>, <span class=\"string\">\"receive:\"</span> + temp + <span class=\"string\">\"\\n\"</span> + budle);</span><br><span class=\"line\">        mAdapter.notifyDataSetChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-活取相关回调展示页面\"><a href=\"#3-活取相关回调展示页面\" class=\"headerlink\" title=\"3. 活取相关回调展示页面\"></a>3. 活取相关回调展示页面</h4><p>将回调的相关参数传递到activity中, 展示到listview中,其中可以直接用<strong>RemoteViews#apply</strong>方法将Notification展示到我们本地<em>ViewGroup</em>中.</p>\n<p>程序运行如下:</p>\n<p><img src=\"scr_a.png\" alt=\"程序运行截图\"><br><img src=\"scr_b.png\" alt=\"程序运行截图\"></p>"},{"title":"git log命令展示过滤技巧","date":"2016-11-08T03:21:21.000Z","_content":"\ngit log命令强大，掌握几条使用技巧可以让你的工作事半功倍，这篇文章总结了git log基础的相关使用技巧，满足了绝大数git log使用场景．\n\n![Better git-log](http://www.linuxdiyf.com/linux/uploads/allimg/160812/2-160Q215063C28.jpg)\n\n<!--more-->\n\n# git log命令展示过滤技巧\n\n\n###1. git log -n\n>展示前n条数据\n\n###2.git log --stat\n>展示简要的每次提交行数的变化，及其他基本信息。\n\n###3.git log -p\n>展示每次提交详细的代码变化\n\n###4.git log --pretty=oneline\n>用一行展示每次提交的*commit id*   和 *提交注释信息*\n\n###5. git log  --graph\n>展示分支信息\n\n\n\n###6.git log --pretty=format:\" \"\n\n``` \n git log --pretty=format:\"%h %s\" \n #个人log配置个性化输出命令\n git log --pretty=format:\"%H %cd *%an*:%s(%ar)\" --graph \n```\n- %H  提交对象（commit）的完整哈希字串\n- %h  提交对象的简短哈希字串\n- %T  树对象（tree）的完整哈希字串\n- %t  树对象的简短哈希字串\n- %P  父对象（parent）的完整哈希字串\n- %p  父对象的简短哈希字串\n- %an 作者（author）的名字\n- %ae 作者的电子邮件地址\n- %ad 作者修订日期（可以用 -date= 选项定制格式）\n- %ar 作者修订日期，按多久以前的方式显示\n- %cn 提交者(committer)的名字\n- %ce 提交者的电子邮件地址\n- %cd 提交日期\n- %cr 提交日期，按多久以前的方式显示\n- %s  提交说明\n\n###7.git log --since --author --grep\n展示指定log信息,时间参数需要用UTC格式时间。\n\n- -n 仅显示最近的 n 条提交\n- --since, --after 仅显示指定时间之后的提交。\n- --until, --before 仅显示指定时间之前的提交。\n- --author 仅显示指定作者相关的提交。\n- --committer 仅显示指定提交者相关的提交。\n- git log hash.. 可以输出指定hash之后的提交\n\n###8.git log 参数参考\n\n```\ngit log 命令支持的选项\n\n-p 按补丁格式显示每个更新之间的差异。\n\n--stat 显示每次更新的文件修改统计信息。\n\n--shortstat 只显示 --stat 中最后的行数修改添加移除统计。\n\n--name-only 仅在提交信息后显示已修改的文件清单。\n\n--name-status 显示新增、修改、删除的文件清单。\n\n--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。\n\n--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。\n\n--graph 显示 ASCII 图形表示的分支合并历史。\n\n--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。\n```\n###9.软件辅助\n推荐两款软件都特别好用： gitk 和 gitg\n这两款软件mac和linux 都有相关版本\n\n###10.自我学习\n```\n$ git log --help\n```\n\n\n\n","source":"_posts/git-log.md","raw":"---\ntitle: git log命令展示过滤技巧\ndate: 2016-11-08 11:21:21\ntags: git\ncategories: git \n---\n\ngit log命令强大，掌握几条使用技巧可以让你的工作事半功倍，这篇文章总结了git log基础的相关使用技巧，满足了绝大数git log使用场景．\n\n![Better git-log](http://www.linuxdiyf.com/linux/uploads/allimg/160812/2-160Q215063C28.jpg)\n\n<!--more-->\n\n# git log命令展示过滤技巧\n\n\n###1. git log -n\n>展示前n条数据\n\n###2.git log --stat\n>展示简要的每次提交行数的变化，及其他基本信息。\n\n###3.git log -p\n>展示每次提交详细的代码变化\n\n###4.git log --pretty=oneline\n>用一行展示每次提交的*commit id*   和 *提交注释信息*\n\n###5. git log  --graph\n>展示分支信息\n\n\n\n###6.git log --pretty=format:\" \"\n\n``` \n git log --pretty=format:\"%h %s\" \n #个人log配置个性化输出命令\n git log --pretty=format:\"%H %cd *%an*:%s(%ar)\" --graph \n```\n- %H  提交对象（commit）的完整哈希字串\n- %h  提交对象的简短哈希字串\n- %T  树对象（tree）的完整哈希字串\n- %t  树对象的简短哈希字串\n- %P  父对象（parent）的完整哈希字串\n- %p  父对象的简短哈希字串\n- %an 作者（author）的名字\n- %ae 作者的电子邮件地址\n- %ad 作者修订日期（可以用 -date= 选项定制格式）\n- %ar 作者修订日期，按多久以前的方式显示\n- %cn 提交者(committer)的名字\n- %ce 提交者的电子邮件地址\n- %cd 提交日期\n- %cr 提交日期，按多久以前的方式显示\n- %s  提交说明\n\n###7.git log --since --author --grep\n展示指定log信息,时间参数需要用UTC格式时间。\n\n- -n 仅显示最近的 n 条提交\n- --since, --after 仅显示指定时间之后的提交。\n- --until, --before 仅显示指定时间之前的提交。\n- --author 仅显示指定作者相关的提交。\n- --committer 仅显示指定提交者相关的提交。\n- git log hash.. 可以输出指定hash之后的提交\n\n###8.git log 参数参考\n\n```\ngit log 命令支持的选项\n\n-p 按补丁格式显示每个更新之间的差异。\n\n--stat 显示每次更新的文件修改统计信息。\n\n--shortstat 只显示 --stat 中最后的行数修改添加移除统计。\n\n--name-only 仅在提交信息后显示已修改的文件清单。\n\n--name-status 显示新增、修改、删除的文件清单。\n\n--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。\n\n--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。\n\n--graph 显示 ASCII 图形表示的分支合并历史。\n\n--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。\n```\n###9.软件辅助\n推荐两款软件都特别好用： gitk 和 gitg\n这两款软件mac和linux 都有相关版本\n\n###10.自我学习\n```\n$ git log --help\n```\n\n\n\n","slug":"git-log","published":1,"updated":"2016-11-08T04:31:55.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tm3000oa475t1nt1r8b","content":"<p>git log命令强大，掌握几条使用技巧可以让你的工作事半功倍，这篇文章总结了git log基础的相关使用技巧，满足了绝大数git log使用场景．</p>\n<p><img src=\"http://www.linuxdiyf.com/linux/uploads/allimg/160812/2-160Q215063C28.jpg\" alt=\"Better git-log\"></p>\n<a id=\"more\"></a>\n<h1 id=\"git-log命令展示过滤技巧\"><a href=\"#git-log命令展示过滤技巧\" class=\"headerlink\" title=\"git log命令展示过滤技巧\"></a>git log命令展示过滤技巧</h1><p>###1. git log -n</p>\n<blockquote>\n<p>展示前n条数据</p>\n</blockquote>\n<p>###2.git log –stat</p>\n<blockquote>\n<p>展示简要的每次提交行数的变化，及其他基本信息。</p>\n</blockquote>\n<p>###3.git log -p</p>\n<blockquote>\n<p>展示每次提交详细的代码变化</p>\n</blockquote>\n<p>###4.git log –pretty=oneline</p>\n<blockquote>\n<p>用一行展示每次提交的<em>commit id</em>   和 <em>提交注释信息</em></p>\n</blockquote>\n<p>###5. git log  –graph</p>\n<blockquote>\n<p>展示分支信息</p>\n</blockquote>\n<p>###6.git log –pretty=format:” “</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">log</span> --pretty=<span class=\"keyword\">format</span>:<span class=\"string\">\"%h %s\"</span> </span><br><span class=\"line\"><span class=\"comment\">#个人log配置个性化输出命令</span></span><br><span class=\"line\">git <span class=\"keyword\">log</span> --pretty=<span class=\"keyword\">format</span>:<span class=\"string\">\"%H %cd *%an*:%s(%ar)\"</span> --graph</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%H  提交对象（commit）的完整哈希字串</li>\n<li>%h  提交对象的简短哈希字串</li>\n<li>%T  树对象（tree）的完整哈希字串</li>\n<li>%t  树对象的简短哈希字串</li>\n<li>%P  父对象（parent）的完整哈希字串</li>\n<li>%p  父对象的简短哈希字串</li>\n<li>%an 作者（author）的名字</li>\n<li>%ae 作者的电子邮件地址</li>\n<li>%ad 作者修订日期（可以用 -date= 选项定制格式）</li>\n<li>%ar 作者修订日期，按多久以前的方式显示</li>\n<li>%cn 提交者(committer)的名字</li>\n<li>%ce 提交者的电子邮件地址</li>\n<li>%cd 提交日期</li>\n<li>%cr 提交日期，按多久以前的方式显示</li>\n<li>%s  提交说明</li>\n</ul>\n<p>###7.git log –since –author –grep<br>展示指定log信息,时间参数需要用UTC格式时间。</p>\n<ul>\n<li>-n 仅显示最近的 n 条提交</li>\n<li>–since, –after 仅显示指定时间之后的提交。</li>\n<li>–until, –before 仅显示指定时间之前的提交。</li>\n<li>–author 仅显示指定作者相关的提交。</li>\n<li>–committer 仅显示指定提交者相关的提交。</li>\n<li>git log hash.. 可以输出指定hash之后的提交</li>\n</ul>\n<p>###8.git log 参数参考</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log 命令支持的选项</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"ruby\">p 按补丁格式显示每个更新之间的差异。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-stat 显示每次更新的文件修改统计信息。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-shortstat 只显示 --stat 中最后的行数修改添加移除统计。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-name-only 仅在提交信息后显示已修改的文件清单。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-name-status 显示新增、修改、删除的文件清单。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-abbrev-commit 仅显示 SHA-<span class=\"number\">1</span> 的前几个字符，而非所有的 <span class=\"number\">40</span> 个字符。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-relative-date 使用较短的相对时间显示（比如，“<span class=\"number\">2</span> weeks ago”）。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-graph 显示 ASCII 图形表示的分支合并历史。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</span></span><br></pre></td></tr></table></figure>\n<p>###9.软件辅助<br>推荐两款软件都特别好用： gitk 和 gitg<br>这两款软件mac和linux 都有相关版本</p>\n<p>###10.自我学习<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--help</span></span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>git log命令强大，掌握几条使用技巧可以让你的工作事半功倍，这篇文章总结了git log基础的相关使用技巧，满足了绝大数git log使用场景．</p>\n<p><img src=\"http://www.linuxdiyf.com/linux/uploads/allimg/160812/2-160Q215063C28.jpg\" alt=\"Better git-log\"></p>","more":"<h1 id=\"git-log命令展示过滤技巧\"><a href=\"#git-log命令展示过滤技巧\" class=\"headerlink\" title=\"git log命令展示过滤技巧\"></a>git log命令展示过滤技巧</h1><p>###1. git log -n</p>\n<blockquote>\n<p>展示前n条数据</p>\n</blockquote>\n<p>###2.git log –stat</p>\n<blockquote>\n<p>展示简要的每次提交行数的变化，及其他基本信息。</p>\n</blockquote>\n<p>###3.git log -p</p>\n<blockquote>\n<p>展示每次提交详细的代码变化</p>\n</blockquote>\n<p>###4.git log –pretty=oneline</p>\n<blockquote>\n<p>用一行展示每次提交的<em>commit id</em>   和 <em>提交注释信息</em></p>\n</blockquote>\n<p>###5. git log  –graph</p>\n<blockquote>\n<p>展示分支信息</p>\n</blockquote>\n<p>###6.git log –pretty=format:” “</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">log</span> --pretty=<span class=\"keyword\">format</span>:<span class=\"string\">\"%h %s\"</span> </span><br><span class=\"line\"><span class=\"comment\">#个人log配置个性化输出命令</span></span><br><span class=\"line\">git <span class=\"keyword\">log</span> --pretty=<span class=\"keyword\">format</span>:<span class=\"string\">\"%H %cd *%an*:%s(%ar)\"</span> --graph</span><br></pre></td></tr></table></figure>\n<ul>\n<li>%H  提交对象（commit）的完整哈希字串</li>\n<li>%h  提交对象的简短哈希字串</li>\n<li>%T  树对象（tree）的完整哈希字串</li>\n<li>%t  树对象的简短哈希字串</li>\n<li>%P  父对象（parent）的完整哈希字串</li>\n<li>%p  父对象的简短哈希字串</li>\n<li>%an 作者（author）的名字</li>\n<li>%ae 作者的电子邮件地址</li>\n<li>%ad 作者修订日期（可以用 -date= 选项定制格式）</li>\n<li>%ar 作者修订日期，按多久以前的方式显示</li>\n<li>%cn 提交者(committer)的名字</li>\n<li>%ce 提交者的电子邮件地址</li>\n<li>%cd 提交日期</li>\n<li>%cr 提交日期，按多久以前的方式显示</li>\n<li>%s  提交说明</li>\n</ul>\n<p>###7.git log –since –author –grep<br>展示指定log信息,时间参数需要用UTC格式时间。</p>\n<ul>\n<li>-n 仅显示最近的 n 条提交</li>\n<li>–since, –after 仅显示指定时间之后的提交。</li>\n<li>–until, –before 仅显示指定时间之前的提交。</li>\n<li>–author 仅显示指定作者相关的提交。</li>\n<li>–committer 仅显示指定提交者相关的提交。</li>\n<li>git log hash.. 可以输出指定hash之后的提交</li>\n</ul>\n<p>###8.git log 参数参考</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log 命令支持的选项</span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"ruby\">p 按补丁格式显示每个更新之间的差异。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-stat 显示每次更新的文件修改统计信息。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-shortstat 只显示 --stat 中最后的行数修改添加移除统计。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-name-only 仅在提交信息后显示已修改的文件清单。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-name-status 显示新增、修改、删除的文件清单。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-abbrev-commit 仅显示 SHA-<span class=\"number\">1</span> 的前几个字符，而非所有的 <span class=\"number\">40</span> 个字符。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-relative-date 使用较短的相对时间显示（比如，“<span class=\"number\">2</span> weeks ago”）。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-graph 显示 ASCII 图形表示的分支合并历史。</span><br><span class=\"line\"></span></span><br><span class=\"line\">-<span class=\"ruby\">-pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</span></span><br></pre></td></tr></table></figure>\n<p>###9.软件辅助<br>推荐两款软件都特别好用： gitk 和 gitg<br>这两款软件mac和linux 都有相关版本</p>\n<p>###10.自我学习<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> <span class=\"comment\">--help</span></span><br></pre></td></tr></table></figure></p>"},{"title":"Node 升级工具n 大坑","date":"2016-04-07T16:46:19.000Z","_content":"\n接触node是应为hexo博客框架的使用， 的确很方便很便捷，然后正是由于太简单，大部分工具都是一键搞定，对于程序员来说确不是工作挣钱的最佳语言，除非学的非常精湛，自己架构框架供别人使用。\n所以node可以当成程序员个人语言爱好，业余时间了解学习。只是个人理解，不喜勿喷。\n![npm instll n](http://www.uml.org.cn/itnews/images/201312030901.jpg)\n\n<!-- more -->\n\n本文环境基于Mac OS X EI Capitan V10.11.4,应该是mac环境的通病。\n\n## 好奇心害死猫\n\n心血来潮想更新一下node.js ,\n在命令行里输入(网上的方法)：\n\n```\nsudo npm install -g n\n```\n\n接着又输入 sudo n stable\n\n然后命令行里开始显示百分比，从1% 慢慢变到100%，我以为更新完了，结果。。。\n输入 node -v  显示：\n\n```\n    dyld: Symbol not found:\n    Referenced from: /usr/local/bin/node\n    Expected in: /usr/lib/libstdc++.6.dylib\n    Trace/BPT trap: 5\n```\n\n然后就知道麻烦来了，总之，npm后都是这样子，网上百度各种办法，重装gcc ， 卸载node重装， 添加环境变量等等。。。。\n\n反正各种方法都行不同， 真不知道 *n* 这个工具到底是否能够在mac上用，反正好多人遇到类似办法都没有解决。\n\n## 抛弃n工具\n\n既然n不能够在我的mac上起到升级作用，且还搞坏了node系统，且网上没有搜到有效的相关解决方案，那边只好卸载完全卸载node后重装了。\n\n由于用了*brew*安装的node ，用  ```brew uninstall node``` 卸载node后发现还是没有解决问题。\n\n那么一定是这个命令没有完全卸载node，那么只好自己手动卸载了。\n\n###  cd 到根目录 \n\n```\n    find . -name \"node\"\n    find . -name \"npm\"\n```\n删除所有搜索与node相关的结果\n\n### 重新 brew instll node\n\n安装结束肯能会提示err：\n\n```\n    Error: The `brew link` step did not complete successfully\n    The formula built, but is not symlinked into /usr/local\n    Could not symlink lib/dtrace/node.d\n    Target /usr/local/lib/dtrace/node.d\n    already exists. You may want to remove it:\n    rm '/usr/local/lib/dtrace/node.d'\n\n    To force the link and overwrite all conflicting files:\n    brew link --overwrite node\n```\n\n不用慌张，安照错误提示操作\n```\nrm '/usr/local/lib/dtrace/node.d'｀ \nbrew link --overwrite node\n```\n\n重新运行命令发现node －v 安装成功了。npm －v后确认，重装成果。\n\nnode又恢复正常了！\n\n","source":"_posts/npm-update-errer.md","raw":"---\ntitle: Node 升级工具n 大坑 \ndate: 2016-04-08 00:46:19\ncategories: node \ntags: node\n---\n\n接触node是应为hexo博客框架的使用， 的确很方便很便捷，然后正是由于太简单，大部分工具都是一键搞定，对于程序员来说确不是工作挣钱的最佳语言，除非学的非常精湛，自己架构框架供别人使用。\n所以node可以当成程序员个人语言爱好，业余时间了解学习。只是个人理解，不喜勿喷。\n![npm instll n](http://www.uml.org.cn/itnews/images/201312030901.jpg)\n\n<!-- more -->\n\n本文环境基于Mac OS X EI Capitan V10.11.4,应该是mac环境的通病。\n\n## 好奇心害死猫\n\n心血来潮想更新一下node.js ,\n在命令行里输入(网上的方法)：\n\n```\nsudo npm install -g n\n```\n\n接着又输入 sudo n stable\n\n然后命令行里开始显示百分比，从1% 慢慢变到100%，我以为更新完了，结果。。。\n输入 node -v  显示：\n\n```\n    dyld: Symbol not found:\n    Referenced from: /usr/local/bin/node\n    Expected in: /usr/lib/libstdc++.6.dylib\n    Trace/BPT trap: 5\n```\n\n然后就知道麻烦来了，总之，npm后都是这样子，网上百度各种办法，重装gcc ， 卸载node重装， 添加环境变量等等。。。。\n\n反正各种方法都行不同， 真不知道 *n* 这个工具到底是否能够在mac上用，反正好多人遇到类似办法都没有解决。\n\n## 抛弃n工具\n\n既然n不能够在我的mac上起到升级作用，且还搞坏了node系统，且网上没有搜到有效的相关解决方案，那边只好卸载完全卸载node后重装了。\n\n由于用了*brew*安装的node ，用  ```brew uninstall node``` 卸载node后发现还是没有解决问题。\n\n那么一定是这个命令没有完全卸载node，那么只好自己手动卸载了。\n\n###  cd 到根目录 \n\n```\n    find . -name \"node\"\n    find . -name \"npm\"\n```\n删除所有搜索与node相关的结果\n\n### 重新 brew instll node\n\n安装结束肯能会提示err：\n\n```\n    Error: The `brew link` step did not complete successfully\n    The formula built, but is not symlinked into /usr/local\n    Could not symlink lib/dtrace/node.d\n    Target /usr/local/lib/dtrace/node.d\n    already exists. You may want to remove it:\n    rm '/usr/local/lib/dtrace/node.d'\n\n    To force the link and overwrite all conflicting files:\n    brew link --overwrite node\n```\n\n不用慌张，安照错误提示操作\n```\nrm '/usr/local/lib/dtrace/node.d'｀ \nbrew link --overwrite node\n```\n\n重新运行命令发现node －v 安装成功了。npm －v后确认，重装成果。\n\nnode又恢复正常了！\n\n","slug":"npm-update-errer","published":1,"updated":"2016-11-08T04:31:56.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tm4000ra475g4hihxi5","content":"<p>接触node是应为hexo博客框架的使用， 的确很方便很便捷，然后正是由于太简单，大部分工具都是一键搞定，对于程序员来说确不是工作挣钱的最佳语言，除非学的非常精湛，自己架构框架供别人使用。<br>所以node可以当成程序员个人语言爱好，业余时间了解学习。只是个人理解，不喜勿喷。<br><img src=\"http://www.uml.org.cn/itnews/images/201312030901.jpg\" alt=\"npm instll n\"></p>\n<a id=\"more\"></a>\n<p>本文环境基于Mac OS X EI Capitan V10.11.4,应该是mac环境的通病。</p>\n<h2 id=\"好奇心害死猫\"><a href=\"#好奇心害死猫\" class=\"headerlink\" title=\"好奇心害死猫\"></a>好奇心害死猫</h2><p>心血来潮想更新一下node.js ,<br>在命令行里输入(网上的方法)：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -<span class=\"keyword\">g</span> <span class=\"keyword\">n</span></span><br></pre></td></tr></table></figure>\n<p>接着又输入 sudo n stable</p>\n<p>然后命令行里开始显示百分比，从1% 慢慢变到100%，我以为更新完了，结果。。。<br>输入 node -v  显示：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dyld: Symbol <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">Referenced from: /usr/<span class=\"keyword\">local</span>/bin/node</span><br><span class=\"line\">Expected in: /usr/<span class=\"keyword\">lib</span>/libstdc++<span class=\"number\">.6</span>.dylib</span><br><span class=\"line\"><span class=\"keyword\">Trace</span>/BPT <span class=\"keyword\">trap</span>: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>然后就知道麻烦来了，总之，npm后都是这样子，网上百度各种办法，重装gcc ， 卸载node重装， 添加环境变量等等。。。。</p>\n<p>反正各种方法都行不同， 真不知道 <em>n</em> 这个工具到底是否能够在mac上用，反正好多人遇到类似办法都没有解决。</p>\n<h2 id=\"抛弃n工具\"><a href=\"#抛弃n工具\" class=\"headerlink\" title=\"抛弃n工具\"></a>抛弃n工具</h2><p>既然n不能够在我的mac上起到升级作用，且还搞坏了node系统，且网上没有搜到有效的相关解决方案，那边只好卸载完全卸载node后重装了。</p>\n<p>由于用了<em>brew</em>安装的node ，用  <figure class=\"highlight plain\"><figcaption><span>uninstall node``` 卸载node后发现还是没有解决问题。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">那么一定是这个命令没有完全卸载node，那么只好自己手动卸载了。</span><br><span class=\"line\"></span><br><span class=\"line\">###  cd 到根目录</span><br></pre></td></tr></table></figure></p>\n<pre><code>find . -name &quot;node&quot;\nfind . -name &quot;npm&quot;\n</code></pre><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除所有搜索与<span class=\"keyword\">node</span><span class=\"title\">相关的结果</span><br><span class=\"line\"></span><br><span class=\"line\">### 重新 brew</span> instll <span class=\"keyword\">node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">安装结束肯能会提示err</span>：</span><br></pre></td></tr></table></figure>\n<pre><code>Error: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nCould not symlink lib/dtrace/node.d\nTarget /usr/local/lib/dtrace/node.d\nalready exists. You may want to remove it:\nrm &apos;/usr/local/lib/dtrace/node.d&apos;\n\nTo force the link and overwrite all conflicting files:\nbrew link --overwrite node\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不用慌张，安照错误提示操作</span><br></pre></td></tr></table></figure>\n<p>rm ‘/usr/local/lib/dtrace/node.d’｀<br>brew link –overwrite node<br>```</p>\n<p>重新运行命令发现node －v 安装成功了。npm －v后确认，重装成果。</p>\n<p>node又恢复正常了！</p>\n","excerpt":"<p>接触node是应为hexo博客框架的使用， 的确很方便很便捷，然后正是由于太简单，大部分工具都是一键搞定，对于程序员来说确不是工作挣钱的最佳语言，除非学的非常精湛，自己架构框架供别人使用。<br>所以node可以当成程序员个人语言爱好，业余时间了解学习。只是个人理解，不喜勿喷。<br><img src=\"http://www.uml.org.cn/itnews/images/201312030901.jpg\" alt=\"npm instll n\"></p>","more":"<p>本文环境基于Mac OS X EI Capitan V10.11.4,应该是mac环境的通病。</p>\n<h2 id=\"好奇心害死猫\"><a href=\"#好奇心害死猫\" class=\"headerlink\" title=\"好奇心害死猫\"></a>好奇心害死猫</h2><p>心血来潮想更新一下node.js ,<br>在命令行里输入(网上的方法)：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -<span class=\"keyword\">g</span> <span class=\"keyword\">n</span></span><br></pre></td></tr></table></figure>\n<p>接着又输入 sudo n stable</p>\n<p>然后命令行里开始显示百分比，从1% 慢慢变到100%，我以为更新完了，结果。。。<br>输入 node -v  显示：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dyld: Symbol <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">Referenced from: /usr/<span class=\"keyword\">local</span>/bin/node</span><br><span class=\"line\">Expected in: /usr/<span class=\"keyword\">lib</span>/libstdc++<span class=\"number\">.6</span>.dylib</span><br><span class=\"line\"><span class=\"keyword\">Trace</span>/BPT <span class=\"keyword\">trap</span>: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>然后就知道麻烦来了，总之，npm后都是这样子，网上百度各种办法，重装gcc ， 卸载node重装， 添加环境变量等等。。。。</p>\n<p>反正各种方法都行不同， 真不知道 <em>n</em> 这个工具到底是否能够在mac上用，反正好多人遇到类似办法都没有解决。</p>\n<h2 id=\"抛弃n工具\"><a href=\"#抛弃n工具\" class=\"headerlink\" title=\"抛弃n工具\"></a>抛弃n工具</h2><p>既然n不能够在我的mac上起到升级作用，且还搞坏了node系统，且网上没有搜到有效的相关解决方案，那边只好卸载完全卸载node后重装了。</p>\n<p>由于用了<em>brew</em>安装的node ，用  <figure class=\"highlight plain\"><figcaption><span>uninstall node``` 卸载node后发现还是没有解决问题。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">那么一定是这个命令没有完全卸载node，那么只好自己手动卸载了。</span><br><span class=\"line\"></span><br><span class=\"line\">###  cd 到根目录</span><br></pre></td></tr></table></figure></p>\n<pre><code>find . -name &quot;node&quot;\nfind . -name &quot;npm&quot;\n</code></pre><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除所有搜索与<span class=\"keyword\">node</span><span class=\"title\">相关的结果</span><br><span class=\"line\"></span><br><span class=\"line\">### 重新 brew</span> instll <span class=\"keyword\">node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">安装结束肯能会提示err</span>：</span><br></pre></td></tr></table></figure>\n<pre><code>Error: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nCould not symlink lib/dtrace/node.d\nTarget /usr/local/lib/dtrace/node.d\nalready exists. You may want to remove it:\nrm &apos;/usr/local/lib/dtrace/node.d&apos;\n\nTo force the link and overwrite all conflicting files:\nbrew link --overwrite node\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不用慌张，安照错误提示操作</span><br></pre></td></tr></table></figure>\n<p>rm ‘/usr/local/lib/dtrace/node.d’｀<br>brew link –overwrite node<br>```</p>\n<p>重新运行命令发现node －v 安装成功了。npm －v后确认，重装成果。</p>\n<p>node又恢复正常了！</p>"},{"title":"Python入门-函数的使用到Python的发布安装","date":"2016-03-18T12:16:22.000Z","_content":"\n本文主要适合有一定编程经验，至少掌握一门编程语言的人查看。\n\n文中例子大多都是简单到认识英文单词就能看懂的水平，主要讲的是Python的整体用法和结构，不会设计高深层次，对Python入门有一定帮助。 \n<!--more-->\n\n[Python和Java对比][2]，会看到Python设计思想在于简洁、实用、强大，每一个程序员都值得学习和掌握。\n\n##Python函数的定义及实用\nPython中的函数是一个命名的代码块，和Java一样，可以带0个或多个参数。主要形式如\n``` python\ndef $函数名（$参数）：\n    ...\n    函数体\n    ...\n```\n可以看出Python通过缩进语句代替了java中的{}，将代码归组到一起。\n如Python中的基本语句：\n``` python\nfor item in list:\n    ...\n    do something\n    ...\n\nwhile true:\n     ...\n     do something\n     ...\n\nif true:\n     ...\nelse:\n     ...\n```\n\n写一个通过参数的类型来打印不同的结果例子：\n``` python\n###如果是一个列表类型，则循环打印，否则打印当前\ndef print_test(is_list):\n     if isinstance(is_list, list):\n           for t in is_list:\n                 print(t)\n                 print_test(\"not list\")\n     else:\n           print(the_list)\n\n```\nPython中的列表可以理解卫java中的列表，元组看成java中的数组（用小括号扩住），貌似比数据更强大和简洁一点，我们可以理解为“打了鸡血”的数据，可以随便伸缩，相关方法有：\n>len(list)\n>list.insert（1，‘’）\n>list.remove('')\n>list.append('')\n\n上述实例中，用到递归调用，更具传入参数类型类递归调用自己。可以看到，方法名字前就加了def修饰，参数也是直接随便写。**Python设计哲学把任何事物都看成了对象或集合，类型并不关心内部到底是什么类型，变量标识符根本不需要类型，java中则声明变量时必须要表明类型。可以把Python看成高层集合，对于列表来说，里面可以存储不同类型的数值，只要你给出一个名字，其他的由Python搞定**\n\n例子中isinstance 函数为Python内置函数，和java中的 instanceof 类似。\n\n函数的调用，保存method.py, F5运行后，直接在shell和idle中键入：\n``` python\n### 句未加‘；’ 和写多行句子\nimport method.py\nprint_test([\"item1\",\"item2\",\"item3\"])\n```\n\n##Python程序的发布和安装\n\n模块化Python代码，像java一样，可以构建复杂而强大的系统。把Python代码模块化为类库，方便管理，业方便后续的代码重用和架构。\n>import sys； sys.path 产看python在计算机上存储位置。\n\n把上例函数封装为一个模块，然后发布安装为例：\n\n- **为刚写的方法文件建立一个文件夹：method**\n      把method.py 放到里面\n- **新建立一个文件 “setup.py”**\n    文件中为发布的元数据，编辑如下：\n    \n``` python\n# 元数据\nfrom distutils.core import setup\n\nsetup(\n       name       = 'CankingApp',\n       version    = '1.0',\n       py_modules = ['method'],\n       author     = 'CankingApp',\n       author_email = 'king@gmail.com',\n       url        = 'www.baidu.com',\n       descripthin= 'test',      \n )\n```\n\n- **构建发布文件**\n  打开终端键入命令：\n  > $python3 setup.py sdist\n  >running sdist\n  >running check\n  >warning: check: missing required meta-data: url\n  >warning: sdist: manifest template 'MANIFEST.in' does not exist (using default file list)\n  >warning: sdist: standard file not found: should have one of README, README.txt\n  >writing manifest file 'MANIFEST'\n  >creating CankingApp-1.0\n  >making hard links in CankingApp-1.0...\n  >hard linking hello.py -> CankingApp-1.0\n  >hard linking setup.py -> CankingApp-1.0\n  >Creating tar archive\n  >removing 'CankingApp-1.0' (and everything under it)\n\n  \n- **按装到Python本地副本中**\n终端中命令：\n>$ sudo setup.py install\n>/usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'descripthin'\n  warnings.warn(msg)\n>running install\n>running build\n>running build_py\n>creating build\n>creating build/lib\n>copying method.py -> build/lib\n>running install_lib\n>copying build/lib/method.py -> /usr/local/lib/python3.4/dist-packages\n>byte-compiling /usr/local/lib/python3.4/dist-packages/method.py to method.cpython-34.pyc\n>running install_egg_info\n\n操作完后会看到文件夹中多了**build**和**dist**文件夹及**MANIFEST**文件。\n\n- **构建成功，测试代码**\n\n直接在idle中测试：\n``` python\nimport method\nmethod.print_test([\"item1\",\"item2\",\"item3\"])\n```\n测试函数调用需要加上method，是python中命名空间规定。\nPython中的所有代码都与一个命名空间关联，主程序中的代码与\"_main_\"命名空间关联。我们单独的代码模块自然自动创建一个与代码块同名的命名空间。所以需要带上method.print_test。\n>from method import print_test\n>print_test()\n>//也可以这样用，但是如果此命名空间有同名时会冲突失效，个人认为还是第一种比较好。\n\n\n**成功打印出item则标识安装成功。**\n\n文中实例源代码已上传[GitHub][1],  有兴趣的同学欢迎一起交流学习。\n\n[csdn](http://blog.csdn.net/cankingapp/article/details/46381781)\n---------\n\n[1]: https://github.com/CankingApp/Python\n[2]: http://developer.51cto.com/art/201003/187962.htm\n\n\n","source":"_posts/python.md","raw":"---\ntitle: Python入门-函数的使用到Python的发布安装\ndate: 2016-03-18 20:16:22\ncategories: python\ntags: python\n---\n\n本文主要适合有一定编程经验，至少掌握一门编程语言的人查看。\n\n文中例子大多都是简单到认识英文单词就能看懂的水平，主要讲的是Python的整体用法和结构，不会设计高深层次，对Python入门有一定帮助。 \n<!--more-->\n\n[Python和Java对比][2]，会看到Python设计思想在于简洁、实用、强大，每一个程序员都值得学习和掌握。\n\n##Python函数的定义及实用\nPython中的函数是一个命名的代码块，和Java一样，可以带0个或多个参数。主要形式如\n``` python\ndef $函数名（$参数）：\n    ...\n    函数体\n    ...\n```\n可以看出Python通过缩进语句代替了java中的{}，将代码归组到一起。\n如Python中的基本语句：\n``` python\nfor item in list:\n    ...\n    do something\n    ...\n\nwhile true:\n     ...\n     do something\n     ...\n\nif true:\n     ...\nelse:\n     ...\n```\n\n写一个通过参数的类型来打印不同的结果例子：\n``` python\n###如果是一个列表类型，则循环打印，否则打印当前\ndef print_test(is_list):\n     if isinstance(is_list, list):\n           for t in is_list:\n                 print(t)\n                 print_test(\"not list\")\n     else:\n           print(the_list)\n\n```\nPython中的列表可以理解卫java中的列表，元组看成java中的数组（用小括号扩住），貌似比数据更强大和简洁一点，我们可以理解为“打了鸡血”的数据，可以随便伸缩，相关方法有：\n>len(list)\n>list.insert（1，‘’）\n>list.remove('')\n>list.append('')\n\n上述实例中，用到递归调用，更具传入参数类型类递归调用自己。可以看到，方法名字前就加了def修饰，参数也是直接随便写。**Python设计哲学把任何事物都看成了对象或集合，类型并不关心内部到底是什么类型，变量标识符根本不需要类型，java中则声明变量时必须要表明类型。可以把Python看成高层集合，对于列表来说，里面可以存储不同类型的数值，只要你给出一个名字，其他的由Python搞定**\n\n例子中isinstance 函数为Python内置函数，和java中的 instanceof 类似。\n\n函数的调用，保存method.py, F5运行后，直接在shell和idle中键入：\n``` python\n### 句未加‘；’ 和写多行句子\nimport method.py\nprint_test([\"item1\",\"item2\",\"item3\"])\n```\n\n##Python程序的发布和安装\n\n模块化Python代码，像java一样，可以构建复杂而强大的系统。把Python代码模块化为类库，方便管理，业方便后续的代码重用和架构。\n>import sys； sys.path 产看python在计算机上存储位置。\n\n把上例函数封装为一个模块，然后发布安装为例：\n\n- **为刚写的方法文件建立一个文件夹：method**\n      把method.py 放到里面\n- **新建立一个文件 “setup.py”**\n    文件中为发布的元数据，编辑如下：\n    \n``` python\n# 元数据\nfrom distutils.core import setup\n\nsetup(\n       name       = 'CankingApp',\n       version    = '1.0',\n       py_modules = ['method'],\n       author     = 'CankingApp',\n       author_email = 'king@gmail.com',\n       url        = 'www.baidu.com',\n       descripthin= 'test',      \n )\n```\n\n- **构建发布文件**\n  打开终端键入命令：\n  > $python3 setup.py sdist\n  >running sdist\n  >running check\n  >warning: check: missing required meta-data: url\n  >warning: sdist: manifest template 'MANIFEST.in' does not exist (using default file list)\n  >warning: sdist: standard file not found: should have one of README, README.txt\n  >writing manifest file 'MANIFEST'\n  >creating CankingApp-1.0\n  >making hard links in CankingApp-1.0...\n  >hard linking hello.py -> CankingApp-1.0\n  >hard linking setup.py -> CankingApp-1.0\n  >Creating tar archive\n  >removing 'CankingApp-1.0' (and everything under it)\n\n  \n- **按装到Python本地副本中**\n终端中命令：\n>$ sudo setup.py install\n>/usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'descripthin'\n  warnings.warn(msg)\n>running install\n>running build\n>running build_py\n>creating build\n>creating build/lib\n>copying method.py -> build/lib\n>running install_lib\n>copying build/lib/method.py -> /usr/local/lib/python3.4/dist-packages\n>byte-compiling /usr/local/lib/python3.4/dist-packages/method.py to method.cpython-34.pyc\n>running install_egg_info\n\n操作完后会看到文件夹中多了**build**和**dist**文件夹及**MANIFEST**文件。\n\n- **构建成功，测试代码**\n\n直接在idle中测试：\n``` python\nimport method\nmethod.print_test([\"item1\",\"item2\",\"item3\"])\n```\n测试函数调用需要加上method，是python中命名空间规定。\nPython中的所有代码都与一个命名空间关联，主程序中的代码与\"_main_\"命名空间关联。我们单独的代码模块自然自动创建一个与代码块同名的命名空间。所以需要带上method.print_test。\n>from method import print_test\n>print_test()\n>//也可以这样用，但是如果此命名空间有同名时会冲突失效，个人认为还是第一种比较好。\n\n\n**成功打印出item则标识安装成功。**\n\n文中实例源代码已上传[GitHub][1],  有兴趣的同学欢迎一起交流学习。\n\n[csdn](http://blog.csdn.net/cankingapp/article/details/46381781)\n---------\n\n[1]: https://github.com/CankingApp/Python\n[2]: http://developer.51cto.com/art/201003/187962.htm\n\n\n","slug":"python","published":1,"updated":"2016-11-08T04:31:56.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civam5tm6000va475xjpdm8br","content":"<p>本文主要适合有一定编程经验，至少掌握一门编程语言的人查看。</p>\n<p>文中例子大多都是简单到认识英文单词就能看懂的水平，主要讲的是Python的整体用法和结构，不会设计高深层次，对Python入门有一定帮助。<br><a id=\"more\"></a></p>\n<p><a href=\"http://developer.51cto.com/art/201003/187962.htm\" target=\"_blank\" rel=\"external\">Python和Java对比</a>，会看到Python设计思想在于简洁、实用、强大，每一个程序员都值得学习和掌握。</p>\n<p>##Python函数的定义及实用<br>Python中的函数是一个命名的代码块，和Java一样，可以带0个或多个参数。主要形式如<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def $函数名（$参数）：</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>可以看出Python通过缩进语句代替了java中的{}，将代码归组到一起。<br>如Python中的基本语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    do something</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> true:</span><br><span class=\"line\">     ...</span><br><span class=\"line\">     do something</span><br><span class=\"line\">     ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> true:</span><br><span class=\"line\">     ...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">     ...</span><br></pre></td></tr></table></figure></p>\n<p>写一个通过参数的类型来打印不同的结果例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###如果是一个列表类型，则循环打印，否则打印当前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_test</span><span class=\"params\">(is_list)</span>:</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> isinstance(is_list, list):</span><br><span class=\"line\">           <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> is_list:</span><br><span class=\"line\">                 print(t)</span><br><span class=\"line\">                 print_test(<span class=\"string\">\"not list\"</span>)</span><br><span class=\"line\">     <span class=\"keyword\">else</span>:</span><br><span class=\"line\">           print(the_list)</span><br></pre></td></tr></table></figure></p>\n<p>Python中的列表可以理解卫java中的列表，元组看成java中的数组（用小括号扩住），貌似比数据更强大和简洁一点，我们可以理解为“打了鸡血”的数据，可以随便伸缩，相关方法有：</p>\n<blockquote>\n<p>len(list)<br>list.insert（1，‘’）<br>list.remove(‘’)<br>list.append(‘’)</p>\n</blockquote>\n<p>上述实例中，用到递归调用，更具传入参数类型类递归调用自己。可以看到，方法名字前就加了def修饰，参数也是直接随便写。<strong>Python设计哲学把任何事物都看成了对象或集合，类型并不关心内部到底是什么类型，变量标识符根本不需要类型，java中则声明变量时必须要表明类型。可以把Python看成高层集合，对于列表来说，里面可以存储不同类型的数值，只要你给出一个名字，其他的由Python搞定</strong></p>\n<p>例子中isinstance 函数为Python内置函数，和java中的 instanceof 类似。</p>\n<p>函数的调用，保存method.py, F5运行后，直接在shell和idle中键入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 句未加‘；’ 和写多行句子</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> method.py</span><br><span class=\"line\">print_test([<span class=\"string\">\"item1\"</span>,<span class=\"string\">\"item2\"</span>,<span class=\"string\">\"item3\"</span>])</span><br></pre></td></tr></table></figure></p>\n<p>##Python程序的发布和安装</p>\n<p>模块化Python代码，像java一样，可以构建复杂而强大的系统。把Python代码模块化为类库，方便管理，业方便后续的代码重用和架构。</p>\n<blockquote>\n<p>import sys； sys.path 产看python在计算机上存储位置。</p>\n</blockquote>\n<p>把上例函数封装为一个模块，然后发布安装为例：</p>\n<ul>\n<li><strong>为刚写的方法文件建立一个文件夹：method</strong><pre><code>把method.py 放到里面\n</code></pre></li>\n<li><strong>新建立一个文件 “setup.py”</strong><br>  文件中为发布的元数据，编辑如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">       name       = <span class=\"string\">'CankingApp'</span>,</span><br><span class=\"line\">       version    = <span class=\"string\">'1.0'</span>,</span><br><span class=\"line\">       py_modules = [<span class=\"string\">'method'</span>],</span><br><span class=\"line\">       author     = <span class=\"string\">'CankingApp'</span>,</span><br><span class=\"line\">       author_email = <span class=\"string\">'king@gmail.com'</span>,</span><br><span class=\"line\">       url        = <span class=\"string\">'www.baidu.com'</span>,</span><br><span class=\"line\">       descripthin= <span class=\"string\">'test'</span>,      </span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>构建发布文件</strong><br>打开终端键入命令：<blockquote>\n<p>$python3 setup.py sdist<br>running sdist<br>running check<br>warning: check: missing required meta-data: url<br>warning: sdist: manifest template ‘MANIFEST.in’ does not exist (using default file list)<br>warning: sdist: standard file not found: should have one of README, README.txt<br>writing manifest file ‘MANIFEST’<br>creating CankingApp-1.0<br>making hard links in CankingApp-1.0…<br>hard linking hello.py -&gt; CankingApp-1.0<br>hard linking setup.py -&gt; CankingApp-1.0<br>Creating tar archive<br>removing ‘CankingApp-1.0’ (and everything under it)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><strong>按装到Python本地副本中</strong><br>终端中命令：<blockquote>\n<p>$ sudo setup.py install<br>/usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: ‘descripthin’<br>warnings.warn(msg)<br>running install<br>running build<br>running build_py<br>creating build<br>creating build/lib<br>copying method.py -&gt; build/lib<br>running install_lib<br>copying build/lib/method.py -&gt; /usr/local/lib/python3.4/dist-packages<br>byte-compiling /usr/local/lib/python3.4/dist-packages/method.py to method.cpython-34.pyc<br>running install_egg_info</p>\n</blockquote>\n</li>\n</ul>\n<p>操作完后会看到文件夹中多了<strong>build</strong>和<strong>dist</strong>文件夹及<strong>MANIFEST</strong>文件。</p>\n<ul>\n<li><strong>构建成功，测试代码</strong></li>\n</ul>\n<p>直接在idle中测试：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> method</span><br><span class=\"line\">method.print_test([<span class=\"string\">\"item1\"</span>,<span class=\"string\">\"item2\"</span>,<span class=\"string\">\"item3\"</span>])</span><br></pre></td></tr></table></figure></p>\n<p>测试函数调用需要加上method，是python中命名空间规定。<br>Python中的所有代码都与一个命名空间关联，主程序中的代码与”<em>main</em>“命名空间关联。我们单独的代码模块自然自动创建一个与代码块同名的命名空间。所以需要带上method.print_test。</p>\n<blockquote>\n<p>from method import print_test<br>print_test()<br>//也可以这样用，但是如果此命名空间有同名时会冲突失效，个人认为还是第一种比较好。</p>\n</blockquote>\n<p><strong>成功打印出item则标识安装成功。</strong></p>\n<p>文中实例源代码已上传<a href=\"https://github.com/CankingApp/Python\" target=\"_blank\" rel=\"external\">GitHub</a>,  有兴趣的同学欢迎一起交流学习。</p>\n<h2 id=\"csdn\"><a href=\"#csdn\" class=\"headerlink\" title=\"csdn\"></a><a href=\"http://blog.csdn.net/cankingapp/article/details/46381781\" target=\"_blank\" rel=\"external\">csdn</a></h2>","excerpt":"<p>本文主要适合有一定编程经验，至少掌握一门编程语言的人查看。</p>\n<p>文中例子大多都是简单到认识英文单词就能看懂的水平，主要讲的是Python的整体用法和结构，不会设计高深层次，对Python入门有一定帮助。<br>","more":"</p>\n<p><a href=\"http://developer.51cto.com/art/201003/187962.htm\">Python和Java对比</a>，会看到Python设计思想在于简洁、实用、强大，每一个程序员都值得学习和掌握。</p>\n<p>##Python函数的定义及实用<br>Python中的函数是一个命名的代码块，和Java一样，可以带0个或多个参数。主要形式如<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def $函数名（$参数）：</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>可以看出Python通过缩进语句代替了java中的{}，将代码归组到一起。<br>如Python中的基本语句：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    do something</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> true:</span><br><span class=\"line\">     ...</span><br><span class=\"line\">     do something</span><br><span class=\"line\">     ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> true:</span><br><span class=\"line\">     ...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">     ...</span><br></pre></td></tr></table></figure></p>\n<p>写一个通过参数的类型来打印不同的结果例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###如果是一个列表类型，则循环打印，否则打印当前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_test</span><span class=\"params\">(is_list)</span>:</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> isinstance(is_list, list):</span><br><span class=\"line\">           <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> is_list:</span><br><span class=\"line\">                 print(t)</span><br><span class=\"line\">                 print_test(<span class=\"string\">\"not list\"</span>)</span><br><span class=\"line\">     <span class=\"keyword\">else</span>:</span><br><span class=\"line\">           print(the_list)</span><br></pre></td></tr></table></figure></p>\n<p>Python中的列表可以理解卫java中的列表，元组看成java中的数组（用小括号扩住），貌似比数据更强大和简洁一点，我们可以理解为“打了鸡血”的数据，可以随便伸缩，相关方法有：</p>\n<blockquote>\n<p>len(list)<br>list.insert（1，‘’）<br>list.remove(‘’)<br>list.append(‘’)</p>\n</blockquote>\n<p>上述实例中，用到递归调用，更具传入参数类型类递归调用自己。可以看到，方法名字前就加了def修饰，参数也是直接随便写。<strong>Python设计哲学把任何事物都看成了对象或集合，类型并不关心内部到底是什么类型，变量标识符根本不需要类型，java中则声明变量时必须要表明类型。可以把Python看成高层集合，对于列表来说，里面可以存储不同类型的数值，只要你给出一个名字，其他的由Python搞定</strong></p>\n<p>例子中isinstance 函数为Python内置函数，和java中的 instanceof 类似。</p>\n<p>函数的调用，保存method.py, F5运行后，直接在shell和idle中键入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 句未加‘；’ 和写多行句子</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> method.py</span><br><span class=\"line\">print_test([<span class=\"string\">\"item1\"</span>,<span class=\"string\">\"item2\"</span>,<span class=\"string\">\"item3\"</span>])</span><br></pre></td></tr></table></figure></p>\n<p>##Python程序的发布和安装</p>\n<p>模块化Python代码，像java一样，可以构建复杂而强大的系统。把Python代码模块化为类库，方便管理，业方便后续的代码重用和架构。</p>\n<blockquote>\n<p>import sys； sys.path 产看python在计算机上存储位置。</p>\n</blockquote>\n<p>把上例函数封装为一个模块，然后发布安装为例：</p>\n<ul>\n<li><strong>为刚写的方法文件建立一个文件夹：method</strong><pre><code>把method.py 放到里面\n</code></pre></li>\n<li><strong>新建立一个文件 “setup.py”</strong><br>  文件中为发布的元数据，编辑如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">       name       = <span class=\"string\">'CankingApp'</span>,</span><br><span class=\"line\">       version    = <span class=\"string\">'1.0'</span>,</span><br><span class=\"line\">       py_modules = [<span class=\"string\">'method'</span>],</span><br><span class=\"line\">       author     = <span class=\"string\">'CankingApp'</span>,</span><br><span class=\"line\">       author_email = <span class=\"string\">'king@gmail.com'</span>,</span><br><span class=\"line\">       url        = <span class=\"string\">'www.baidu.com'</span>,</span><br><span class=\"line\">       descripthin= <span class=\"string\">'test'</span>,      </span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>构建发布文件</strong><br>打开终端键入命令：<blockquote>\n<p>$python3 setup.py sdist<br>running sdist<br>running check<br>warning: check: missing required meta-data: url<br>warning: sdist: manifest template ‘MANIFEST.in’ does not exist (using default file list)<br>warning: sdist: standard file not found: should have one of README, README.txt<br>writing manifest file ‘MANIFEST’<br>creating CankingApp-1.0<br>making hard links in CankingApp-1.0…<br>hard linking hello.py -&gt; CankingApp-1.0<br>hard linking setup.py -&gt; CankingApp-1.0<br>Creating tar archive<br>removing ‘CankingApp-1.0’ (and everything under it)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><strong>按装到Python本地副本中</strong><br>终端中命令：<blockquote>\n<p>$ sudo setup.py install<br>/usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: ‘descripthin’<br>warnings.warn(msg)<br>running install<br>running build<br>running build_py<br>creating build<br>creating build/lib<br>copying method.py -&gt; build/lib<br>running install_lib<br>copying build/lib/method.py -&gt; /usr/local/lib/python3.4/dist-packages<br>byte-compiling /usr/local/lib/python3.4/dist-packages/method.py to method.cpython-34.pyc<br>running install_egg_info</p>\n</blockquote>\n</li>\n</ul>\n<p>操作完后会看到文件夹中多了<strong>build</strong>和<strong>dist</strong>文件夹及<strong>MANIFEST</strong>文件。</p>\n<ul>\n<li><strong>构建成功，测试代码</strong></li>\n</ul>\n<p>直接在idle中测试：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> method</span><br><span class=\"line\">method.print_test([<span class=\"string\">\"item1\"</span>,<span class=\"string\">\"item2\"</span>,<span class=\"string\">\"item3\"</span>])</span><br></pre></td></tr></table></figure></p>\n<p>测试函数调用需要加上method，是python中命名空间规定。<br>Python中的所有代码都与一个命名空间关联，主程序中的代码与”<em>main</em>“命名空间关联。我们单独的代码模块自然自动创建一个与代码块同名的命名空间。所以需要带上method.print_test。</p>\n<blockquote>\n<p>from method import print_test<br>print_test()<br>//也可以这样用，但是如果此命名空间有同名时会冲突失效，个人认为还是第一种比较好。</p>\n</blockquote>\n<p><strong>成功打印出item则标识安装成功。</strong></p>\n<p>文中实例源代码已上传<a href=\"https://github.com/CankingApp/Python\">GitHub</a>,  有兴趣的同学欢迎一起交流学习。</p>\n<h2 id=\"csdn\"><a href=\"#csdn\" class=\"headerlink\" title=\"csdn\"></a><a href=\"http://blog.csdn.net/cankingapp/article/details/46381781\">csdn</a></h2>"}],"PostAsset":[{"_id":"source/_posts/access-float/action.gif","slug":"action.gif","post":"civam5tlp0004a475kw0mxsil","modified":0,"renderable":0},{"_id":"source/_posts/access-float/activity_info.png","slug":"activity_info.png","post":"civam5tlp0004a475kw0mxsil","modified":0,"renderable":0},{"_id":"source/_posts/2016-03-18-01/IMG_0021.JPG","slug":"IMG_0021.JPG","post":"civam5tlh0000a475b1s967jz","modified":0,"renderable":0},{"_id":"source/_posts/android-theme/theme.png","slug":"theme.png","post":"civam5tlr0007a47542thkwn5","modified":0,"renderable":0},{"_id":"source/_posts/ffmpeg/2016-03-30 19-10-29.png","slug":"2016-03-30 19-10-29.png","post":"civam5tlv000ca4754orpv08s","modified":0,"renderable":0},{"_id":"source/_posts/ffmpeg/a.gif","slug":"a.gif","post":"civam5tlv000ca4754orpv08s","modified":0,"renderable":0},{"_id":"source/_posts/notification-mgr/demo.png","slug":"demo.png","post":"civam5tm1000ja475yfb7h856","modified":0,"renderable":0},{"_id":"source/_posts/notification-mgr/scr_a.png","slug":"scr_a.png","post":"civam5tm1000ja475yfb7h856","modified":0,"renderable":0},{"_id":"source/_posts/notification-mgr/scr_b.png","slug":"scr_b.png","post":"civam5tm1000ja475yfb7h856","modified":0,"renderable":0},{"_id":"source/_posts/notification-mgr/statusbar.png","slug":"statusbar.png","post":"civam5tm1000ja475yfb7h856","modified":0,"renderable":0},{"_id":"source/_posts/access-float/act.mp4","slug":"act.mp4","post":"civam5tlp0004a475kw0mxsil","modified":0,"renderable":0},{"_id":"source/_posts/access-float/dump.png","slug":"dump.png","post":"civam5tlp0004a475kw0mxsil","modified":0,"renderable":0},{"_id":"source/_posts/access-float/info.png","slug":"info.png","post":"civam5tlp0004a475kw0mxsil","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/acces_in.png","slug":"acces_in.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/danger.png","slug":"danger.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/error.png","slug":"error.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/mult_2.png","slug":"mult_2.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/mult_p1.png","slug":"mult_p1.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/per_show.png","slug":"per_show.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/should.png","slug":"should.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0},{"_id":"source/_posts/android-permission/single_p.png","slug":"single_p.png","post":"civam5tlq0005a4756ypdwir6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"civam5tlq0005a4756ypdwir6","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tlu000ba475nvu52txk"},{"post_id":"civam5tlh0000a475b1s967jz","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tlz000fa475grf4unvd"},{"post_id":"civam5tlr0007a47542thkwn5","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tm1000ia4754unxuvp7"},{"post_id":"civam5tlt000aa47548ud4rki","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tm2000na475yk9827rm"},{"post_id":"civam5tll0001a475ztyjv13e","category_id":"civam5tls0008a475o3zgjsip","_id":"civam5tm4000qa475sul52hxu"},{"post_id":"civam5tlz000ha47548j94e59","category_id":"civam5tls0008a475o3zgjsip","_id":"civam5tm6000ua475j6jt1cnf"},{"post_id":"civam5tlp0004a475kw0mxsil","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tm7000xa475wg9t9gs7"},{"post_id":"civam5tm1000ja475yfb7h856","category_id":"civam5tlo0003a475883zdkz4","_id":"civam5tm8000ya4751o2pll0i"},{"post_id":"civam5tlv000ca4754orpv08s","category_id":"civam5tm2000ka475mhlb3r1s","_id":"civam5tm80012a475fdua0mx1"},{"post_id":"civam5tm3000oa475t1nt1r8b","category_id":"civam5tm6000ta475oucayfe5","_id":"civam5tm80013a475p9m1ii4c"},{"post_id":"civam5tm4000ra475g4hihxi5","category_id":"civam5tm80010a4755hnxwqp9","_id":"civam5tm90017a475im0vabn9"},{"post_id":"civam5tm6000va475xjpdm8br","category_id":"civam5tm90015a4755a2uc0na","_id":"civam5tmc001ba475zz811wxe"}],"PostTag":[{"post_id":"civam5tlh0000a475b1s967jz","tag_id":"civam5tlm0002a475asdf8mjc","_id":"civam5tlt0009a475m1ux4qfx"},{"post_id":"civam5tll0001a475ztyjv13e","tag_id":"civam5tlq0006a475gvelfoce","_id":"civam5tlz000ga4753nd5jyqq"},{"post_id":"civam5tlz000ha47548j94e59","tag_id":"civam5tlq0006a475gvelfoce","_id":"civam5tm2000ma475nfo058lj"},{"post_id":"civam5tlp0004a475kw0mxsil","tag_id":"civam5tlw000da4758c9fbm7c","_id":"civam5tm4000pa475rmyux89w"},{"post_id":"civam5tlq0005a4756ypdwir6","tag_id":"civam5tm2000la475xsoojdxb","_id":"civam5tm7000wa47576mdv0dh"},{"post_id":"civam5tlr0007a47542thkwn5","tag_id":"civam5tm5000sa4756lt5emv8","_id":"civam5tm80011a4751y0zfovf"},{"post_id":"civam5tlt000aa47548ud4rki","tag_id":"civam5tm2000la475xsoojdxb","_id":"civam5tm90016a4750zlmatkj"},{"post_id":"civam5tlv000ca4754orpv08s","tag_id":"civam5tm90014a47576b1pf6o","_id":"civam5tmb0019a475b09cxz4h"},{"post_id":"civam5tm1000ja475yfb7h856","tag_id":"civam5tm2000la475xsoojdxb","_id":"civam5tmc001ca4751y45atrj"},{"post_id":"civam5tm3000oa475t1nt1r8b","tag_id":"civam5tmb001aa47508mj7kfd","_id":"civam5tmc001ea475oofl2ec4"},{"post_id":"civam5tm4000ra475g4hihxi5","tag_id":"civam5tmc001da4759x0jr1o0","_id":"civam5tmd001ga475mhozghd9"},{"post_id":"civam5tm6000va475xjpdm8br","tag_id":"civam5tmc001fa4752iglecsi","_id":"civam5tmd001ha4750yaw6dgt"}],"Tag":[{"name":"smart update","_id":"civam5tlm0002a475asdf8mjc"},{"name":"hexo","_id":"civam5tlq0006a475gvelfoce"},{"name":"float permission","_id":"civam5tlw000da4758c9fbm7c"},{"name":"android","_id":"civam5tm2000la475xsoojdxb"},{"name":"theme","_id":"civam5tm5000sa4756lt5emv8"},{"name":"ffmpeg","_id":"civam5tm90014a47576b1pf6o"},{"name":"git","_id":"civam5tmb001aa47508mj7kfd"},{"name":"node","_id":"civam5tmc001da4759x0jr1o0"},{"name":"python","_id":"civam5tmc001fa4752iglecsi"}]}}